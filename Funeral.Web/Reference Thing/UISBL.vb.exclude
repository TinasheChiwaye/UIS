Imports System.Web
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports Unplugged.myTools
Imports System.Data
Imports System.Web.Configuration
Imports wsSagePayUpload.Service
Imports wsSagePayValidation.Validation
Imports wsSagePayCreditCheck.CreditCheck

' To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line.
' <System.Web.Script.Services.ScriptService()> _
<WebService(Namespace:="http://tempuri.org/")> _
<WebServiceBinding(ConformsTo:=WsiProfiles.BasicProfile1_1)> _
<Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()> _
Public Class UISBL
    Inherits System.Web.Services.WebService

#Region "Declarations"
    Dim strSQL As String
    Dim dsData As New DataSet
    Dim dtData As DataTable
    Dim blnPassed As Boolean = False
    Dim DL As Unplugged.myTools

    Dim SSL As New SSL.Encryption.clsEncryption
    Public strConn As String
    Public strbkConn As String
    '' Dim GenerateExcelSheet As New clsGenerateExcelSheet

   

    Dim MemberBrance As String

    Dim strFileName As String
    Dim strSecurityGroup As String
    Dim intSecurityGroup As Integer

    Dim intFuneralID As Int32
    Dim intQuotationID As Int32

    Dim strkey As String = SSL.CreateHash("play")
    Dim wsValidate As New wsSagePayValidation.Validation
    Dim clsWSNetcash As New wsSagePayUpload.Service
    Dim clsWSMyGate As New clsMyGate.MyGate_DebitOrder_WebServiceService
    Dim clsCreditCheck As New wsSagePayCreditCheck.CreditCheck


    Public Property pintQuotationID() As Int32
        Get
            pintQuotationID = intQuotationID
        End Get
        Set(ByVal value As Int32)
            intQuotationID = value
        End Set
    End Property





#End Region


    <WebMethod()> _
    Public Function InsertMember(ByVal MemberType As String, _
                                ByVal Title As String, _
                                ByVal FullNames As String, _
                                ByVal Surname As String, _
                                ByVal Gender As String, _
                                ByVal ID_Number As String, _
                                ByVal Date_Of_Birth As Date, _
                                ByVal Telephone As String, _
                                ByVal Cellphone As String, _
                                ByVal Address1 As String, _
                                ByVal Address2 As String, _
                                ByVal Address3 As String, _
                                ByVal Address4 As String, _
                                ByVal Code As String, _
                                ByVal MemeberNumber As String, _
                                ByVal MemberSociety As String, _
                                ByVal Plan As String, _
                                ByVal InceptionDate As Date, _
                                ByVal Agent As String, _
                                ByVal AccountHolder As String, _
                                ByVal bank As String, _
                                ByVal BranchCode As String, _
                                ByVal Branch As String, _
                                ByVal AccountNumber As String, _
                                ByVal AccountType As String, _
                                ByVal DebitDate As String, _
                                ByVal CoverDate As Date, _
                                ByVal MemberBranch As String, _
                                ByVal GenerateMember As String, _
                                ByVal MemberPrefix As String, _
                                ByVal strUserName As String, ByVal pgParlourID As String, _
                                ByVal PolicyStatus As String) As Boolean

        Dim intPlanID = ReturnPlanIDByPlanName(Plan, pgParlourID)
        Dim intpkiMemberid As Integer = 0
        blnPassed = False
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)

        Try
            If MemberExistFromMemberNumber(MemeberNumber, strUserName, pgParlourID) <> "" Then
                If dtUserData.Rows(0).Item("GenerateMember") = "yes" Then
                    MemeberNumber = GenerateMemberNo(dtUserData.Rows(0).Item("GenerateMember"), dtUserData.Rows(0).Item("MemberPrefix"), strUserName, pgParlourID)
                Else
                    blnPassed = False
                    Exit Try
                End If
            End If

            If MemberExistFromMemberNumber(MemeberNumber, strUserName, pgParlourID) = "" Then

                strSQL = "Insert Into Members(CreateDate,MemberType, Title, [Full Names], Surname, " & _
            "Gender, [ID Number], [Date Of Birth], Telephone, Cellphone, " & _
            "Address1 ,Address2, Address3, Address4, Code, MemeberNumber, MemberSociety,fkiPlanID,active," & _
            "InceptionDate,PolicyStatus,parlourid,Agent,AccountHolder,Bank,BranchCode,Branch,AccountNumber," & _
            "AccountType,DebitDate,MemberBranch,CoverDate,LastModified,ModifiedUser)" & _
            " values(getdate(),'" & MemberType & "', '" & Title & "','" & FullNames & "','" & Surname & "','" & _
            Gender & "','" & ID_Number & "','" & Date_Of_Birth.ToString("yyyy-MM-dd") & "','" & Telephone & "','" & _
            Cellphone & "','" & Address1 & "','" & Address2 & "','" & Address3 & "','" & Address4 & "','" & _
            Code & "','" & MemeberNumber & "','" & MemberSociety & "'," & intPlanID & ",1,'" & _
            InceptionDate.ToString("yyyy-MM-dd") & "','" & PolicyStatus & "','" & pgParlourID & "','" & _
            Agent & "','" & AccountHolder & "','" & bank & "','" & BranchCode & "','" & Branch & "','" & _
            AccountNumber & "','" & AccountType & "','" & DebitDate & "','" & _
            MemberBranch & "','" & CoverDate.ToString("yyyy-MM-dd") & "',getdate(),'" & strUserName & "')"
                blnPassed = DL.ExecInsertDatabase(strSQL)

                'chech task in outlook
                If blnPassed Then
                    strSQL = "select pkiMemberID from Members where MemeberNumber = '" & MemeberNumber & "' and parlourid='" & pgParlourID & "' "
                    dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                    If Not IsNothing(dsData) Then
                        If dsData.Tables(0).Rows.Count > 0 Then
                            intpkiMemberid = CInt(dsData.Tables(0).Rows(0).Item(0))
                        End If
                    End If

                    Dim dtReturnMemberPlanDetails As DataSet = ReturnMemberPlanDetails(MemeberNumber, pgParlourID)
                    Dim strPremium As Double = FormatCurrency(dtReturnMemberPlanDetails.Tables(0).Rows(0).Item(1), 2)
                    Dim dblJoiningFee As Double = dtReturnMemberPlanDetails.Tables(0).Rows(0).Item(7)

                    blnPassed = AddUpdateJoiningFee(1, Guid.NewGuid().ToString, intpkiMemberid, dblJoiningFee * 100, 0, strUserName, 0, pgParlourID)

                    strSQL = "Insert Into MemberPaymentReminders (fkiMemberId,Notes,DateLastPaid,Premium) " & _
                   "values (" & intpkiMemberid & ",'Premium Due',getdate()," & strPremium & ")"

                    blnPassed = DL.ExecInsertDatabase(strSQL)




                End If
            End If
            AddAudit(strUserName, pgParlourID, "InsertMember  MemberNumber=(" & MemeberNumber & ")")
        Catch ex As Exception
            Throw ex
        Finally
            InsertMember = blnPassed
        End Try
    End Function




    Public Function ReturnPlanIDByPlanName(ByVal strPlanName As String, ByVal ParlourID As String) As Int32
        Dim intPlanID As Int32

        Try
            dsData.Clear()
            strSQL = "Select Top 1 pkiPlanID From Plans where PlanName='" & strPlanName & "' and parlourid='" & ParlourID.ToString & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                intPlanID = 0
                Exit Try
            End If

            intPlanID = Convert.ToDecimal(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanIDByPlanName = intPlanID
        End Try
    End Function

    Public Function ReturnMemberPlanDetails(ByVal strMemberNo As String, ByVal pgParlourID As String) As DataSet

        Try

            dsData = Nothing
            strSQL = "SELECT  Plans.PlanName, Plans.PlanSubscription, Plans.Spouse, Plans.Children, " & _
                    "            Plans.Adults, Plans.WaitingPeriod, Plans.Cover,Plans.JoiningFee ,  " & _
                    "            Members.PolicyStatus ,  max(coalesce(I.PaidUntil,getdate())) NextPaymentDate" & _
                    "            from Plans INNER JOIN Members ON Plans.[pkiPlanID] = Members.[fkiPlanID]  " & _
                    "				left join Invoices I ON Members.pkiMemberID= I.MemberID " & _
                    "Where Members.parlourid='" & pgParlourID & "' and Members.MemeberNumber='" & strMemberNo & "' " & _
                    "           group by " & _
                    "			Plans.PlanName, Plans.PlanSubscription, Plans.Spouse, Plans.Children, " & _
                    "            Plans.Adults, Plans.WaitingPeriod, Plans.Cover,Plans.JoiningFee ,  " & _
                    "            Members.PolicyStatus "


            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If dsData.Tables.Count > 0 Then
                If dsData.Tables(0).Rows.Count < 0 Then
                    dsData = Nothing
                End If
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberPlanDetails = dsData
        End Try
    End Function

    Public Function ReturnPlanNameByPlanID(ByVal intPlanID As Integer) As String

        Dim strPlanName As String = ""

        Try
            dsData.Clear()
            strSQL = "Select Top 1 PlanName From Plans where pkiPlanID=" & intPlanID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                strPlanName = ""
                Exit Try
            End If

            strPlanName = dsData.Tables(0).Rows(0).Item(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanNameByPlanID = strPlanName
        End Try
    End Function


    Public Function ReadMemberTotalPremium(ByVal MemberNumber As String, ByVal pgParlourID As String) As Double
        Dim dblPremium As Double
        Try


            strSQL = "SELECT Members.MemeberNumber, " & _
                        "Plans.PlanSubscription+sum(coalesce(Dependencies.Premium,0))  AS Premium " & _
                        "FROM (Plans INNER JOIN Members ON Plans.pkiPlanID=Members.fkiPlanID) " & _
                        "Left outer JOIN Dependencies ON Members.pkiMemberID= " & _
                        "Dependencies.fkiMemberID and (Dependencies.Claimnumber Is null or Dependencies.Claimnumber='') " & _
                        "WHERE Members.parlourid='" & pgParlourID & "' and ( Members.MemeberNumber = '" & _
                        MemberNumber & "') GROUP BY Members.MemeberNumber, Plans.PlanSubscription"


            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables.Count < 0 Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count < 0 Then
                Exit Try
            End If

            If Not IsDBNull(dsData.Tables(0).Rows(0).Item(1)) Then
                dblPremium = dsData.Tables(0).Rows(0).Item(1)
            Else
                dblPremium = ReturnMemberPlanDetails(MemberNumber, pgParlourID).Tables(0).Rows(0).Item(1)
            End If


        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberTotalPremium = dblPremium
        End Try
    End Function

    <WebMethod()> _
    Public Function one() As String
        one = WebConfigurationManager.AppSettings("one")
    End Function

    <WebMethod()> _
    Public Function two() As String
        two = WebConfigurationManager.AppSettings("two")
    End Function

    <WebMethod()> _
    Public Function three() As String
        three = WebConfigurationManager.AppSettings("three")
    End Function

    <WebMethod()> _
    Public Function four() As String
        four = WebConfigurationManager.AppSettings("four")
    End Function

    Public Sub New()
        strConn = "Data Source= " & Decrypt(WebConfigurationManager.AppSettings("one")) & _
                  ";Initial Catalog=" & Decrypt(WebConfigurationManager.AppSettings("two")) & _
                  ";User ID=" & Decrypt(WebConfigurationManager.AppSettings("three")) & _
                  ";Password= " & Decrypt(WebConfigurationManager.AppSettings("four")) & ";"

        strbkConn = "Data Source= " & Decrypt(WebConfigurationManager.AppSettings("five")) & _
                 ";Initial Catalog=" & Decrypt(WebConfigurationManager.AppSettings("two")) & _
                 ";User ID=" & Decrypt(WebConfigurationManager.AppSettings("three")) & _
                 ";Password= " & Decrypt(WebConfigurationManager.AppSettings("four")) & ";"

        DL = New Unplugged.myTools(strConn, True)
        DL.pstrbkConnectionString = strbkConn
    End Sub

    <WebMethod()> _
  Public Function AddUpdateHelpDesk(ByVal add As Int16, _
                                  ByVal IssueID As String, _
                                  ByVal IssueContactName As String, _
                                  ByVal IssueContactNo As String, _
                                  ByVal IssueSubject As String, _
                                  ByVal IssueDesc As String, _
                                  ByVal IssuePriority As String, _
                                  ByVal IssueStatus As String, _
                                  ByVal IssueAssignedToUser As String, _
                                  ByVal IssueNotes As String, _
                                  ByVal IssueType As String, _
                                  ByVal Parlourid As String, _
                                  ByVal ModifiedUser As String) As Boolean


        Dim intpkiMemberid As Integer = 0
        blnPassed = False
        Try

            strSQL = "EXECUTE  [dbo].[AddUpdateHelpDesk] " & _
                     "  @Add =" & add & "," & _
                     " @IssueID ='" & IssueID & "'," & _
                     " @IssueContactName ='" & IssueContactName & "'," & _
                     " @IssueContactNo ='" & IssueContactNo & "'," & _
                     " @IssueSubject ='" & IssueSubject & "'," & _
                     " @IssueDesc ='" & IssueDesc & "'," & _
                     " @IssuePriority ='" & IssuePriority & "'," & _
                     " @IssueStatus ='" & IssueStatus & "'," & _
                     " @IssueAssignedToUser ='" & IssueAssignedToUser & "'," & _
                     " @IssueNotes ='" & IssueNotes & "'," & _
                     " @IssueType ='" & IssueType & "'," & _
                     " @Parlourid ='" & Parlourid & "'," & _
                     " @ModifiedUser ='" & ModifiedUser & "' "

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateHelpDesk = blnPassed
        End Try
    End Function


    <WebMethod()> _
  Public Function AddUpdateJoiningFee(ByVal add As Int16, _
                                  ByVal JoiningFeeID As String, _
                                  ByVal fkiMemberID As Integer, _
                              ByVal JoiningFeeAmount As Double, _
                              ByVal Paid As Int16, _
                              ByVal UserID As String, _
                              ByVal InvoiceID As String, _
                              ByVal Parlourid As String) As Boolean


        Dim intpkiMemberid As Integer = 0
        blnPassed = False
        Try

            strSQL = "EXECUTE  [dbo].[AddUpdateJoiningFee] " & _
                     "  @add =" & add & "," & _
                     " @JoiningFeeID ='" & JoiningFeeID & "'," & _
                     " @fkiMemberID =" & fkiMemberID & "," & _
                     " @JoiningFeeAmount =" & (JoiningFeeAmount / 100).ToString().Replace(",", ".") & "," & _
                     " @Paid =" & Paid & "," & _
                     " @UserID ='" & UserID & "'," & _
                     " @InvoiceID =" & InvoiceID & "," & _
                     " @Parlourid ='" & Parlourid & "' "


            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateJoiningFee = blnPassed
        End Try
    End Function

    <WebMethod()> _
Public Function SelectClaimsProcessing(ByVal parlourid As String, _
                                          ByVal pkiClaimID As Integer) As DataTable


        Dim intpkiMemberid As Integer = 0
        blnPassed = False
        Try
            dtData = Nothing
            strSQL = "EXECUTE  [dbo].[SelectClaimsProcessing] " & _
                     " @pkiClaimID =" & pkiClaimID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SelectClaimsProcessing = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function SelectClaimsProcessingHistory(ByVal parlourid As String, _
                                      ByVal pkiClaimID As Integer) As DataTable


        Dim intpkiMemberid As Integer = 0
        blnPassed = False
        Try
            dtData = Nothing
            strSQL = "EXECUTE  [dbo].[SelectClaimsProcessingHistory] " & _
                     " @pkiClaimID =" & pkiClaimID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SelectClaimsProcessingHistory = dtData
        End Try
    End Function

    <WebMethod()> _
  Public Function AddUpdateClaimsProcessing(ByVal pkiClaimProcessingID As String, _
                                             ByVal pkiClaimID As Integer, _
                                             ByVal claimStatus As String, _
                                             ByVal claimNotes As String, _
                                             ByVal AssignedTo As String, _
                                             ByVal parlourid As String, _
                                             ByVal broklerid As String, _
                                             ByVal modifiedUser As String) As Boolean


        Dim intpkiMemberid As Integer = 0
        blnPassed = False
        Try

            strSQL = "EXECUTE  [dbo].[AddUpdateClaimsProcessing] " & _
                     " @pkiClaimProcessingID ='" & pkiClaimProcessingID & "'," & _
                     " @pkiClaimID =" & pkiClaimID & "," & _
                     " @ClaimStatus ='" & claimStatus & "'," & _
                     " @ClaimNotes ='" & claimNotes & "'," & _
                     " @parlourid ='" & parlourid & "'," & _
                     " @Broklerid ='" & broklerid & "'," & _
                     " @ModifiedUser ='" & modifiedUser & "', " & _
                     " @AssignedTo ='" & AssignedTo & "' "

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateClaimsProcessing = blnPassed
        End Try
    End Function


    <WebMethod()> _
    Public Function AddUpdateMember(ByVal add As Boolean, _
                                    ByVal pkiAssociationMemberID As String, _
                                    ByVal Username As String, _
                                ByVal MemberType As String, _
                                ByVal Title As String, _
                                ByVal FullNames As String, _
                                ByVal Surname As String, _
                                ByVal Gender As String, _
                                ByVal ID_Number As String, _
                                ByVal Date_Of_Birth As Date, _
                                ByVal Telephone As String, _
                                ByVal Cellphone As String, _
                                ByVal Address1 As String, _
                                ByVal Address2 As String, _
                                ByVal Address3 As String, _
                                ByVal Address4 As String, _
                                ByVal Code As String, _
                                ByVal MemberNumber As String, _
                                ByVal Active As Boolean, _
                                ByVal InceptionDate As Date, _
                                ByVal MemberBranch As String, _
                                ByVal AssociationID As String) As Boolean


        Dim intpkiMemberid As Integer = 0
        blnPassed = False
        Try
            'If MemberExistFromMemberNumber(MemeberNumber, AssociationID) <> "" Then
            '    If WebConfigurationManager.AppSettings("GenerateMember") = "yes" Then
            '        MemeberNumber = GenerateMemberNo()
            '    Else
            '        blnPassed = False
            '        Exit Try
            '    End If
            'End If


            '      If MemberIDExistFromIDNumber(MemeberNumber, strUserName, pgp) = "" Then

            strSQL = "EXECUTE  [taxi].[AddUpdateMember] " & _
                     "  @Add =" & add & "," & _
                     " @pkiAssociationMemberID ='" & pkiAssociationMemberID.ToString() & "'," & _
                     " @CreateUser ='" & Username & "'," & _
                     " @MemberType ='" & MemberType & "'," & _
                     " @Title ='" & Title & "'," & _
                     " @Full_Names ='" & FullNames & "'," & _
                     " @Surname ='" & Surname & "'," & _
                     " @Gender ='" & Gender & "'," & _
                     " @ID_Number ='" & ID_Number & "'," & _
                     " @Date_Of_Birth ='" & Date_Of_Birth.ToString("yyyy-MM-dd") & "'," & _
                     " @Telephone ='" & Telephone & "'," & _
                     " @Cellphone ='" & Cellphone & "'," & _
                     " @Address1 ='" & Address1 & "'," & _
                     " @Address2 ='" & Address2 & "'," & _
                     " @Address3 ='" & Address3 & "'," & _
                     " @Address4 ='" & Address4 & "'," & _
                     " @Code ='" & Code & "'," & _
                     " @MemeberNumber ='" & MemberNumber & "'," & _
                     " @Active =" & Active & "," & _
                     " @InceptionDate ='" & InceptionDate.ToString("yyyy-MM-dd") & "'," & _
                     " @AssociationID ='" & AssociationID & "'," & _
                     " @MemberBranch ='" & MemberBranch & "'," & _
                     " @ModifiedUser ='" & Username & "'"

            blnPassed = DL.ExecInsertDatabase(strSQL)

            ''chech task in outlook
            'If blnPassed Then
            '    strSQL = "select pkiMemberID from Members where MemeberNumber = '" & MemeberNumber & "'"
            '    dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            '    If Not IsNothing(dsData) Then
            '        If dsData.Tables(0).Rows.Count > 0 Then
            '            intpkiMemberid = CInt(dsData.Tables(0).Rows(0).Item(0))
            '        End If
            '    End If

            '    Dim strPremium As Double = FormatCurrency(ReturnMemberPlanDetails(MemeberNumber).Tables(0).Rows(0).Item(1), 2)
            '    Dim strJoiningFee As Double = FormatCurrency(ReturnMemberPlanDetails(MemeberNumber).Tables(0).Rows(0).Item(7), 2)

            '    strSQL = "Insert Into MemberPaymentReminders (fkiMemberId,Notes,DateLastPaid,Premium) " & _
            '    "values (" & intpkiMemberid & ",'Joining Fee'," & Now.ToString("dd-MM-yyyy") & "," & strJoiningFee & ")"

            '    blnPassed = DL.ExecInsertDatabase(strSQL)

            '    strSQL = "Insert Into MemberPaymentReminders (fkiMemberId,Notes,DateLastPaid,Premium) " & _
            '   "values (" & intpkiMemberid & ",'Premium Due'," & Now.ToString("dd-MM-yyyy") & "," & strPremium & ")"

            '    blnPassed = DL.ExecInsertDatabase(strSQL)




            'End If
            ' End If
            ''AddAudit("InsertMember  MemberNumber=(" & MemeberNumber & ")")
        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateMember = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateMemberRoutePayments(ByVal add As Int32, _
                                ByVal pkiRoutePaymentID As String, _
                                ByVal fkiMemberID As String, _
                                ByVal AmountPaid As Double, _
                                ByVal Username As String, _
                                ByVal PaidBy As String, _
                                ByVal Notes As String, _
                                ByVal PaymentBranch As String, _
                                ByVal AssociationID As String, _
                                ByVal PaidUntil As Date) As Boolean

        Try
            blnPassed = False

            strSQL = "EXECUTE  [taxi].[AddUpdateMemberRoutePayments] " & _
                       " @Add =" & add & "," & _
                       " @pkiRoutePaymentID ='" & pkiRoutePaymentID & "'," & _
                       " @fkiMemberID ='" & fkiMemberID & "'," & _
                       " @AmountPaid =" & AmountPaid & "," & _
                       " @RecievedBy ='" & Username & "'," & _
                       " @PaidBy ='" & PaidBy & "'," & _
                       " @Notes ='" & Notes & "'," & _
                       " @AssociationID ='" & AssociationID & "'," & _
                       " @PaymentBranch ='" & PaymentBranch & "'," & _
                       " @ModifiedUser ='" & Username & "'," & _
                       " @PaidUntil ='" & PaidUntil.ToString("yyyy-MM-dd") & "'"

            blnPassed = DL.ExecInsertDatabase(strSQL)



        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateMemberRoutePayments = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateMemberVehicles(ByVal add As Int32, _
                                ByVal pkiVehicleID As String, _
                                ByVal fkiMemberID As String, _
                                ByVal Username As String, _
                                ByVal RouteID As String, _
                                ByVal VehicleRegNo As String, _
                                ByVal VehiclMake As String, _
                                ByVal VehiclModel As String, _
                                ByVal VehiclModelYear As String, _
                                ByVal VehiclDesc As String, _
                                ByVal AssociationID As String) As Boolean

        Try
            blnPassed = False
            strSQL = "EXECUTE  [taxi].[AddUpdateMemberVehicles] " & _
                  "  @Add =" & add & "," & _
                  " @pkiVehicleID ='" & pkiVehicleID & "'," & _
                  " @CreateUser ='" & Username & "'," & _
                  " @fkiMemberID ='" & fkiMemberID & "'," & _
                  " @RouteID ='" & RouteID & "'," & _
                  " @VehicleRegNo ='" & VehicleRegNo & "'," & _
                  " @VehiclMake ='" & VehiclMake & "'," & _
                  " @VehiclModel ='" & VehiclModel & "'," & _
                  " @VehiclModelYear ='" & VehiclModelYear & "'," & _
                  " @VehiclDesc ='" & VehiclDesc & "'," & _
                  " @AssociationID ='" & AssociationID & "'," & _
                  " @ModifiedUser ='" & Username & "'"


            blnPassed = DL.ExecInsertDatabase(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateMemberVehicles = blnPassed
        End Try
    End Function


    <WebMethod()> _
   Public Function AddAdditionalMemberInfo(ByVal add As Int16, _
                               ByVal pkiAdditionalMemberInfo As String, _
                               ByVal fkiMemberID As Int32, _
                               ByVal IDNumberVerified As Boolean, _
                               ByVal AccountNumberVerified As Boolean, _
                               ByVal BrokerID As String, _
                               ByVal BrokerPlanID As String, _
                               ByVal RefNumber As String, _
                               ByVal EasyPayNo As String, _
                               ByVal ModifiedUser As String) As Boolean


        Try
            blnPassed = False
            strSQL = "EXECUTE [dbo].[AddAdditionalMemberInfo] " & _
                  "  @Add =" & add & "," & _
                  " @pkiAdditionalMemberInfo ='" & pkiAdditionalMemberInfo & "'," & _
                  " @fkiMemberID =" & fkiMemberID & "," & _
                  " @IDNumberVerified =" & IDNumberVerified & "," & _
                  " @AccountNumberVerified =" & AccountNumberVerified & "," & _
                  " @BrokerID ='" & BrokerID & "'," & _
                  " @BrokerPlanID ='" & BrokerPlanID & "'," & _
                  " @RefNumber ='" & RefNumber & "'," & _
                  " @EasyPayNo ='" & EasyPayNo & "'," & _
                  " @ModifiedUser ='" & ModifiedUser & "' "



            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddAdditionalMemberInfo = blnPassed
        End Try
    End Function



    <WebMethod()> _
Public Function AddUpdateConsumableOrders(ByVal add As Int16, _
                            ByVal OrderID As String, _
                            ByVal SMSQyt As String, _
                            ByVal LabelQty As String, _
                            ByVal OrderDesc As String, _
                            ByVal OrderStatus As String, _
                            ByVal UserID As String, _
                            ByVal Parlourid As String) As Boolean


        Try
            blnPassed = False
            strSQL = "EXECUTE [dbo].[AddUpdateConsumableOrders] " & _
                  " @add =" & add & "," & _
                  " @UserID ='" & UserID & "'," & _
                  " @OrderID ='" & OrderID & "'," & _
                  " @SMSQyt ='" & SMSQyt & "'," & _
                  " @LabelQty ='" & LabelQty & "'," & _
                  " @OrderDesc ='" & OrderDesc & "'," & _
                  " @OrderStatus ='" & OrderStatus & "'," & _
                  " @Parlourid ='" & Parlourid & "'," & _
                  " @ModifiedUser ='" & UserID & "'"


            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateConsumableOrders = blnPassed
        End Try
    End Function

    <WebMethod()> _
 Public Function ReturnMemberAdditionalInfo(ByVal fkiMemberID As Integer) As DataTable
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [dbo].[ReturnAdditionalMemberInfo] " & _
                  "  @fkiMemberID =" & fkiMemberID

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberAdditionalInfo = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function ReturnAdditionalApplicationSettings(ByVal pgParlourID As String) As DataTable
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [dbo].[SelectAdditionalApplicationSettings] " & _
                  "  @pkiParlourid ='" & pgParlourID & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnAdditionalApplicationSettings = dtData
        End Try
    End Function

    <WebMethod()> _
 Public Function ReturnConsumableOrders(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [dbo].[SearchConsumableOrders] " & _
                  "  @Parlourid ='" & pgParlourID & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnConsumableOrders = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function ReturnHelpDesk(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [dbo].[SearchHelpDesk] " & _
                  "  @Parlourid ='" & pgParlourID & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnHelpDesk = dtData
        End Try
    End Function

    <WebMethod()> _
  Public Function UpdateDebitOrders(ByVal strMemberID As String, _
                                    ByVal strReason As String, _
                              ByVal dblAmountPaid As Double, _
                              ByVal strUsername As String, _
                              ByVal pgParlourID As String) As Boolean


        Try
            blnPassed = False
            strSQL = "EXECUTE [dbo].[UpdateDebitOrders] " & _
                  " @MemberID ='" & strMemberID & "'," & _
                  " @Reason ='" & strReason & "'," & _
                  " @AmountPaid =" & dblAmountPaid & "," & _
                  " @parlourid ='" & pgParlourID & "'"


            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            UpdateDebitOrders = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateRoute(ByVal add As Int16, _
                                ByVal pkiRouteID As String, _
                                ByVal RouteName As String, _
                                ByVal RouteCost As Double, _
                                ByVal Username As String, _
                                ByVal AssociationID As String) As Boolean


        Try
            blnPassed = False
            strSQL = "EXECUTE [taxi].[AddUpdateRoute] " & _
                  "  @Add =" & add & "," & _
                  " @pkiRouteID ='" & pkiRouteID & "'," & _
                  " @RouteName ='" & RouteName & "'," & _
                  " @RouteCost =" & RouteCost & "," & _
                  " @AssociationID ='" & AssociationID & "'," & _
                  " @ModifiedUser ='" & Username & "'"


            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateRoute = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function SelectRoute(ByVal AssociationID As String) As DataTable
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [taxi].[SearchRoutes] " & _
                  "  @AssociationID ='" & AssociationID & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            SelectRoute = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function AddUpdateNetcashLogindetails(ByVal spUPuser As String, _
                                        ByVal spUPpass As String, _
                                        ByVal spUPpinpad As String, _
                                        ByVal spValuser As String, _
                                        ByVal spValpass As String, _
                                        ByVal spValpinpad As String, _
                                        ByVal spCCuser As String, _
                                        ByVal spCCpass As String, _
                                        ByVal spCCpinpad As String, _
                                        ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "EXECUTE [dbo].[AddUpdateAdditionalApplicationSettings] " & _
                  "  @pkiParlourid ='" & pgParlourID & "', " & _
                  "  @spUPuser ='" & spUPuser & "', " & _
                  "  @spUPpass ='" & spUPpass & "', " & _
                  "  @spUPpinpad ='" & spUPpinpad & "', " & _
                  "  @spValuser ='" & spValuser & "', " & _
                  "  @spValpass ='" & spValpass & "', " & _
                  "  @spValpinpad ='" & spValpinpad & "', " & _
                  "  @spCCuser ='" & spCCuser & "', " & _
                  "  @spCCpass ='" & spCCpass & "', " & _
                  "  @spCCpinpad ='" & spCCpinpad & "' "

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateNetcashLogindetails = blnPassed
        End Try
    End Function


    <WebMethod()> _
    Public Function SearchAssociationMember(ByVal AssociationID As String, _
                                            ByVal FullNames As String, _
                                            ByVal Surname As String, _
                                            ByVal ID_Number As String, _
                                            ByVal MemeberNumber As String) As DataTable
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [taxi].[SearchMember] " & _
                  "  @AssociationID ='" & AssociationID & "', " & _
                  "  @Full_Names ='" & FullNames & "', " & _
                  "  @Surname ='" & Surname & "', " & _
                  "  @ID_Number ='" & ID_Number & "', " & _
                  "  @MemeberNumber ='" & AssociationID & "'  "

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            SearchAssociationMember = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function SearchMemberVehicles(ByVal fkiMemberID As String) As DataTable
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [taxi].[SearchMemberVehicles] " & _
                  " @fkiMemberID ='" & fkiMemberID & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            SearchMemberVehicles = dtData
        End Try
    End Function

    <WebMethod()> _
  Public Function SelectAssociationMember(ByVal pkiAssociationMemberID As String) As DataSet
        Try
            dtData = New DataTable
            strSQL = "EXECUTE [taxi].[SelectAssociationMember] " & _
                  "  @pkiAssociationMemberID ='" & pkiAssociationMemberID & "'  "

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            SelectAssociationMember = dsData
        End Try

    End Function

    <WebMethod()> _
 Public Function uploadMygateDebitOrder(ByVal s_FileContents As String) As String
        Dim s_Return As String = "Upload Failed"

        Try
            s_Return = clsWSMyGate.uploadDebitFile(s_FileContents)

        Catch ex As Exception
            Throw ex
        Finally
            uploadMygateDebitOrder = s_Return
        End Try

    End Function

    <WebMethod()> _
  Public Function uploadDebitOrder(ByVal s_FileContents As String) As String
        Dim s_Return As String = "Upload Failed"

        Try
            s_Return = clsWSNetcash.UploadBatchFile(Decrypt(ConfigurationManager.AppSettings("spUPuser")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpass")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpinpad")), _
                                                    s_FileContents)

        Catch ex As Exception
            Throw ex
        Finally
            uploadDebitOrder = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function uploadDebitOrderNC(ByVal s_FileContents As String, ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim s_Return As String = "Upload Failed"
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)

        Try
            s_Return = clsWSNetcash.UploadBatchFile(Decrypt(dtUserData.Rows(0).Item("spUPuser")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpass")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpinpad")), _
                                                    s_FileContents)

        Catch ex As Exception
            Throw ex
        Finally
            uploadDebitOrderNC = s_Return
        End Try

    End Function


    <WebMethod()> _
  Public Function vefiryAccountAccountNumber(ByVal strServiceToken As String, _
                                             ByVal strBranchNumber As String, _
                                             ByVal strAccountNumber As String, _
                                             ByVal strAccoutType As String, _
                                             ByVal strIDnumber As String, _
                                             ByVal strEnquiryName As String, _
                                             ByVal blnReqPostback As Boolean, _
                                             ByVal strPostBackURL As String, _
                                             ByVal strVerificationType As String, _
                                             ByVal blnTransactionType As Boolean, _
                                             ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim s_Return As String = "Account Number Valid"
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)

        Try
            s_Return = clsCreditCheck.AccountVerification(Decrypt(dtUserData.Rows(0).Item("spCCuser")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spCCpass")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spCCpinpad")), _
                                                    strServiceToken, strBranchNumber, strAccountNumber, _
                                                     strAccoutType, strIDnumber, strEnquiryName, blnReqPostback, _
                                                    strPostBackURL, strVerificationType, blnTransactionType)


        Catch ex As Exception
            Throw ex
        Finally
            vefiryAccountAccountNumber = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function downloadStatementNC(ByVal s_TransactionType As String, _
                                   ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim s_Return As String = "Download Failed"
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)

        Try
            s_Return = clsWSNetcash.Request_StatementByTransactionType(Decrypt(dtUserData.Rows(0).Item("spUPuser")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpass")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpinpad")), _
                                                    s_TransactionType)

        Catch ex As Exception
            Throw ex
        Finally
            downloadStatementNC = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function downloadStatement(ByVal s_TransactionType As String) As String
        Dim s_Return As String = "Download Failed"

        Try
            s_Return = clsWSNetcash.Request_StatementByTransactionType(Decrypt(ConfigurationManager.AppSettings("spUPuser")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpass")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpinpad")), _
                                                    s_TransactionType)

        Catch ex As Exception
            Throw ex
        Finally
            downloadStatement = s_Return
        End Try

    End Function

    <WebMethod()> _
    Public Function RequestDebitBatchUnauthorisedNC(ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim s_Return As String = "GetBatchList Failed"
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)

        Try
            s_Return = clsWSNetcash.Request_Debit_Batch_Unauthorized(Decrypt(dtUserData.Rows(0).Item("spUPuser")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpass")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpinpad")))

        Catch ex As Exception
            Throw ex
        Finally
            RequestDebitBatchUnauthorisedNC = s_Return
        End Try

    End Function

    <WebMethod()> _
   Public Function RequestDebitBatchUnauthorised() As String
        Dim s_Return As String = "GetBatchList Failed"

        Try
            s_Return = clsWSNetcash.Request_Debit_Batch_Unauthorized(Decrypt(ConfigurationManager.AppSettings("spUPuser")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpass")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpinpad")))

        Catch ex As Exception
            Throw ex
        Finally
            RequestDebitBatchUnauthorised = s_Return
        End Try

    End Function

    <WebMethod()> _
    Public Function GenerateDebitOrderFileNC(ByVal Cycle As String, _
                                           ByVal Instruction As String, _
                                           ByVal strAppName As String, _
                                           ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)
        Try

            strSQL = "Exec GenerateDebitorderFile '" & Cycle & "','" & strAppName & "','" & Instruction & "'," & _
                                                "'" & Decrypt(dtUserData.Rows(0).Item("spUPuser")) & "'," & _
                                                "'" & Decrypt(dtUserData.Rows(0).Item("spUPpass")) & "'," & _
                                                "'" & Decrypt(dtUserData.Rows(0).Item("spUPpinpad")) & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            GenerateDebitOrderFileNC = dsData
        End Try
    End Function

    <WebMethod()> _
 Public Function GenerateDebitOrderFile(ByVal Cycle As String, _
                                        ByVal Instruction As String, _
                                        ByVal strAppName As String) As DataSet

        Try

            strSQL = "Exec GenerateDebitorderFile '" & Cycle & "','" & strAppName & "','" & Instruction & "'," & _
                                                "'" & Decrypt(ConfigurationManager.AppSettings("spUPuser")) & "'," & _
                                                "'" & Decrypt(ConfigurationManager.AppSettings("spUPpass")) & "'," & _
                                                "'" & Decrypt(ConfigurationManager.AppSettings("spUPpinpad")) & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            GenerateDebitOrderFile = dsData
        End Try
    End Function

    <WebMethod()> _
Public Function GenerateMyGateDebitOrderFile(ByVal Cycle As String, _
                                       ByVal Instruction As String, _
                                       ByVal strAppName As String) As DataSet

        Try

            strSQL = "Exec [GenerateMyGateDebitorderFile] " & _
            "@Cycle='" & Cycle & "'," & _
            "@Instruction='" & Instruction & "'," & _
            "@parlourid='" & strAppName & "'"
        
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            dsData.Tables(0).TableName = "header"
            dsData.Tables(1).TableName = "transaction"
            dsData.Tables(2).TableName = "footer"

        Catch ex As Exception
            Throw ex
        Finally
            GenerateMyGateDebitOrderFile = dsData
        End Try
    End Function

    <WebMethod()> _
Public Function ReturnBanks() As DataTable

        Try

            strSQL = "Exec dbo.ReturnBanks "

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnBanks = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function ReturnInsuranceProcucts(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try

            strSQL = "Exec dbo.[ReturnInsuranceProducts] @ParlourID='" & pgParlourID & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If dsData.Tables.Count > 0 Then
                dtData = dsData.Tables(0)
            Else
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnInsuranceProcucts = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function downloadMerchantStatement(ByVal s_TransactionDate As Date) As String
        Dim s_Return As String = "Download Failed"

        Try
            s_Return = clsWSNetcash.Request_MerchantStatement(Decrypt(ConfigurationManager.AppSettings("spUPuser")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpass")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spUPpinpad")), _
                                                    FormatDateTime(s_TransactionDate, DateFormat.ShortDate))

        Catch ex As Exception
            Throw ex
        Finally
            downloadMerchantStatement = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function downloadMerchantStatementNC(ByVal s_TransactionDate As Date, _
                                            ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim s_Return As String = "Download Failed"
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)

        Try
            s_Return = clsWSNetcash.Request_MerchantStatement(Decrypt(dtUserData.Rows(0).Item("spUPuser")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpass")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spUPpinpad")), _
                                                    FormatDateTime(s_TransactionDate, DateFormat.ShortDate))

        Catch ex As Exception
            Throw ex
        Finally
            downloadMerchantStatementNC = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function validateIDNumberNC(ByVal strIDNumber As String, ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim s_Return As String = "Fail"
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)
        Try

            s_Return = wsValidate.CDVCheckIDNumber(Decrypt(dtUserData.Rows(0).Item("spValuser")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spValpass")), _
                                                    Decrypt(dtUserData.Rows(0).Item("spValpinpad")), _
                                                    strIDNumber)

        Catch ex As Exception
            Throw ex
        Finally
            validateIDNumberNC = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function validateIDNumber(ByVal strIDNumber As String) As String
        Dim s_Return As String = "Fail"
        Try

            s_Return = wsValidate.CDVCheckIDNumber(Decrypt(ConfigurationManager.AppSettings("spValuser")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spValpass")), _
                                                    Decrypt(ConfigurationManager.AppSettings("spValpinpad")), _
                                                    strIDNumber)

        Catch ex As Exception
            Throw ex
        Finally
            validateIDNumber = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function validateÄccountNumber(ByVal strAccountNo As String, _
                                      ByVal strBranchCode As String, _
                                      ByVal AccountType As String, _
                                      ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim s_Return As String = "Fail"
        Dim dtUserData As DataTable = ReturnAdditionalApplicationSettings(pgParlourID)

        Try

            s_Return = wsValidate.CDVValidateAccount(Decrypt(dtUserData.Rows(0).Item("spValuser")), _
                                                             Decrypt(dtUserData.Rows(0).Item("spValpass")), _
                                                             Decrypt(dtUserData.Rows(0).Item("spValpinpad")), _
                                                              strAccountNo, strBranchCode, AccountType)

        Catch ex As Exception
            Throw ex
        Finally
            validateÄccountNumber = s_Return
        End Try

    End Function

    <WebMethod()> _
Public Function verfyÄccountNumber(ByVal strAccountNo As String, _
                                  ByVal strBranchCode As String, _
                                  ByVal AccountType As String) As String
        Dim s_Return As String = "Fail"
        Try

            s_Return = wsValidate.CDVValidateAccount(Decrypt(ConfigurationManager.AppSettings("spValuser")), _
                                                             Decrypt(ConfigurationManager.AppSettings("spValpass")), _
                                                             Decrypt(ConfigurationManager.AppSettings("spValpinpad")), _
                                                              strAccountNo, strBranchCode, AccountType)

        Catch ex As Exception
            Throw ex
        Finally
            verfyÄccountNumber = s_Return
        End Try

    End Function


    <WebMethod()> _
    Private Function GenerateMemberNo(ByVal GenerateMember As String, ByVal MemberPrefix As String, _
                                      ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim memberNumber As String = ""
        Dim memberNo As Integer = 0

        Try
            If GenerateMember = "yes" Then
            Else
                Exit Try
            End If
            Dim prefix As String = MemberPrefix


            memberNo = ReturnKVNewMemberID(MemberPrefix, strUserName, pgParlourID)

            If CInt(memberNo) < 10 Then
                memberNumber = prefix & "000" & memberNo
            ElseIf CInt(memberNo) >= 10 Then
                memberNumber = prefix & "00" & memberNo
            ElseIf CInt(memberNo) >= 100 Then
                memberNumber = prefix & "0" & memberNo
            ElseIf CInt(memberNo) >= 1000 Then
                memberNumber = prefix & memberNo
            Else
                memberNumber = prefix & memberNo
            End If

        Catch ex As Exception
            Throw ex
        Finally
            GenerateMemberNo = memberNumber
        End Try
    End Function

    <WebMethod()> _
    Public Function InsertMemberNotes(ByVal pkiMemberID As Integer, _
                                   ByVal Notes As String, _
                                   ByVal strUserName As String, ByVal pgParlourID As String) As Boolean


        blnPassed = False
        Try

            strSQL = " INSERT INTO [MembersNotes] " & _
                        "([fkiMemberID] " & _
                        ",[Notes] " & _
                        ",[NoteDate],LastModified,ModifiedUser) " & _
                        "VALUES " & _
                        "(" & pkiMemberID & _
                        ",'" & DL.ReplaceDBString(Notes) & "' " & _
                        ",getdate(),getdate(),'" & strUserName & "')"
            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "InsertMemberNotes  Notes=(" & Notes & ")")

        Catch ex As Exception
            Throw ex
        Finally
            InsertMemberNotes = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function updateMemberPaymentReminder(ByVal strMemberNo As String, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim intpkiMemberid As Integer = 0
        Dim intDaysPassed As Integer = 0
        Dim i As Integer = 0
        Dim j As Integer = 0
        Dim dtPaymentReminderDate As Date = Now

        Try
            blnPassed = False

            strSQL = "select pkiMemberID from Members where InceptionDate < getdate() and MemeberNumber = '" & strMemberNo & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If Not IsNothing(dsData) Then
                If dsData.Tables(0).Rows.Count > 0 Then
                    intpkiMemberid = CInt(dsData.Tables(0).Rows(0).Item(0))
                End If
            End If

            strSQL = "SELECT max(MemberPaymentReminders.DateLastPaid) " & _
            "FROM MemberPaymentReminders where fkiMemberId = " & intpkiMemberid & _
            " GROUP BY fkiMemberId"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If Not IsNothing(dsData) Then
                If dsData.Tables(0).Rows.Count > 0 Then
                    dtPaymentReminderDate = CDate(dsData.Tables(0).Rows(0).Item(0))
                    intDaysPassed = DateDiff("d", dtPaymentReminderDate, Now)
                Else
                    Dim strPremium As Double = FormatCurrency(ReadMemberTotalPremium(strMemberNo, pgParlourID), 2)

                    strSQL = "Insert Into MemberPaymentReminders (fkiMemberId,Notes,DateLastPaid,Premium) " & _
                    "values (" & intpkiMemberid & ",'Premium Due',getdate()," & strPremium & ")"

                    blnPassed = DL.ExecInsertDatabase(strSQL)
                    Exit Try
                End If

            End If

            If intDaysPassed > 30 Then
                j = (intDaysPassed / 30) - 1
                Dim strPremium As Double = FormatCurrency(ReadMemberTotalPremium(strMemberNo, pgParlourID), 2)

                For i = 0 To j
                    dtPaymentReminderDate = DateAdd("d", 30, dtPaymentReminderDate)
                    strSQL = "Insert Into MemberPaymentReminders (fkiMemberId,Notes,DateLastPaid,Premium) " & _
                    "values (" & intpkiMemberid & ",'Premium Due'," & dtPaymentReminderDate.ToString("dd-MM-yyyy") & "," & strPremium & ")"

                    blnPassed = DL.ExecInsertDatabase(strSQL)
                Next
            End If


        Catch ex As Exception
            Throw ex
        Finally
            updateMemberPaymentReminder = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateUser(ByVal UserName As String, _
                                ByVal UserPassword As String, _
                                ByVal blnNewUser As Boolean, _
                                ByVal Surname As String, _
                                ByVal FullName As String, _
                                ByVal IDNumber As String, _
                                ByVal ContactNumber As String, _
                                ByVal Address1 As String, _
                                ByVal Address2 As String, _
                                ByVal Address3 As String, _
                                ByVal Address4 As String, _
                                ByVal UserID As Int32, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As Boolean

        Try

            blnPassed = False
            If blnNewUser Then
                strSQL = "Insert Into SecureUsers(username,[password],parlourid,EmployeeSurname," & _
                "EmployeeFullname,EmployeeIDNumber,EmployeeContactNumber,EmployeeAddress1," & _
                "EmployeeAddress2,EmployeeAddress3,EmployeeAddress4,LastModified,ModifiedUser) values " & _
                " ('" & UserName & "','" & UserPassword & "','" & pgParlourID.ToString & _
                "','" & Surname & "','" & FullName & "','" & IDNumber & "','" & ContactNumber & _
                "','" & Address1 & "','" & Address2 & "','" & Address3 & "','" & Address4 & "',getdate(),'" & strUserName & "')"

            Else
                strSQL = "Update SecureUsers Set username= '" & UserName & "'," & _
                "EmployeeSurname='" & Surname & "', " & _
                "EmployeeFullname='" & FullName & "', " & _
                "EmployeeIDNumber='" & IDNumber & "', " & _
                "EmployeeContactNumber='" & ContactNumber & "', " & _
                "EmployeeAddress1='" & Address1 & "', " & _
                "EmployeeAddress2='" & Address2 & "', " & _
                "EmployeeAddress3='" & Address3 & "', " & _
                "EmployeeAddress4='" & Address4 & "', " & _
                 " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "[password]='" & UserPassword & "' where pkiuserid=" & UserID

            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "AddUpdateUser  username=(" & UserName & ")")
        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateUser = blnPassed
        End Try
    End Function

    Public Function Encrypt(ByVal strText As String) As String
        Try
            Encrypt = SSL.Encrypt(strText, strkey)
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function Decrypt(ByVal strText As String) As String
        Try
            Decrypt = SSL.Decrypt(strText, strkey)
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateFuneral(ByVal iFuneralID As Int32, _
                                    ByVal Title As String, _
                                    ByVal FullName As String, _
                                    ByVal Surname As String, _
                                    ByVal ID_Number As String, _
                                    ByVal Gender As String, _
                                    ByVal DateOfBirth As Date, _
                                    ByVal DateOfDeath As Date, _
                                    ByVal DateOfFuneral As Date, _
                                    ByVal TimeOfFuneral As Date, _
                                    ByVal FuneralCemetery As String, _
                                    ByVal Address1 As String, _
                                    ByVal Address2 As String, _
                                    ByVal Address3 As String, _
                                    ByVal Address4 As String, _
                                    ByVal Code As String, _
                                    ByVal MemeberNumber As String, _
                                    ByVal ContactPerson As String, _
                                    ByVal ContactNumber As String, _
                                    ByVal BodyCollectedFrom As String, _
                                    ByVal CourseOfDearth As String, _
                                    ByVal Claimnumber As String, _
                                    ByVal BI1663 As String, _
                                    ByVal DriverAndCars As String, _
                                    ByVal GraveNo As String, _
                                    ByVal strUserName As String, ByVal pgParlourID As String) As Int32

        Dim pintFuneralID As Integer = -1

        Try
            blnPassed = False


            If iFuneralID = -1 Then
                strSQL = "Insert Into Funerals(Title,[Full Names], " & _
                "Surname ,Gender, [ID Number],DateOfBirth,DateOfDeath,DateOfFuneral, TimeOfFuneral, " & _
                "FuneralCemetery,Address1,Address2,Address3,Address4,Code,MemeberNumber,ContactPerson" & _
                ",ContactPersonNumber,BodyCollectedFrom,CourseOfDearth,Claimnumber,BI1663," & _
                "DriverAndCars,GraveNo,parlourid,LastModified,ModifiedUser)" & _
                " values('" & Title & "','" & FullName & "','" & Surname & "','" & _
                Gender & "', '" & ID_Number & "','" & DateOfBirth.ToString("yyyy-MM-dd") & "','" & _
                DateOfDeath.ToString("yyyy-MM-dd") & "','" & _
                DateOfFuneral.ToString("yyyy-MM-dd") & "','" & Now.ToString("yyyy-MM-dd") & " " & _
                TimeOfFuneral.ToString("HH:MM") & "','" & FuneralCemetery & "','" & Address1 & _
                "','" & Address2 & "','" & Address3 & "','" & Address4 & "','" & _
                Code & "','" & MemeberNumber & "','" & ContactPerson & "','" & _
                ContactNumber & "','" & BodyCollectedFrom & "','" & _
                CourseOfDearth & "','" & Claimnumber & "','" & BI1663 _
                & "','" & DriverAndCars & "','" & GraveNo & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"

            Else
                strSQL = "Update Funerals Set Title = '" & Title & "'," & _
                "[Full Names]='" & FullName & "', " & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "Surname  ='" & Surname & " '," & _
                "Gender= '" & Gender & "'," & _
                "[ID Number] ='" & ID_Number & "'," & _
                "DateOfBirth = '" & DateOfBirth.ToString("yyyy-MM-dd") & "'," & _
                "DateOfDeath = '" & DateOfDeath.ToString("yyyy-MM-dd") & "'," & _
                "DateOfFuneral = '" & DateOfFuneral.ToString("yyyy-MM-dd") & "', " & _
                "TimeOfFuneral ='" & Now.ToString("yyyy-MM-dd") & " " & TimeOfFuneral.ToString("HH:MM") & "'," & _
                "FuneralCemetery='" & FuneralCemetery & "'," & _
                "Address1 = '" & Address1 & "'," & _
                "Address2 = '" & Address2 & "'," & _
                "Address3 = '" & Address3 & "'," & _
                "Address4 = '" & Address4 & "'," & _
                "Code ='" & Code & "'," & _
                "MemeberNumber ='" & MemeberNumber & "' ," & _
                "ContactPerson ='" & ContactPerson & "' ," & _
                "ContactPersonNumber ='" & ContactNumber & "' ," & _
                "BodyCollectedFrom = '" & BodyCollectedFrom & "'," & _
                "CourseOfDearth ='" & CourseOfDearth & "'," & _
                "Claimnumber ='" & Claimnumber & "' ," & _
                "BI1663 = '" & BI1663 & "'," & _
                "DriverAndCars ='" & DriverAndCars & "'," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "GraveNo ='" & GraveNo & "' " & _
                "where pkiFuneralID = " & iFuneralID
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)

            If blnPassed Then
                If iFuneralID <> -1 Then
                    pintFuneralID = iFuneralID
                Else
                    strSQL = "select top 1 pkiFuneralID from Funerals " & _
                            "where [Full Names]='" & FullName & "' and " & _
                            " Surname  ='" & Surname & " ' and " & _
                            " Gender= '" & Gender & "' and " & _
                            " [ID Number] ='" & ID_Number & "' and " & _
                            " parlourid='" & pgParlourID.ToString() & "' " & _
                            "order by 1 desc "

                    dsData.Clear()
                    dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                    If IsNothing(dsData) Then
                        blnPassed = False
                        Exit Try
                    End If

                    If dsData.Tables(0).Rows.Count < 0 Then
                        blnPassed = False
                        Exit Try
                    End If

                    With dsData.Tables(0).Rows(0)
                        pintFuneralID = CInt(.Item(0))
                    End With

                End If
            Else
                Exit Try
            End If
            AddAudit(strUserName, pgParlourID, "AddUpdateFuneral  FuneralID=(" & pintFuneralID & ")")
        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateFuneral = pintFuneralID
        End Try

    End Function

    <WebMethod()> _
    Public Function ReturnFuneralIDFromClaimNo(ByVal Claimno As Int32, _
                                               ByVal strUserName As String, ByVal pgParlourID As String) As Int32
        Dim iFuneralID As Int32 = -1

        Try
            blnPassed = False


            strSQL = "select pkiFuneralID from Funerals where Claimnumber ='" & Claimno & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                blnPassed = False
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count = 0 Then
                blnPassed = False
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                iFuneralID = CInt(.Item(0))
            End With


        Catch ex As Exception
            Throw ex
        Finally
            ReturnFuneralIDFromClaimNo = iFuneralID
        End Try

    End Function

    <WebMethod()> _
    Public Function AddUpdateClaims(ByVal pkiClaimID As Int32, ByVal fkiMemberID As Int32, _
                                    ByVal MemberNumber As String, ByVal ClaimDate As Date, _
                                    ByVal ClaimNotes As String, ByVal CourseOfDearth As String, _
                                    ByVal HostingFuneral As Boolean, ByVal ClaimantTitle As String, _
                                    ByVal ClaimantFullname As String, ByVal ClaimantSurname As String, _
                                    ByVal ClaimantIDNumber As String, ByVal ClaimantDateOfBirth As Date, _
                                    ByVal ClaimantGender As String, ByVal ClaimantAddressLine1 As String, _
                                    ByVal ClaimantAddressLine2 As String, ByVal ClaimantAddressLine3 As String, _
                                    ByVal ClaimantAddressLine4 As String, ByVal ClaimantCode As String, _
                                    ByVal ClaimantContactNumber As String, ByVal BeneficiaryBank As String, _
                                    ByVal BeneficiaryAccountHolder As String, ByVal BeneficiaryAccountNumber As String, _
                                    ByVal BeneficiaryBankBranch As String, ByVal BeneficiaryBranchCode As String, _
                                    ByVal BeneficiaryAccountType As String, ByVal User As String, _
                                    ByVal Cover As Double, ByVal BodyCollectedFrom As String, ByVal ClaimingFor As String, _
                                    ByVal strUserName As String, ByVal pgParlourID As String) As Integer
        Dim pIntpkiClaimID As Integer = -1
        Dim host As Integer = 0

        Try
            blnPassed = False
            If Not SearchMemberIDByMemberNo(MemberNumber, strUserName, pgParlourID).Rows.Count > 0 Then
                Exit Try
            End If

            If HostingFuneral Then
                host = 1
            Else
                host = 0
            End If

            If pkiClaimID = -1 Then
                strSQL = "Insert Into Claims(fkiMemberID,MemberNumber, ClaimDate, ClaimNotes," & _
                "CourseOfDearth,HostingFuneral,ClaimantTitle,ClaimantFullname,ClaimantSurname," & _
                "ClaimantIDNumber,ClaimantDateOfBirth,ClaimantGender,ClaimantAddressLine1," & _
                "ClaimantAddressLine2,ClaimantAddressLine3,ClaimantAddressLine4,ClaimantCode," & _
                "ClaimantContactNumber,BeneficiaryBank,BeneficiaryAccountHolder," & _
                "BeneficiaryAccountNumber,BeneficiaryBankBranch,BeneficiaryBranchCode," & _
                "BeneficiaryAccountType,LoggedBy,Cover,BodyCollectedFrom,ClaimingFor,parlourid,LastModified,ModifiedUser) values(" & fkiMemberID & ",'" & MemberNumber & "','" & _
                ClaimDate.ToString("yyyy-MM-dd") & "','" & ClaimNotes & "','" & CourseOfDearth & "'," & _
                host & ",'" & ClaimantTitle & "','" & ClaimantFullname & "','" & _
                ClaimantSurname & "','" & ClaimantIDNumber & "','" & ClaimantDateOfBirth.ToString("yyyy-MM-dd") & "','" & _
                ClaimantGender & "','" & ClaimantAddressLine1 & "','" & ClaimantAddressLine2 & "','" & _
                ClaimantAddressLine3 & "','" & ClaimantAddressLine4 & "','" & ClaimantCode & "','" & _
                ClaimantContactNumber & "','" & BeneficiaryBank & "','" & BeneficiaryAccountHolder & "','" & _
                BeneficiaryAccountNumber & "','" & BeneficiaryBankBranch & "','" & _
                BeneficiaryBranchCode & "','" & BeneficiaryAccountType & "','" & User & "'," & Cover & _
                ",'" & BodyCollectedFrom & "','" & ClaimingFor & "' ,'" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"
            Else
                strSQL = "Update Claims Set " & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "fkiMemberID =" & fkiMemberID & "," & _
                "MemberNumber ='" & MemberNumber & "'," & _
                "ClaimDate ='" & ClaimDate.ToString("yyyy-MM-dd") & "'," & _
                "ClaimNotes ='" & ClaimNotes & "'," & _
                "CourseOfDearth ='" & CourseOfDearth & "'," & _
                "HostingFuneral =" & host & "," & _
                "ClaimantTitle ='" & ClaimantTitle & "'," & _
                "ClaimantFullname ='" & ClaimantFullname & "'," & _
                "ClaimantSurname ='" & ClaimantSurname & "'," & _
                "ClaimantIDNumber ='" & ClaimantIDNumber & "'," & _
                "ClaimantDateOfBirth ='" & ClaimantDateOfBirth.ToString("yyyy-MM-dd") & "'," & _
                "ClaimantGender ='" & ClaimantGender & "'," & _
                "ClaimantAddressLine1 ='" & ClaimantAddressLine1 & "'," & _
                "ClaimantAddressLine2 ='" & ClaimantAddressLine2 & "'," & _
                "ClaimantAddressLine3 ='" & ClaimantAddressLine3 & "'," & _
                "ClaimantAddressLine4 ='" & ClaimantAddressLine4 & "'," & _
                "ClaimantCode ='" & ClaimantCode & "'," & _
                "ClaimantContactNumber ='" & ClaimantContactNumber & "'," & _
                "BeneficiaryBank ='" & BeneficiaryBank & "'," & _
                "BeneficiaryAccountHolder ='" & BeneficiaryAccountHolder & " '," & _
                "BeneficiaryAccountNumber ='" & BeneficiaryAccountNumber & "'," & _
                "BeneficiaryBankBranch ='" & BeneficiaryBankBranch & "'," & _
                "BeneficiaryBranchCode ='" & BeneficiaryBranchCode & "'," & _
                "BeneficiaryAccountType ='" & BeneficiaryAccountType & "'," & _
                "LoggedBy ='" & User & "'," & _
                "Cover =" & Cover & "," & _
                "BodyCollectedFrom ='" & BodyCollectedFrom & "'," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "ClaimingFor ='" & ClaimingFor & "' " & _
                "where pkiClaimID = " & pkiClaimID
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)



            If blnPassed Then
                If pkiClaimID <> -1 Then
                    pIntpkiClaimID = pkiClaimID
                Else
                    strSQL = "select top 1 pkiClaimID from Claims where MemberNumber='" & MemberNumber & "' order by 1 desc "

                    dsData.Clear()
                    dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                    If IsNothing(dsData) Then
                        blnPassed = False
                        Exit Try
                    End If

                    If dsData.Tables(0).Rows.Count < 0 Then
                        blnPassed = False
                        Exit Try
                    End If

                    With dsData.Tables(0).Rows(0)
                        pIntpkiClaimID = CInt(.Item(0))
                    End With

                End If
            Else
                Exit Try
            End If
            AddAudit(strUserName, pgParlourID, "AddUpdateClaims  pkiClaimID=(" & pIntpkiClaimID & ")")
        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateClaims = pIntpkiClaimID
        End Try

    End Function


    <WebMethod()> _
    Public Function AddUpdateQuotation(ByVal iQuotationID As Int32, _
                                    ByVal Title As String, _
                                    ByVal FullName As String, _
                                    ByVal Surname As String, _
                                    ByVal Tel As String, _
                                    ByVal Cell As String, _
                                    ByVal Address1 As String, _
                                    ByVal Address2 As String, _
                                    ByVal Address3 As String, _
                                    ByVal Address4 As String, _
                                    ByVal Code As String, _
                                    ByVal DateOfQuotation As DateTime, _
                                    ByVal strUserName As String, ByVal pgParlourID As String) As Integer
        Dim pintQuotationID As Integer = -1

        Try
            blnPassed = False


            If iQuotationID = -1 Then
                strSQL = "Insert Into Quotations(ContactTitle,ContactFirstName, " & _
                "ContactLastName ,TelNumber,CellNumber,AddressLine1,AddressLine2, " & _
                "AddressLine3,AddressLine4,Code,DateOfQuotation,parlourid,LastModified,ModifiedUser)" & _
                " values('" & Title & "','" & FullName & "','" & Surname & "','" & _
                Tel & "', '" & Cell & "','" & _
                Address1 & "','" & Address2 & "','" & Address3 & "','" & Address4 & "','" & _
                Code & "'," & DateOfQuotation.ToString("dd-MM-yyyy") & ",'" & _
                pgParlourID.ToString & "',getdate(),'" & strUserName & "')"
            Else
                strSQL = "Update Quotations Set ContactTitle = '" & Title & "'," & _
                "ContactFirstName ='" & FullName & "', " & _
                "ContactLastName  ='" & Surname & " '," & _
                "TelNumber ='" & Tel & "'," & _
                "CellNumber = '" & Cell & "'," & _
                 " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "AddressLine1 = '" & Address1 & "'," & _
                "AddressLine2 = '" & Address2 & "'," & _
                "AddressLine3 = '" & Address3 & "'," & _
                "AddressLine4 = '" & Address4 & "'," & _
                "Code ='" & Code & "'," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "DateOfQuotation='" & DateOfQuotation & "' " & _
                "where QuotationID = " & iQuotationID
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)

            If blnPassed Then
                If iQuotationID <> -1 Then
                    pintQuotationID = iQuotationID
                Else

                    strSQL = "select top 1 QuotationID from Quotations " & _
                            " where ContactFirstName ='" & FullName & "' and " & _
                            " ContactLastName  ='" & Surname & " ' and " & _
                            " TelNumber ='" & Tel & "' and " & _
                            " CellNumber = '" & Cell & "' and " & _
                            " AddressLine1 = '" & Address1 & "' and " & _
                            " AddressLine2 = '" & Address2 & "' and " & _
                            " AddressLine3 = '" & Address3 & "' and " & _
                            " AddressLine4 = '" & Address4 & "' and" & _
                            " Code ='" & Code & "' and " & _
                            " parlourid='" & pgParlourID.ToString() & "' " & _
                            " order by 1 desc "

                    dsData.Clear()
                    dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                    If IsNothing(dsData) Then
                        blnPassed = False
                        Exit Try
                    End If

                    If dsData.Tables(0).Rows.Count < 0 Then
                        blnPassed = False
                        Exit Try
                    End If

                    With dsData.Tables(0).Rows(0)
                        pintQuotationID = CInt(.Item(0))
                    End With

                End If
            Else
                Exit Try
            End If
            AddAudit(strUserName, pgParlourID, "AddUpdateQuotation   QuotationID=(" & pintQuotationID & ")")
        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateQuotation = pintQuotationID
        End Try

    End Function

    <WebMethod()> _
    Public Function UpdateMember(ByVal piPkiMemberID As Integer, _
                                 ByVal Title As String, _
                                ByVal FullNames As String, _
                                ByVal Surname As String, _
                                ByVal Gender As String, _
                                ByVal ID_Number As String, _
                                ByVal Date_Of_Birth As Date, _
                                ByVal Telephone As String, _
                                ByVal Cellphone As String, _
                                ByVal Address1 As String, _
                                ByVal Address2 As String, _
                                ByVal Address3 As String, _
                                ByVal Address4 As String, _
                                ByVal Code As String, _
                                ByVal MemberSociety As String, _
                                ByVal Plan As String, _
                                ByVal MemberNo As String, _
                                ByVal InceptionDate As Date, _
                                ByVal Active As Boolean, _
                                ByVal Agent As String, _
                                ByVal AccountHolder As String, _
                                ByVal bank As String, _
                                ByVal strBranchCode As String, _
                                ByVal Branch As String, _
                                ByVal AccountNumber As String, _
                                ByVal AccountType As String, _
                                ByVal DebitDate As String, _
                                ByVal CoverDate As Date, _
                                ByVal MemberBranch As String, _
                                ByVal strUserName As String, ByVal pgParlourID As String, _
                                ByVal PolicyStatus As String) As Boolean


        Try
            Dim iPlanID As Int32 = ReturnPlanIDByPlanName(Plan, strUserName, pgParlourID)
            Dim blnActive As Int32 = 0
            If Active Then blnActive = 1


            blnPassed = False
            strSQL = "Update Members " & _
            "Set Title= '" & Title & "', " & _
            "[Full Names] = '" & FullNames & "', " & _
            "Surname = '" & Surname & "', " & _
            "Gender='" & Gender & "', " & _
            "[ID Number] ='" & ID_Number & "', " & _
            "[Date Of Birth] ='" & Date_Of_Birth.ToString("yyyy-MM-dd") & "', " & _
            "[CoverDate] ='" & CoverDate.ToString("yyyy-MM-dd") & "', " & _
            "Telephone = '" & Telephone & "', " & _
            "Cellphone = '" & Cellphone & "', " & _
            "Address1 = '" & Address1 & "', " & _
            "Address2 = '" & Address2 & "', " & _
            "Address3 = '" & Address3 & "', " & _
            "Address4 = '" & Address4 & "', " & _
            " LastModified =getdate()," & _
            " ModifiedUser ='" & strUserName & "'," & _
           "Code = '" & Code & "', " & _
            "InceptionDate = '" & InceptionDate.ToString("yyyy-MM-dd") & "', " & _
            "Active = " & blnActive & "," & _
            "MemberSociety='" & MemberSociety & "'," & _
            "fkiPlanID= " & iPlanID & "," & _
            "parlourid='" & pgParlourID.ToString() & "', " & _
            "MemeberNumber= '" & MemberNo & "', " & _
            "Agent = '" & Agent & "', " & _
            "AccountHolder = '" & AccountHolder & "', " & _
            "Bank = '" & bank & "', " & _
            "MemberBranch = '" & MemberBranch & "', " & _
            "PolicyStatus = '" & PolicyStatus & "', " & _
            "Branch = '" & Branch & "', " & _
            "BranchCode = '" & strBranchCode & "', " & _
            "AccountNumber = '" & AccountNumber & "', " & _
            "AccountType = '" & AccountType & "', " & _
            "DebitDate = '" & DebitDate & "' " & _
           " Where pkiMemberID = " & piPkiMemberID
            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            UpdateMember = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnApplicationSettings(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            dtData = Nothing
            strSQL = " select ApplicationSettings.*,[ApplicationLogo] from ApplicationSettings,[AdditionalApplicationSettings]  " & _
                     "where parlourid=pkiParlourid and parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReturnApplicationSettings = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnApplicationEndDate(ByVal strUserName As String, ByVal pgParlourID As String) As DateTime
        Try
            blnPassed = False

            strSQL = "select EndDate from AppEndDate"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count < 0 Then
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                ReturnApplicationEndDate = .Item(0)
            End With

            blnPassed = True

        Catch ex As Exception
            Throw ex
        End Try
    End Function

    <WebMethod()> _
   Public Function LoadAddOnProducts(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            dtData = Nothing
            strSQL = "EXECUTE  [dbo].[SearchAddonProducts] @parlourid='" & pgParlourID & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadAddOnProducts = dtData

        End Try
    End Function

    <WebMethod()> _
 Public Function LoadMemberAddonProducts(ByVal intMemberID As Int64, ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            dtData = Nothing
            strSQL = "EXECUTE  [dbo].[SearchMemberAddonProducts] @parlourid='" & pgParlourID & "',@fkiMemberid=" & intMemberID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadMemberAddonProducts = dtData

        End Try
    End Function

    <WebMethod()> _
   Public Function SearchParlourClaims(ByVal parlourid As String, _
                                       ByVal ClaimStatus As String, _
                                       ByVal AssignedTo As String, _
                                       ByVal ClaimNo As Int32, _
                                       ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            dtData = Nothing
            strSQL = "Exec [dbo].[SearchParlourClaims] " & _
                    "@Parlourid='" & parlourid & "'," & _
                    "@ClaimStatus='" & ClaimStatus & "'," & _
                    "@AssignedTo='" & AssignedTo & "'," & _
                    "@Brokerid='" & pgParlourID.ToString & "'," & _
                    "@ClaimNo=" & ClaimNo


            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchParlourClaims = dtData

        End Try
    End Function

    <WebMethod()> _
    Public Function SearchClaims(ByVal MemberNumber As String, ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            dtData = Nothing
            strSQL = "select * from Claims where MemberNumber='" & MemberNumber & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchClaims = dtData

        End Try
    End Function

    <WebMethod()> _
    Public Function SetApplicationEndDate(ByVal dtDate As Date, _
                                          ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "update AppEndDate " & _
                    "Set EndDate ='" & dtDate & "'"

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            SetApplicationEndDate = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function SetApplicationSettings(ByVal strApplicationName As String, _
                                            ByVal strFSPNumber As String, _
                                            ByVal strOwnerFirstName As String, _
                                            ByVal strOwnerSurname As String, _
                                            ByVal strOwnerTelNumber As String, _
                                            ByVal strOwnerCellNumber As String, _
                                            ByVal strManagerFirstName As String, _
                                            ByVal strManageSurname As String, _
                                            ByVal strManageTelNumber As String, _
                                            ByVal strManageCellNumber As String, _
                                            ByVal strBusinessAddressLine1 As String, _
                                            ByVal strBusinessAddressLine2 As String, _
                                            ByVal strBusinessAddressLine3 As String, _
                                            ByVal strBusinessAddressLine4 As String, _
                                            ByVal strBusinessPostalCode As String, _
                                            ByVal LogoPath As String, _
                                            ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "update ApplicationSettings " & _
                    "Set ApplicationName='" & strApplicationName & "'," & _
                    "ApplicationLogoPath ='" & LogoPath & "'," & _
                    "OwnerFirstName ='" & strOwnerFirstName & "'," & _
                    "OwnerSurname ='" & strOwnerSurname & "'," & _
                    "OwnerTelNumber ='" & strOwnerTelNumber & "'," & _
                    "OwnerCellNumber ='" & strOwnerCellNumber & "'," & _
                    "ManagerFirstName ='" & strManagerFirstName & "'," & _
                    "ManageSurname ='" & strManageSurname & "'," & _
                    "ManageTelNumber ='" & strManageTelNumber & "'," & _
                    "ManageCellNumber ='" & strManageCellNumber & "'," & _
                    "BusinessAddressLine1 ='" & strBusinessAddressLine1 & "'," & _
                    "BusinessAddressLine2 ='" & strBusinessAddressLine2 & "'," & _
                    "BusinessAddressLine3 ='" & strBusinessAddressLine3 & "'," & _
                    "BusinessAddressLine4 ='" & strBusinessAddressLine4 & "'," & _
                    "FSBNumber ='" & strFSPNumber & "'," & _
                    "BusinessPostalCode ='" & strBusinessPostalCode & "' " & _
                    "where parlourid='" & pgParlourID.ToString() & "' "


            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            SetApplicationSettings = blnPassed
        End Try
    End Function


    <WebMethod()> _
    Public Function SetApplicationLogoPath(ByVal strApplicationName As String, _
                                           ByVal LogoPath As String, _
                                           ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "update ApplicationSettings " & _
                    "Set ApplicationLogoPath ='" & LogoPath & "' and parlourid='" & pgParlourID.ToString() & "' "

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            SetApplicationLogoPath = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnSecurityGroupID(ByVal strSecurityGroup As String, ByVal strUserName As String, ByVal pgParlourID As String) As Integer
        Try
            strSQL = "select pkiSecureGroupID from SecureGroup where sSecureGroupName='" & strSecurityGroup & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count < 0 Then
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                ReturnSecurityGroupID = CInt(.Item(0))
            End With

        Catch ex As Exception
            Throw ex
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnNewMemberID(ByVal MemberPrefix As String, ByVal strUserName As String, ByVal pgParlourID As String) As Integer
        Try
            strSQL = "SELECT top 1 pkimemberid FROM members order by 1 desc"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                ReturnNewMemberID = 1
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count = 0 Then
                ReturnNewMemberID = 1
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                ReturnNewMemberID = CInt(.Item(0)) + 1
            End With

        Catch ex As Exception
            Throw ex
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnKVNewMemberID(ByVal MemberPrefix As String, ByVal strUserName As String, ByVal pgParlourID As String) As Integer
        Try
            strSQL = "select coalesce(MAX( cast( REPLACE (MemeberNumber,'" & _
            MemberPrefix & "','') as numeric(18))) ,0) from  Members where parlourid ='" & pgParlourID & "'"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                ReturnKVNewMemberID = 1
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count = 0 Then
                ReturnKVNewMemberID = 1
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                ReturnKVNewMemberID = CInt(.Item(0)) + 1
            End With

        Catch ex As Exception
            Throw ex
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnAmountPaidPerFuneralID(ByVal iFuneralID As Int32, _
                                                 ByVal strUserName As String, ByVal pgParlourID As String) As Double
        Dim dblAmount As Double = 0
        Try
            strSQL = "SELECT Sum(FuneralPayments.AmountPaid) AS TotalPaid " & _
            "FROM FuneralPayments WHERE (FuneralPayments.FuneralID =" & iFuneralID & ") " & _
            "GROUP BY FuneralPayments.FuneralID"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count <= 0 Then
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                dblAmount = CDbl(.Item(0))
            End With

        Catch ex As Exception
            Throw ex
        Finally
            ReturnAmountPaidPerFuneralID = dblAmount
        End Try

    End Function

    <WebMethod()> _
    Public Function SearchForMembers(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            DL = New Unplugged.myTools(strConn, True)

            strSQL = "Select top 30 * from Members where MemberType = 'Main' and active = 1 and parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchForMembers = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnSMSMembers(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            DL = New Unplugged.myTools(strConn, True)

            strSQL = "Select Cellphone from Members where MemberType = 'Main' and active = 1 and Cellphone<>'' and Cellphone is not null and parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnSMSMembers = dtData
        End Try
    End Function

    <WebMethod()> _
  Public Function SendAllMembersSMS(ByVal smstextdata As String, ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            strSQL = "Exec dbo.[SendAllMembers] @SendText='" & smstextdata & "'  , @Parlourid= '" & pgParlourID.ToString() & "' "
            blnPassed = DL.ExecInsertDatabase(strSQL)
        Catch ex As Exception
            Throw ex
        Finally
            SendAllMembersSMS = blnPassed
        End Try
    End Function

    <WebMethod()> _
 Public Function SendSMS(ByVal smstextdata As String, _
                         ByVal smsUsername As String, _
                         ByVal smsNumber As String, _
                         ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            strSQL = "Exec dbo.[SendSMS] @ToNumber='" & smsNumber & "',@UserID='" & smsUsername & "',@Data='" & smstextdata & "'  , @parlourid= '" & pgParlourID.ToString() & "' "
            blnPassed = DL.ExecInsertDatabase(strSQL)
        Catch ex As Exception
            Throw ex
        Finally
            SendSMS = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function SearchByMemberNo(ByVal MemeberNumber As String, _
                               ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            blnPassed = False
            strSQL = "Select * from Members where MemberType = 'Main' and MemeberNumber = '" & MemeberNumber & "' and parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchByMemberNo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function SearchAllTestMember(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            blnPassed = False
            strSQL = "Select * from Members where MemberType = 'Main' and active =1 and parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchAllTestMember = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnAllMembers(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            dtData = Nothing
            strSQL = "Select * from Members where MemberType = 'Main' and active =1 and parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnAllMembers = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnAllMemberNotes(ByVal fkiMemberID As Integer, _
                                         ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            dtData = Nothing
            strSQL = "SELECT [pkiNoteID] " & _
                        ",[fkiMemberID] " & _
                        ",[Notes] " & _
                        ",[NoteDate] " & _
                        "FROM [MembersNotes] " & _
                        "where [fkiMemberID]= " & fkiMemberID & _
                        " Order by [NoteDate] desc "


            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnAllMemberNotes = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnAllActiveMembers(ByVal strUserName As String, ByVal pgParlourID As String) As DataSet

        Try
            blnPassed = False
            strSQL = "Select * from Members where MemberType = 'Main' and InceptionDate < getdate() and active =1 and parlourid='" & pgParlourID.ToString() & "' "
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnAllActiveMembers = dsData
        End Try
    End Function


    <WebMethod()> _
    Public Function SearchMemberIDByMemberNo(ByVal MemeberNumber As String, _
                                             ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            blnPassed = False
            strSQL = "Select pkiMemberID from Members where MemberType = 'Main' and MemeberNumber = '" & MemeberNumber & "' and parlourid='" & pgParlourID.ToString() & "' "

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)



        Catch ex As Exception
            Throw ex
        Finally
            SearchMemberIDByMemberNo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnAllUsers(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            blnPassed = False
            strSQL = "Select * from SecureUsers where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnAllUsers = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function SearchLookupByFields(ByVal MemberType As String, _
                               ByVal Title As String, _
                               ByVal FullNames As String, _
                               ByVal Surname As String, _
                               ByVal Gender As String, _
                               ByVal ID_Number As String, _
                               ByVal Date_Of_Birth As Date, _
                               ByVal Telephone As String, _
                               ByVal Cellphone As String, _
                               ByVal Address1 As String, _
                               ByVal Address2 As String, _
                               ByVal Address3 As String, _
                               ByVal Address4 As String, _
                               ByVal Code As String, _
                               ByVal MemeberNumber As String, _
                               ByVal MemberSociety As String, _
                               ByVal Plan As String, _
                               ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            Dim iPlanID As Int32 = ReturnPlanIDByPlanName(Plan, strUserName, pgParlourID)
            dtData = Nothing
            strSQL = ""


            If Title <> "" Then
                strSQL = strSQL & " union Select * from Members where MemberType = 'Main' and MemberSociety like '%" & Title & "%' and parlourid='" & pgParlourID.ToString() & "' " '& _

            End If

            If Surname <> "" Then
                strSQL = strSQL & " union Select * from Members where MemberType = 'Main' and Surname like '%" & Surname & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If


            If ID_Number <> "" Then
                strSQL = strSQL & " union Select * from Members where MemberType = 'Main' and [ID Number] like '%" & ID_Number & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If

            If MemeberNumber <> "" Then
                strSQL = strSQL & " union Select * from Members where MemberType = 'Main' and MemeberNumber like '%" & MemeberNumber & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If

            strSQL = strSQL.Remove(0, 6)
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchLookupByFields = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function SearchByFields(ByVal MemberType As String, _
                                ByVal Title As String, _
                                ByVal FullNames As String, _
                                ByVal Surname As String, _
                                ByVal Gender As String, _
                                ByVal ID_Number As String, _
                                ByVal Date_Of_Birth As Date, _
                                ByVal Telephone As String, _
                                ByVal Cellphone As String, _
                                ByVal Address1 As String, _
                                ByVal Address2 As String, _
                                ByVal Address3 As String, _
                                ByVal Address4 As String, _
                                ByVal Code As String, _
                                ByVal MemeberNumber As String, _
                                ByVal MemberSociety As String, _
                                ByVal Plan As String, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            Dim iPlanID As Int32 = ReturnPlanIDByPlanName(Plan, strUserName, pgParlourID)

            strSQL = ""


            If FullNames <> "" Then
                strSQL = strSQL & " union Select * from Members where (MemberType = 'Main' and [Full Names] like '%" & FullNames & "%') and parlourid='" & pgParlourID.ToString() & "' " '& _

                'strSQL = strSQL & " union SELECT TOP 10 U.PkiUserID [pkiMemberID]      ,U.LastModified [CreateDate]  ,'Main' [MemberType]      ,''[Title] ,U.EmployeeFullname [Full Names]   ,U.EmployeeSurname [Surname]      ,''[Gender]   ,U.EmployeeIDNumber [ID Number]  ,'01 Jan 1900' [Date Of Birth] ,'' [Telephone]      ,'' [Cellphone]      ,'' [Address1] " & _
                '    "      ,'' [Address2]      ,'' [Address3]      ,'' [Address4] ,'' [Code]      ,U.EmployeeFullname + ' ' +U.EmployeeSurname   [MemeberNumber]  ,'' [MemberSociety]     ,1 [fkiPlanID]      ,1 [Active]      ,'01 Jan 1900' [InceptionDate]     ,'' [Claimnumber]      ,'' [PolicyStatus]      ,[parlourid]  ,''[Agent]      ,''[AccountHolder] ,''[Bank]  ,''[BranchCode] " & _
                '    "	  ,'' [Branch]      ,'' [AccountNumber]      ,'' [AccountType]     ,'01 Jan 1900' [DebitDate]      ,'' [MemberBranch]      ,'01 Jan 1900'[CoverDate]      ,[LastModified]      ,[ModifiedUser] " & _
                '    "  FROM [ApplicationData].[dbo].SecureUsers U   Where U.EmployeeFullname like '%" & FullNames & "%' and parlourid='" & pgParlourID.ToString() & "' "

            End If

            If Surname <> "" Then
                strSQL = strSQL & " union Select * from Members where (MemberType = 'Main' and Surname like '%" & Surname & "%') and parlourid='" & pgParlourID.ToString() & "' "

                'strSQL = strSQL & " union SELECT TOP 10 U.PkiUserID [pkiMemberID]      ,U.LastModified [CreateDate]  ,'Main' [MemberType]      ,''[Title] ,U.EmployeeFullname [Full Names]   ,U.EmployeeSurname [Surname]      ,''[Gender]   ,U.EmployeeIDNumber [ID Number]  ,'01 Jan 1900' [Date Of Birth] ,'' [Telephone]      ,'' [Cellphone]      ,'' [Address1] " & _
                '   "      ,'' [Address2]      ,'' [Address3]      ,'' [Address4] ,'' [Code]      ,U.EmployeeFullname + ' ' +U.EmployeeSurname   [MemeberNumber]  ,'' [MemberSociety]     ,1 [fkiPlanID]      ,1 [Active]      ,'01 Jan 1900' [InceptionDate]     ,'' [Claimnumber]      ,'' [PolicyStatus]      ,[parlourid]  ,''[Agent]      ,''[AccountHolder] ,''[Bank]  ,''[BranchCode] " & _
                '   "	  ,'' [Branch]      ,'' [AccountNumber]      ,'' [AccountType]     ,'01 Jan 1900' [DebitDate]      ,'' [MemberBranch]      ,'01 Jan 1900'[CoverDate]      ,[LastModified]      ,[ModifiedUser] " & _
                '"  FROM [ApplicationData].[dbo].SecureUsers U   Where U.EmployeeSurname like '%" & Surname & "%' and parlourid='" & pgParlourID.ToString() & "' "

            End If

            If ID_Number <> "" Then
                strSQL = strSQL & " union Select * from Members where (MemberType = 'Main' and [ID Number] like '%" & ID_Number & "%') and parlourid='" & pgParlourID.ToString() & "' "

                'strSQL = strSQL & " union SELECT TOP 10 U.PkiUserID [pkiMemberID]      ,U.LastModified [CreateDate]  ,'Main' [MemberType]      ,''[Title] ,U.EmployeeFullname [Full Names]   ,U.EmployeeSurname [Surname]      ,''[Gender]   ,U.EmployeeIDNumber [ID Number]  ,'01 Jan 1900' [Date Of Birth] ,'' [Telephone]      ,'' [Cellphone]      ,'' [Address1] " & _
                '   "      ,'' [Address2]      ,'' [Address3]      ,'' [Address4] ,'' [Code]      ,U.EmployeeFullname + ' ' +U.EmployeeSurname   [MemeberNumber]  ,'' [MemberSociety]     ,1 [fkiPlanID]      ,1 [Active]      ,'01 Jan 1900' [InceptionDate]     ,'' [Claimnumber]      ,'' [PolicyStatus]      ,[parlourid]  ,''[Agent]      ,''[AccountHolder] ,''[Bank]  ,''[BranchCode] " & _
                '   "	  ,'' [Branch]      ,'' [AccountNumber]      ,'' [AccountType]     ,'01 Jan 1900' [DebitDate]      ,'' [MemberBranch]      ,'01 Jan 1900'[CoverDate]      ,[LastModified]      ,[ModifiedUser] " & _
                '   "  FROM [ApplicationData].[dbo].SecureUsers U   Where U.EmployeeIDNumber like '%" & ID_Number & "%' and parlourid='" & pgParlourID.ToString() & "' "

            End If

            If MemeberNumber <> "" Then
                strSQL = strSQL & " union Select * from Members where (MemberType = 'Main' and MemeberNumber like '%" & MemeberNumber & "%') and parlourid='" & pgParlourID.ToString() & "' "
            End If

            strSQL = strSQL.Remove(0, 6)
            dtData = Nothing
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchByFields = dtData
        End Try
    End Function


    <WebMethod()> _
    Public Function SearchForFunerals(ByVal Title As String, _
                                ByVal FullNames As String, _
                                ByVal Surname As String, _
                                ByVal Gender As String, _
                                ByVal ID_Number As String, _
                                ByVal Date_Of_Birth As Date, _
                                ByVal DateOfDeath As Date, _
                                ByVal DateOfFuneral As Date, _
                                ByVal Address1 As String, _
                                ByVal Address2 As String, _
                                ByVal Address3 As String, _
                                ByVal Address4 As String, _
                                ByVal Code As String, _
                                ByVal MemeberNumber As String, _
                                ByVal Cemetery As String, _
                                ByVal ContactPerson As String, _
                                ByVal ContactNumber As String, _
                                ByVal BodyCollectedFrom As String, _
                                ByVal CourseOfDearth As String, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            strSQL = ""


            If FullNames <> "" Then
                strSQL = strSQL & "union Select * from Funerals where [Full Names] like '%" & FullNames & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If

            If Surname <> "" Then
                strSQL = strSQL & "union Select * from Funerals where  Surname like '%" & Surname & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If


            If ID_Number <> "" Then
                strSQL = strSQL & "union Select * from Funerals where [ID Number] like '%" & ID_Number & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If

            If ContactPerson <> "" Then
                strSQL = strSQL & "union Select * from Funerals where ContactPerson like '%" & ContactPerson & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If

            If ContactNumber <> "" Then
                strSQL = strSQL & "union Select * from Funerals where ContactPersonNumber like '%" & ContactNumber & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If

            'strSQL = strSQL & "union Select * from Funerals where DateOfBirth = #" & Date_Of_Birth & "# "
            strSQL = strSQL & "union Select * from Funerals where DateOfDeath = " & DateOfDeath.ToString("dd-MM-yyyy") & " and parlourid='" & pgParlourID.ToString() & "' "
            strSQL = strSQL & "union Select * from Funerals where DateOfFuneral = " & DateOfFuneral.ToString("dd-MM-yyyy") & " and parlourid='" & pgParlourID.ToString() & "' "



            If BodyCollectedFrom <> "" Then
                strSQL = strSQL & "union Select * from Funerals where BodyCollectedFrom like '%" & BodyCollectedFrom & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If



            strSQL = strSQL.Remove(0, 6)
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchForFunerals = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function SearchForQuotations(ByVal Title As String, _
                             ByVal FullNames As String, _
                             ByVal Surname As String, _
                             ByVal Tel As String, _
                             ByVal Cell As String, _
                             ByVal Address1 As String, _
                             ByVal Address2 As String, _
                             ByVal Address3 As String, _
                             ByVal Address4 As String, _
                             ByVal Code As String, _
                             ByVal DateOfQutotation As Date, _
                             ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            strSQL = ""

            If FullNames <> "" Then
                strSQL = strSQL & "union Select * from Quotations where ContactFirstName like '%" & FullNames & "%' and parlourid='" & pgParlourID.ToString() & "' """
            End If

            If Surname <> "" Then
                strSQL = strSQL & "union Select * from Quotations where  ContactLastName like '%" & Surname & "%' and parlourid='" & pgParlourID.ToString() & "' "
            End If


            strSQL = strSQL & "union Select * from Quotations where DateOfQuotation = " & DateOfQutotation.ToString("dd-MM-yyyy") & " and parlourid='" & pgParlourID.ToString() & "' "



            strSQL = strSQL.Remove(0, 6)
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchForQuotations = dtData
        End Try
    End Function


    <WebMethod()> _
    Public Function SearchForQuotationByQuotationID(ByVal iQuotationID As Int32, _
                                                    ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            strSQL = ""
            dsData = Nothing
            strSQL = "Select * from Quotations where QuotationID = " & iQuotationID
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)
        Catch ex As Exception
            Throw ex
        Finally
            SearchForQuotationByQuotationID = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function SearchForQuotationByFuneralID(ByVal iFuneralID As Int32, _
                                                  ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            strSQL = ""
            dtData = Nothing
            strSQL = "Select * from Funerals where pkiFuneralID = " & iFuneralID
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            SearchForQuotationByFuneralID = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnDateOfBirthFromIDnumber(ByVal strIDNumber As String, _
                                                  ByVal strUserName As String, ByVal pgParlourID As String) As Date
        Dim DOB As Date = Now
        Dim dtMonth As Integer
        Dim dtYear As Integer
        Dim dtDay As Integer

        Try
            If Len(strIDNumber) = 13 And IsNumeric(strIDNumber) Then
                dtMonth = Mid(strIDNumber, 3, 2)
                dtYear = Mid(strIDNumber, 1, 2)
                dtDay = Mid(strIDNumber, 5, 2)

                If CInt(Mid(strIDNumber, 1, 2)) > 9 Then
                    dtYear = "19" & Mid(strIDNumber, 1, 2)
                Else
                    dtYear = "20" & Mid(strIDNumber, 1, 2)
                End If
                DOB = New Date(dtYear, dtMonth, dtDay)

            Else
                Exit Try
            End If
        Catch ex As Exception
            DOB = FormatDateTime(Now, DateFormat.ShortDate)
            ReturnDateOfBirthFromIDnumber = DOB
        Finally
            ReturnDateOfBirthFromIDnumber = DOB.ToString("yyyyMMMdd")
        End Try
    End Function


    <WebMethod()> _
    Public Function AddUpdateSociety(ByVal intSocietyID As Int32, _
                                     ByVal strSociety As String, _
                                     ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim MemberSociety As String = ""

        Try
            blnPassed = False
            If intSocietyID = -1 Then
                strSQL = "Insert Into Societies(SocietyName,parlourid,LastModified,ModifiedUser) " & _
                "values('" & strSociety & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"
            Else

                strSQL = "Select Top 1 SocietyName from Societies Where parlourid='" & pgParlourID.ToString() & "' and pkiSocietyID=" & intSocietyID
                dsData.Clear()
                dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                If IsNothing(dsData) Then
                    Exit Try
                End If

                If dsData.Tables(0).Rows.Count <= 0 Then
                    Exit Try
                End If

                MemberSociety = dsData.Tables(0).Rows(0).Item(0)

                strSQL = "Update Societies " & _
                "Set SocietyName='" & strSociety & "' , " & _
                "parlourid='" & pgParlourID.ToString() & "' ," & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "' " & _
                " Where pkiSocietyID=" & intSocietyID
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)

            If blnPassed Then
                strSQL = "Update Members " & _
                             "Set MemberSociety='" & strSociety & "' ," & _
                            " LastModified =getdate() " & _
                             " Where MemberSociety='" & MemberSociety & "'"
                blnPassed = DL.ExecInsertDatabase(strSQL)
            End If

            AddAudit(strUserName, pgParlourID, "AddUpdateSociety  SocietyName=(" & strSociety & ")")

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateSociety = blnPassed
        End Try
    End Function

    <WebMethod()> _
  Public Function AddUpdatePackage(ByVal intPackageID As Int32, _
                                   ByVal strPackage As String, _
                                   ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim Package As String = ""

        Try
            blnPassed = False
            If intPackageID = -1 Then
                strSQL = "Insert Into Packages(PackageName,parlourid,LastModified,ModifiedUser) " & _
                "values('" & strPackage & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"

                blnPassed = DL.ExecInsertDatabase(strSQL)
            Else

                strSQL = "Select Top 1 PackageName from Packages Where parlourid='" & pgParlourID.ToString() & "' and pkiPackageID=" & intPackageID
                dsData.Clear()
                dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                If IsNothing(dsData) Then
                    Exit Try
                End If

                If dsData.Tables(0).Rows.Count <= 0 Then
                    Exit Try
                End If

                Package = dsData.Tables(0).Rows(0).Item(0)

                strSQL = "Update Packages " & _
                "Set PackageName='" & strPackage & "' , " & _
                "parlourid='" & pgParlourID.ToString() & "' " & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                " Where pkiPackageID=" & intPackageID

                blnPassed = DL.ExecInsertDatabase(strSQL)
                If blnPassed Then
                    strSQL = "Update PackageServicesSelection " & _
                                 "Set packagename='" & strPackage & "' " & _
                                " LastModified =getdate()," & _
                                 " Where packagename='" & Package & "'"
                    blnPassed = DL.ExecInsertDatabase(strSQL)
                End If
            End If

            AddAudit(strUserName, pgParlourID, "AddUpdatePackage  packagename=(" & strPackage & ")")
        Catch ex As Exception
            Throw ex
        Finally
            AddUpdatePackage = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateVendor(ByVal intVendorID As Int32, _
                                    ByVal strVendor As String, _
                                    ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim MemberSociety As String = ""

        Try
            blnPassed = False
            If intVendorID = -1 Then
                strSQL = "Insert Into Vendors(VendorName,parlourid,LastModified,ModifiedUser) " & _
                "values('" & strVendor & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"
            Else

                strSQL = "Select Top 1 VendorName from Vendors Where parlourid='" & pgParlourID.ToString() & "' and pkiVendorID=" & intVendorID
                dsData.Clear()
                dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                If IsNothing(dsData) Then
                    Exit Try
                End If

                If dsData.Tables(0).Rows.Count <= 0 Then
                    Exit Try
                End If

                strSQL = "Update Vendors " & _
                "Set VendorName='" & strVendor & "' , " & _
                "parlourid='" & pgParlourID.ToString() & "' " & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                " Where pkiVendorID=" & intVendorID
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)


            AddAudit(strUserName, pgParlourID, "AddUpdateVendor  VendorName=(" & strVendor & ")")

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateVendor = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateExpenseCategory(ByVal intCategoryID As Int32, _
                                             ByVal strCatogory As String, _
                                             ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim MemberSociety As String = ""

        Try
            blnPassed = False
            If intCategoryID = -1 Then
                strSQL = "Insert Into ExpenseCategories(Category,parlourid,LastModified,ModifiedUser) " & _
                "values('" & strCatogory & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"
            Else

                strSQL = "Select Top 1 Category from ExpenseCategories Where parlourid='" & pgParlourID.ToString() & "' and pkiExpenseCategoryID=" & intCategoryID
                dsData.Clear()
                dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                If IsNothing(dsData) Then
                    Exit Try
                End If

                If dsData.Tables(0).Rows.Count <= 0 Then
                    Exit Try
                End If

                strSQL = "Update ExpenseCategories " & _
                "Set Category='" & strCatogory & "' , " & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "parlourid='" & pgParlourID.ToString() & "' " & _
                " Where pkiExpenseCategoryID=" & intCategoryID
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "AddUpdateExpenseCategory   Category=(" & strCatogory & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateExpenseCategory = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function DeleteVendor(ByVal intPlanOrSocietyID As Int32, _
                                 ByVal blnSociety As Boolean, _
                                 ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim inrResult As Integer

        Try
            blnPassed = False
            strSQL = "Delete from Vendors " & _
            " Where pkiVendorID=" & intPlanOrSocietyID & " and pkiVendorID not in (Select [fkiVendorID] from [Expenses])"

            inrResult = DL.ExecInsertAndReturnResultDatabase(strSQL)

            If inrResult > 0 Then
                blnPassed = True
            Else
                blnPassed = False
            End If

        Catch ex As Exception
            Throw ex
        Finally
            DeleteVendor = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function DeleteExpenseCategory(ByVal intPlanOrSocietyID As Int32, _
                                          ByVal blnSociety As Boolean, _
                                          ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim inrResult As Integer

        Try
            blnPassed = False
            strSQL = "Delete from ExpenseCategories " & _
            " Where pkiExpenseCategoryID=" & intPlanOrSocietyID & " and pkiExpenseCategoryID not in (Select [fkiVendorID] from [Expenses])"

            inrResult = DL.ExecInsertAndReturnResultDatabase(strSQL)

            If inrResult > 0 Then
                blnPassed = True
            Else
                blnPassed = False
            End If

        Catch ex As Exception
            Throw ex
        Finally
            DeleteExpenseCategory = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function DeletePlanOrSociety(ByVal intPlanOrSocietyID As Int32, _
                                      ByVal blnSociety As Boolean, _
                                        ByVal strUserName As String, ByVal pgParlourID As String) As Boolean

        Try
            blnPassed = False
            If blnSociety Then
                strSQL = "SELECT top 1 M.MemberSociety FROM Societies S " & _
                "INNER JOIN Members M ON S.SocietyName = M.MemberSociety " & _
                "Where S.pkiSocietyID=" & intPlanOrSocietyID
                dsData.Clear()
                dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                If Not IsNothing(dsData) Then
                    If dsData.Tables(0).Rows.Count > 0 Then
                        Exit Try
                    End If
                End If

                strSQL = "Delete from Societies " & _
                " Where pkiSocietyID=" & intPlanOrSocietyID

                blnPassed = DL.ExecInsertDatabase(strSQL)
            Else
                strSQL = "SELECT TOP 1 fkiPlanID FROM Members where fkiPlanID=" & intPlanOrSocietyID

                dsData.Clear()
                dsData = DL.ExecReturnDatasetFromSQL(strSQL)

                If Not IsNothing(dsData) Then
                    If dsData.Tables(0).Rows.Count > 0 Then
                        Exit Try
                    End If
                End If

                strSQL = "Delete from Plans " & _
                " Where pkiPlanID=" & intPlanOrSocietyID

                blnPassed = DL.ExecInsertDatabase(strSQL)
            End If


        Catch ex As Exception
            Throw ex
        Finally
            DeletePlanOrSociety = blnPassed
        End Try
    End Function

    <WebMethod()> _
   Public Function DeleteBrokerPlan(ByVal bokerplan As String, _
                                       ByVal strUserName As String, ByVal pgParlourID As String) As Boolean

        Try
            blnPassed = False

            strSQL = "SELECT top 1 * FROM Members  " & _
            "Where BrokerPlanID='" & bokerplan & "'"
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If Not IsNothing(dsData) Then
                If dsData.Tables(0).Rows.Count > 0 Then
                    Exit Try
                End If
            End If

            strSQL = "Delete from [BrokerPlans] " & _
            " Where pkiBrokerPlanID=" & bokerplan

            blnPassed = DL.ExecInsertDatabase(strSQL)



        Catch ex As Exception
            Throw ex
        Finally
            DeleteBrokerPlan = blnPassed
        End Try
    End Function
    <WebMethod()> _
    Public Function DeletePackage(ByVal PackageName As String, _
                                  ByVal strUserName As String, ByVal pgParlourID As String) As Boolean

        Try
            blnPassed = False

            strSQL = "SELECT top 1 packagename FROM PackageServicesSelection " & _
            "Where packagename='" & PackageName & "'"
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If Not IsNothing(dsData) Then
                If dsData.Tables(0).Rows.Count > 0 Then
                    Exit Try
                End If
            End If

            strSQL = "Delete from Packages " & _
            " Where PackageName='" & PackageName & "'"

            blnPassed = DL.ExecInsertDatabase(strSQL)



        Catch ex As Exception
            Throw ex
        Finally
            DeletePackage = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddDocs(ByVal imgName As String, ByVal data As Byte(), _
                            ByVal intID As Integer, ByVal blnIndicator As String, _
                            ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim cmd As SqlClient.SqlCommand

        Try
            If blnIndicator = "member" Then
                cmd = New SqlClient.SqlCommand("INSERT INTO MemberDocuments VALUES(@name,@photo,@ID,getdate(),@Parlourid,getdate(),@ModifiedUser)")
            ElseIf blnIndicator = "claim" Then
                cmd = New SqlClient.SqlCommand("INSERT INTO ClaimDocuments VALUES(@name,@photo,@ID,getdate(),@Parlourid,getdate(),@ModifiedUser)")
            Else
                cmd = New SqlClient.SqlCommand("INSERT INTO FuneralDocuments VALUES(@name,@photo,@ID,getdate(),@Parlourid,getdate(),@ModifiedUser)")
            End If


            cmd.Parameters.AddWithValue("@name", imgName)
            cmd.Parameters.AddWithValue("@ID", intID)
            cmd.Parameters.AddWithValue("@Parlourid", pgParlourID.ToString())
            cmd.Parameters.AddWithValue("@ModifiedUser", strUserName)
            Dim p As New SqlClient.SqlParameter("@photo", SqlDbType.Image)
            p.Value = data
            cmd.Parameters.Add(p)
            cmd.Connection = DL.pcnSQLConnecton
            cmd.ExecuteNonQuery()

            blnPassed = True
        Catch ex As Exception
            Throw ex
        Finally
            AddDocs = blnPassed
        End Try
    End Function


    <WebMethod()> _
Public Function UpdateCompanyLogo(ByVal data As Byte(), _
                        ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim cmd As SqlClient.SqlCommand

        Try

            cmd = New SqlClient.SqlCommand("Update AdditionalApplicationSettings SET ApplicationLogo = @photo WHERE pkiParlourid=@Parlourid ")
            cmd.Parameters.AddWithValue("@Parlourid", pgParlourID.ToString())
            '' cmd.Parameters.AddWithValue("@ModifiedUser", strUserName)
            Dim p As New SqlClient.SqlParameter("@photo", SqlDbType.Image)
            p.Value = data
            cmd.Parameters.Add(p)
            cmd.Connection = DL.pcnSQLConnecton
            cmd.ExecuteNonQuery()

            blnPassed = True
        Catch ex As Exception
            Throw ex
        Finally
            UpdateCompanyLogo = blnPassed
        End Try
    End Function

    <WebMethod()> _
 Public Function AddUpdateBrokerPlans(ByVal pkiBrokerPlanID As Guid, _
                             ByVal strPlanName As String, _
                             ByVal strPlanDescription As String, _
                             ByVal curPremiunm As Double, _
                             ByVal intSpouse As Integer, _
                             ByVal intChildren As Integer, _
                             ByVal intAdults As Integer, _
                             ByVal curCover As Double, _
                             ByVal intWaitingPeriod As Integer, _
                             ByVal SpouseCover As Double, _
                             ByVal ChildCover As Double, _
                             ByVal AdultCover As Double, _
                             ByVal intLapsePeriod As Integer, _
                              ByVal curUSplit As Double, _
                              ByVal curMSplit As Double, _
                              ByVal curASplit As Double, _
                              ByVal PlanUnderwriter As String, _
                              ByVal curJoiningFee As Double, _
                             ByVal strUserName As String, ByVal pgParlourID As String, ByVal brokerID As String) As Boolean

        Try
            blnPassed = False
            If pkiBrokerPlanID = Guid.Empty Then
                strSQL = "Insert Into BrokerPlans(pkiBrokerPlanID,PlanName,PlanDesc,PlanSubscription,Spouse," & _
                "Children,Adults,Cover,WaitingPeriod,UnderwriterSplit,ManagerSplit," & _
                "AgentSplit,PolicyLaps,SpouseCover,ChildCover,AdultCover," & _
                "parlourid,PlanUnderwriter,JoiningFee,LastModified,ModifiedUser,BrokerID) " & _
                "values(newid(),'" & strPlanName & "','" & strPlanDescription & "'," & _
                curPremiunm & "," & intSpouse & "," & intChildren & "," & intAdults & _
                "," & curCover & "," & intWaitingPeriod & "," & curUSplit & "," & _
                curMSplit & "," & curASplit & ", " & intLapsePeriod & "," & _
                SpouseCover & "," & ChildCover & "," & AdultCover & " ,'" & _
                pgParlourID.ToString & "','" & PlanUnderwriter & " '," & _
                curJoiningFee & ",getdate(),'" & strUserName & "','" & brokerID & "')"
            Else
                strSQL = "Update BrokerPlans " & _
                "Set PlanName='" & strPlanName & "' ," & _
                "PlanDesc ='" & strPlanDescription & "'," & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "PlanSubscription= " & curPremiunm & "," & _
                "Spouse= " & intSpouse & "," & _
                "Children= " & intChildren & "," & _
                "Adults= " & intAdults & "," & _
                "Cover= " & curCover & "," & _
                "WaitingPeriod = " & intWaitingPeriod & "," & _
                "UnderwriterSplit =" & curUSplit & "," & _
                "ManagerSplit =" & curMSplit & "," & _
                "AgentSplit =" & curASplit & "," & _
                "PolicyLaps=" & intLapsePeriod & "," & _
                "SpouseCover=" & SpouseCover & "," & _
                "ChildCover=" & ChildCover & "," & _
                "JoiningFee=" & curJoiningFee & "," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "BrokerID='" & brokerID & "', " & _
                "AdultCover= " & AdultCover & ", " & _
                "PlanUnderwriter='" & PlanUnderwriter & "' " & _
                " Where pkiBrokerPlanID='" & pkiBrokerPlanID.ToString & "'"

            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "AddUpdatePlans  strPlanName=(" & strPlanName & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateBrokerPlans = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdatePlans(ByVal intPlanID As Int32, _
                                ByVal strPlanName As String, _
                                ByVal strPlanDescription As String, _
                                ByVal curPremiunm As Double, _
                                ByVal intSpouse As Integer, _
                                ByVal intChildren As Integer, _
                                ByVal intAdults As Integer, _
                                ByVal curCover As Double, _
                                ByVal intWaitingPeriod As Integer, _
                                ByVal SpouseCover As Double, _
                                ByVal ChildCover As Double, _
                                ByVal AdultCover As Double, _
                                ByVal intLapsePeriod As Integer, _
                                 ByVal curUSplit As Double, _
                                 ByVal curMSplit As Double, _
                                 ByVal curASplit As Double, _
                                 ByVal PlanUnderwriter As String, _
                                 ByVal curJoiningFee As Double, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As Boolean

        Try
            blnPassed = False
            If intPlanID = -1 Then
                strSQL = "Insert Into Plans(PlanName,PlanDesc,PlanSubscription,Spouse," & _
                "Children,Adults,Cover,WaitingPeriod,UnderwriterSplit,ManagerSplit," & _
                "AgentSplit,PolicyLaps,SpouseCover,ChildCover,AdultCover," & _
                "parlourid,PlanUnderwriter,JoiningFee,LastModified,ModifiedUser) " & _
                "values('" & strPlanName & "','" & strPlanDescription & "'," & _
                curPremiunm & "," & intSpouse & "," & intChildren & "," & intAdults & _
                "," & curCover & "," & intWaitingPeriod & "," & curUSplit & "," & _
                curMSplit & "," & curASplit & ", " & intLapsePeriod & "," & _
                SpouseCover & "," & ChildCover & "," & AdultCover & " ,'" & _
                pgParlourID.ToString & "','" & PlanUnderwriter & " '," & _
                curJoiningFee & ",getdate(),'" & strUserName & "')"
            Else
                strSQL = "Update Plans " & _
                "Set PlanName='" & strPlanName & "' ," & _
                "PlanDesc ='" & strPlanDescription & "'," & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "PlanSubscription= " & curPremiunm & "," & _
                "Spouse= " & intSpouse & "," & _
                "Children= " & intChildren & "," & _
                "Adults= " & intAdults & "," & _
                "Cover= " & curCover & "," & _
                "WaitingPeriod = " & intWaitingPeriod & "," & _
                "UnderwriterSplit =" & curUSplit & "," & _
                "ManagerSplit =" & curMSplit & "," & _
                "AgentSplit =" & curASplit & "," & _
                "PolicyLaps=" & intLapsePeriod & "," & _
                "SpouseCover=" & SpouseCover & "," & _
                "ChildCover=" & ChildCover & "," & _
                "JoiningFee=" & curJoiningFee & "," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "AdultCover= " & AdultCover & ", " & _
                "PlanUnderwriter='" & PlanUnderwriter & "' " & _
                " Where pkiPlanID=" & intPlanID

            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "AddUpdatePlans  strPlanName=(" & strPlanName & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdatePlans = blnPassed
        End Try
    End Function

    <WebMethod()> _
 Public Function AddUpdatePlansNew(ByVal intPlanID As Int32, _
                             ByVal strPlanName As String, _
                             ByVal strPlanDescription As String, _
                             ByVal curPremiunm As Double, _
                             ByVal intSpouse As Integer, _
                             ByVal intChildren As Integer, _
                             ByVal intAdults As Integer, _
                             ByVal curCover As Double, _
                             ByVal intWaitingPeriod As Integer, _
                             ByVal SpouseCover As Double, _
                             ByVal ChildCover As Double, _
                             ByVal AdultCover As Double, _
                             ByVal intLapsePeriod As Integer, _
                              ByVal curUSplit As Double, _
                              ByVal curMSplit As Double, _
                              ByVal curASplit As Double, _
                              ByVal curHeadManagerSplit As Double, _
                              ByVal curManager2Split As Double, _
                              ByVal curOfficeSplit As Double, _
                              ByVal curAdminSplit As Double, _
                              ByVal PlanUnderwriter As String, _
                              ByVal curJoiningFee As Double, _
                             ByVal strUserName As String, ByVal pgParlourID As String) As Boolean

        Try
            blnPassed = False
            If intPlanID = -1 Then
                strSQL = "Insert Into Plans(PlanName,PlanDesc,PlanSubscription,Spouse," & _
                "Children,Adults,Cover,WaitingPeriod,UnderwriterSplit,ManagerSplit," & _
                "AgentSplit,PolicyLaps,SpouseCover,ChildCover,AdultCover," & _
                "parlourid,PlanUnderwriter,JoiningFee,LastModified,ModifiedUser," & _
                "HeadManagerSplit,Manager2Split,OfficeSplit,AdminSplit) " & _
                "values('" & strPlanName & "','" & strPlanDescription & "'," & _
                (curPremiunm / 100).ToString().Replace(",", ".") & "," & intSpouse & "," & intChildren & "," & intAdults & _
                "," & curCover & "," & intWaitingPeriod & "," & (curUSplit / 100).ToString().Replace(",", ".") & "," & _
                (curMSplit / 100).ToString().Replace(",", ".") & "," & (curASplit / 100).ToString().Replace(",", ".") & ", " & intLapsePeriod & "," & _
                SpouseCover & "," & ChildCover & "," & AdultCover & " ,'" & _
                pgParlourID.ToString & "','" & PlanUnderwriter & " '," & _
                (curJoiningFee / 100).ToString().Replace(",", ".") & ",getdate(),'" & strUserName & "'," & _
                (curHeadManagerSplit / 100).ToString().Replace(",", ".") & "," & (curManager2Split / 100).ToString().Replace(",", ".") & "," & _
                (curOfficeSplit / 100).ToString().Replace(",", ".") & "," & (curAdminSplit / 100).ToString().Replace(",", ".") & ")"
            Else
                strSQL = "Update Plans " & _
                "Set PlanName='" & strPlanName & "' ," & _
                "PlanDesc ='" & strPlanDescription & "'," & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "PlanSubscription= " & (curPremiunm / 100).ToString().Replace(",", ".") & "," & _
                "Spouse= " & intSpouse & "," & _
                "Children= " & intChildren & "," & _
                "Adults= " & intAdults & "," & _
                "Cover= " & curCover & "," & _
                "WaitingPeriod = " & intWaitingPeriod & "," & _
                "UnderwriterSplit =" & (curUSplit / 100).ToString().Replace(",", ".") & "," & _
                "ManagerSplit =" & (curMSplit / 100).ToString().Replace(",", ".") & "," & _
                "AgentSplit =" & (curASplit / 100).ToString().Replace(",", ".") & "," & _
                "HeadManagerSplit =" & (curHeadManagerSplit / 100).ToString().Replace(",", ".") & "," & _
                "Manager2Split =" & (curManager2Split / 100).ToString().Replace(",", ".") & "," & _
                "OfficeSplit =" & (curOfficeSplit / 100).ToString().Replace(",", ".") & "," & _
                "AdminSplit =" & (curAdminSplit / 100).ToString().Replace(",", ".") & "," & _
                "PolicyLaps=" & intLapsePeriod & "," & _
                "SpouseCover=" & (SpouseCover / 100).ToString().Replace(",", ".") & "," & _
                "ChildCover=" & (ChildCover / 100).ToString().Replace(",", ".") & "," & _
                "JoiningFee=" & (curJoiningFee / 100).ToString().Replace(",", ".") & "," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "AdultCover= " & AdultCover & ", " & _
                "PlanUnderwriter='" & PlanUnderwriter & "' " & _
                " Where pkiPlanID=" & intPlanID

            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "AddUpdatePlans  strPlanName=(" & strPlanName & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdatePlansNew = blnPassed
        End Try
    End Function


    <WebMethod()> _
    Public Function AddUpdateFuneralServices(ByVal intServiceID As Int32, _
                            ByVal strServiceName As String, _
                            ByVal strServiceDescription As String, _
                            ByVal curServiceCost As Double, _
                            ByVal QTY As Int32, _
                            ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            If intServiceID = -1 Then
                strSQL = "Insert Into FuneralServices(ServiceName,ServiceDesc,ServiceCost,QTY,parlourid,LastModified,ModifiedUser) " & _
                "values('" & strServiceName & "','" & strServiceDescription & " '," & _
                curServiceCost & " ," & QTY & ",'" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"

            Else
                strSQL = "Update FuneralServices " & _
                "Set ServiceName='" & strServiceName & "' ," & _
                "ServiceDesc = '" & strServiceDescription & " '," & _
                " LastModified =getdate()," & _
                " ModifiedUser ='" & strUserName & "'," & _
                "ServiceCost= " & curServiceCost & " ," & _
                "parlourid='" & pgParlourID.ToString() & "', " & _
                "QTY= " & QTY & _
                " Where pkiServiceID=" & intServiceID
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "AddUpdateFuneralServices  strServiceName=(" & strServiceName & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateFuneralServices = blnPassed
        End Try
    End Function

    <WebMethod()> _
  Public Function AddUpdateAddonProducts(ByVal intAdd As Int32, _
                          ByVal pkiProductID As String, _
                          ByVal ProductName As String, _
                          ByVal ProductDesc As String, _
                          ByVal ProductCost As Double, _
                          ByVal ProductCover As Double, _
                          ByVal IsProductOngoing As Int32, _
                          ByVal IsProductLaybye As Int32, _
                          ByVal fkiMemberid As Int32, _
                          ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try

            blnPassed = False
            strSQL = "EXECUTE [dbo].[AddUpdateAddonProducts] " & _
                  "  @add =" & intAdd & "," & _
                  " @pkiProductID ='" & pkiProductID & "'," & _
                  " @UserID ='" & strUserName & "'," & _
                  " @ProductName ='" & ProductName & "'," & _
                  " @ProductDesc ='" & ProductDesc & "'," & _
                  " @ProductCost =" & (ProductCost / 100).ToString().Replace(",", ".") & "," & _
                  " @ProductCover =" & (ProductCover / 100).ToString().Replace(",", ".") & "," & _
                  " @IsProductOngoing =" & IsProductOngoing & "," & _
                  " @IsProductLaybye =" & IsProductLaybye & "," & _
                  " @parlourid ='" & pgParlourID & "'," & _
                  " @ModifiedUser ='" & strUserName & "'"


            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "AddUpdateAddonProducts  pkiProductID=(" & pkiProductID & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateAddonProducts = blnPassed
        End Try
    End Function

    <WebMethod()> _
 Public Function AddUpdateMemberAddonProducts(ByVal intAdd As Int32, _
                         ByVal pkiMemberProductID As String, _
                         ByVal fkiProductID As String, _
                         ByVal fkiMemberid As Int32, _
                         ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try

            blnPassed = False
            strSQL = "EXECUTE [dbo].[AddUpdateMemberAddonProducts] " & _
                  "  @Add =" & intAdd & "," & _
                  " @pkiMemberProductID ='" & pkiMemberProductID & "'," & _
                  " @UserID ='" & strUserName & "'," & _
                  " @fkiProductID ='" & fkiProductID & "'," & _
                  " @fkiMemberid =" & fkiMemberid & "," & _
                  " @parlourid ='" & pgParlourID & "'," & _
                  " @ModifiedUser ='" & strUserName & "'"


            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "AddUpdateMemberAddonProducts  pkiMemberProductID=(" & pkiMemberProductID & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateMemberAddonProducts = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadSociety(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select SocietyName From Societies where parlourid='" & pgParlourID.ToString() & "' order by 1"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)
        Catch ex As Exception
            Throw ex
        Finally
            LoadSociety = dtData
        End Try

    End Function


    <WebMethod()> _
    Public Function LoadPaymenysSociety(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select 'A - Societies only' [SocietyName] union all Select ltrim(SocietyName) [SocietyName] From Societies where parlourid='" & pgParlourID.ToString() & "' order by 1"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)
        Catch ex As Exception
            Throw ex
        Finally
            LoadPaymenysSociety = dtData
        End Try

    End Function

    <WebMethod()> _
    Public Function LoadSecurityGroups(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select sSecureGroupName From SecureGroup"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)
        Catch ex As Exception
            Throw ex
        Finally
            LoadSecurityGroups = dtData
        End Try

    End Function

    <WebMethod()> _
    Public Function LoadPlans(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select * From Plans where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadPlans = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function LoadBrokerPlans(ByVal blnFilter As Boolean, ByVal strvalue As String, ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            If blnFilter Then
                strSQL = "Exec dbo.ReturnBrokerPlansForCompany @ParlourID = '" & strvalue & "' , @BrokerID='" & pgParlourID.ToString() & "' "

            Else
                strSQL = "Exec dbo.ReturnBrokerPlans @BrokerID='" & pgParlourID.ToString() & "' "
            End If

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadBrokerPlans = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function SetUpNewParlourBroker(ByVal businessname As String, ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "Exec dbo.SetUpNewParlourBroker @BusinesName = '" & businessname & "' , @BrokerID='" & pgParlourID.ToString() & "' "

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            SetUpNewParlourBroker = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadExpenses(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select * From Plans where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadExpenses = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadFuneralServices(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select * From FuneralServices where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadFuneralServices = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadFuneralServicesByPackageId(ByVal package As String, ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "SELECT FuneralServices.pkiServiceID, " & _
                        "FuneralServices.ServiceName, " & _
                        "FuneralServices.ServiceDesc, " & _
                        "FuneralServices.ServiceCost " & _
                        "FROM FuneralServices INNER JOIN PackageServicesSelection ON " & _
                        "FuneralServices.[pkiServiceID] = PackageServicesSelection.[fkiServiceID] " & _
                        "Where PackageServicesSelection.packagename='" & package & "' and " & _
                        "FuneralServices.parlourid='" & pgParlourID.ToString() & "' "

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadFuneralServicesByPackageId = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnFuneralServicesByPackageId(ByVal package As String, _
                                                     ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            dtData = Nothing
            strSQL = "SELECT FuneralServices.pkiServiceID, " & _
                        "FuneralServices.ServiceName, " & _
                        "FuneralServices.ServiceDesc, " & _
                        "FuneralServices.ServiceCost " & _
                        "FROM FuneralServices INNER JOIN PackageServicesSelection ON " & _
                        "FuneralServices.[pkiServiceID] = PackageServicesSelection.[fkiServiceID] " & _
                        "Where PackageServicesSelection.packagename='" & package & "' and " & _
                        "FuneralServices.parlourid='" & pgParlourID.ToString() & "' "


            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnFuneralServicesByPackageId = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnDocs(ByVal intMemberId As Integer, ByVal blnIndicator As String, _
                               ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            dsData = Nothing

            If blnIndicator = "member" Then
                strSQL = "SELECT [pkiPictureID] [Image ID],[ImageName] [Image Name],[ImageFile] [Image Document]" & _
                     "FROM [dbo].[MemberDocuments] " & _
                     "where [Parlourid]='" & pgParlourID.ToString() & "' and " & _
                     "[fkiMemberID] = " & intMemberId
            ElseIf blnIndicator = "claim" Then
                strSQL = "SELECT [pkiClaimPictureID] [Image ID],[ImageName] [Image Name],[ImageFile] [Image Document]" & _
                    "FROM [dbo].[ClaimDocuments] " & _
                    "where [Parlourid]='" & pgParlourID.ToString() & "' and " & _
                    "[fkiMemberID] = " & intMemberId
            Else
                strSQL = "SELECT [pkiFuneralPictureID] [Image ID],[ImageName] [Image Name],[ImageFile] [Image Document]" & _
                      "FROM [dbo].[FuneralDocuments] " & _
                      "where [Parlourid]='" & pgParlourID.ToString() & "' and " & _
                      "[fkiMemberID] = " & intMemberId
            End If


            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnDocs = dsData
        End Try
    End Function


    <WebMethod()> _
    Public Function LoadSocieties(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select pkiSocietyID, SocietyName From Societies where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadSocieties = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadPackages(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select pkiPackageID, PackageName From Packages where parlourid='" & pgParlourID.ToString() & "' and PackageName<> ''"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadPackages = dtData
        End Try
    End Function

    <WebMethod()> _
Public Function LoadParlourClaimsDropDowns(ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False

            strSQL = "Exec dbo.[ReturnParlourClaimsDropDowns] @brokerid ='" & pgParlourID.ToString() & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            LoadParlourClaimsDropDowns = dsData
        End Try
    End Function

    <WebMethod()> _
   Public Function LoadIssueDropDowns(ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False

            strSQL = "Exec dbo.[ReturnIssueDropDowns] @parlourid='" & pgParlourID.ToString() & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            LoadIssueDropDowns = dsData
        End Try
    End Function
    <WebMethod()> _
    Public Function LoadPackagescbo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select distinct PackageName From Packages where parlourid='" & pgParlourID.ToString() & "' and PackageName<> ''"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadPackagescbo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadVendors(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select pkiVendorID, VendorName From Vendors where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadVendors = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadCatogories(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select [pkiExpenseCategoryID], [Category] From  [ExpenseCategories] where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadCatogories = dtData
        End Try
    End Function

    Public Function AddAudit(ByVal strUserName As String, ByVal pgParlourID As String, ByVal actionDesc As String)
        Try
            strSQL = "Insert Into dbo.audit_trail " & _
                   "Select " & "'" & strUserName & "',getdate(), '" & _
                 Left(actionDesc, 1024) & "','" & pgParlourID.ToString & "'"

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddAudit = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddDependency(ByVal fkiMemberID As Int32, _
                                    ByVal FullName As String, _
                                    ByVal Surname As String, _
                                    ByVal Gender As String, _
                                    ByVal Type As String, _
                                    ByVal Date_Of_Birth As Date, _
                                    ByVal ID_number As String, _
                                    ByVal age As Int32, _
                                    ByVal Telephone As String, _
                                        ByVal Cellphone As String, _
                                        ByVal Address1 As String, _
                                        ByVal Address2 As String, _
                                        ByVal Address3 As String, _
                                        ByVal Address4 As String, _
                                        ByVal Code As String, _
                                        ByVal Premium As Double, _
                                        ByVal plan As String, _
                                        ByVal InceptionDate As Date, _
                                        ByVal CoverDate As Date, _
                                        ByVal Cover As Double, _
                                        ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "Insert Into Dependencies(fkiMemberID, " & _
                    "DependencyType, [Full Name], Surname, " & _
                    "Gender, IDNumber, Age,Telephone,Cellphone," & _
                    "Address1,Address2,Address3,Address4,Code," & _
                    "Premium,[Date Of Birth],parlourid,InceptionDate,CoverDate,Cover,LastModified,ModifiedUser) Values(" & fkiMemberID & ",'" & Type & _
                    "', '" & FullName & "','" & Surname & "','" & Gender & "','" & ID_number & _
                    "'," & age & ",'" & Telephone & "','" & Cellphone & "','" & _
                    Address1 & "','" & Address2 & "','" & Address3 & "','" & _
                    Address4 & "','" & Code & "'," & Premium & ",'" & Date_Of_Birth.ToString("yyyy-MM-dd") & "','" & _
                    pgParlourID.ToString & "','" & InceptionDate.ToString("yyyy-MM-dd") & "','" & _
                    CoverDate.ToString("yyyy-MM-dd") & "', " & Cover & ",getdate(),'" & strUserName & "')"
            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "Insert Into Dependent (" & FullName & " " & Surname & "" & ID_number & ")")

        Catch ex As Exception
            Throw ex
        Finally
            AddDependency = blnPassed
        End Try
    End Function

    <WebMethod()> _
   Public Function AddDependencyNew(ByVal fkiMemberID As Int32, _
                                   ByVal FullName As String, _
                                   ByVal Surname As String, _
                                   ByVal Gender As String, _
                                   ByVal Type As String, _
                                   ByVal Date_Of_Birth As Date, _
                                   ByVal ID_number As String, _
                                   ByVal age As Int32, _
                                   ByVal Telephone As String, _
                                       ByVal Cellphone As String, _
                                       ByVal Address1 As String, _
                                       ByVal Address2 As String, _
                                       ByVal Address3 As String, _
                                       ByVal Address4 As String, _
                                       ByVal Code As String, _
                                       ByVal Premium As Double, _
                                       ByVal plan As String, _
                                       ByVal InceptionDate As Date, _
                                       ByVal CoverDate As Date, _
                                       ByVal Cover As Double, _
                                       ByVal Claimnumber As String, _
                                       ByVal UnderwriterSplit As Double, _
                                       ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "Insert Into Dependencies(fkiMemberID, " & _
                    "DependencyType, [Full Name], Surname, " & _
                    "Gender, IDNumber, Age,Telephone,Cellphone," & _
                    "Address1,Address2,Address3,Address4,Code," & _
                    "Premium,[Date Of Birth],parlourid,InceptionDate," & _
                    "CoverDate,Cover,LastModified,ModifiedUser,Claimnumber,UnderwriterSplit) Values(" & fkiMemberID & ",'" & Type & _
                    "', '" & FullName & "','" & Surname & "','" & Gender & "','" & ID_number & _
                    "'," & age & ",'" & Telephone & "','" & Cellphone & "','" & _
                    Address1 & "','" & Address2 & "','" & Address3 & "','" & _
                    Address4 & "','" & Code & "'," & (Premium / 100).ToString().Replace(",", ".") & ",'" & Date_Of_Birth.ToString("yyyy-MM-dd") & "','" & _
                    pgParlourID.ToString & "','" & InceptionDate.ToString("yyyy-MM-dd") & "','" & _
                    CoverDate.ToString("yyyy-MM-dd") & "', " & (Cover / 100).ToString().Replace(",", ".") & ",getdate(),'" & strUserName & "','" & _
                    Claimnumber & "'," & (UnderwriterSplit / 100).ToString().Replace(",", ".") & ")"
            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "Insert Into Dependent (" & FullName & " " & Surname & "" & ID_number & ")")

        Catch ex As Exception
            Throw ex
        Finally
            AddDependencyNew = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateBeneficiaries(ByVal pkiBenneficiaryID As Int32, _
                                           ByVal fkiMemberID As Int32, _
                                      ByVal FullName As String, _
                                      ByVal Surname As String, _
                                      ByVal Type As String, _
                                      ByVal Date_Of_Birth As Date, _
                                      ByVal ID_number As String, _
                                              ByVal Telephone As String, _
                                          ByVal Cellphone As String, _
                                          ByVal Address1 As String, _
                                          ByVal Address2 As String, _
                                          ByVal Address3 As String, _
                                          ByVal Address4 As String, _
                                          ByVal Code As String, _
                                          ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "Exec  dbo.AddUpdateBeneficiaries " & pkiBenneficiaryID & "," & fkiMemberID & ",'" & Type & _
                    "', '" & FullName & "','" & Surname & "','" & Date_Of_Birth.ToString("yyyy-MM-dd") & "','" & ID_number & _
                    "','" & Telephone & "','" & Cellphone & "','" & Address1 & "','" & Address2 & "','" & Address3 & "','" & _
                    Address4 & "','" & Code & "','" & pgParlourID.ToString & "', '" & strUserName & "'"
            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "Edit Into Beneficiary (" & FullName & " " & Surname & "" & ID_number & ")")

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateBeneficiaries = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function ImportDependency(ByVal strMemberNo As Int32, _
                                  ByVal FullName As String, _
                                  ByVal Surname As String, _
                                  ByVal Gender As String, _
                                  ByVal Type As String, _
                                  ByVal Date_Of_Birth As Date, _
                                  ByVal ID_number As String, _
                                  ByVal age As Int32, _
                                  ByVal Telephone As String, _
                                      ByVal Cellphone As String, _
                                      ByVal Address1 As String, _
                                      ByVal Address2 As String, _
                                      ByVal Address3 As String, _
                                      ByVal Address4 As String, _
                                      ByVal Code As String, _
                                      ByVal Premium As Double, _
                                      ByVal plan As String, _
                                      ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            Dim intMemberID = 0

            blnPassed = False


            strSQL = "Insert Into Dependencies(fkiMemberID, " & _
                    "DependencyType, [Full Name], Surname, " & _
                    "Gender, IDNumber, Age,Telephone,Cellphone," & _
                    "Address1,Address2,Address3,Address4,Code," & _
                    "Premium,[Date Of Birth],parlourid,LastModified,ModifiedUser) Values(" & _
                    strMemberNo & ",'" & Type & _
                    "', '" & FullName & "','" & Surname & "','" & Gender & "','" & ID_number & _
                    "'," & age & ",'" & Telephone & "','" & Cellphone & "','" & _
                    Address1 & "','" & Address2 & "','" & Address3 & "','" & _
                    Address4 & "','" & Code & "'," & Premium & ",'" & _
                    Date_Of_Birth.ToString("yyyy-MM-dd") & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"
            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "Import Into Dependent =(" & FullName & " " & Surname & "" & ID_number & ")")

        Catch ex As Exception
            Throw ex
        Finally
            ImportDependency = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUserToSecurityGroup(ByVal fkiUserID As Int32, _
                                        ByVal sSecurityGroup As String, _
                                        ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            intSecurityGroup = ReturnSecurityGroupID(sSecurityGroup, strUserName, pgParlourID)

            strSQL = "Insert Into SecureUserGroups(fkiSecureUserID, " & _
                    "fkiSecureGroupID, sSecureUserGroupDesc,LastModified,ModifiedUser) Values(" & fkiUserID & _
                    "," & intSecurityGroup & ",'" & sSecurityGroup & "',getdate(),'" & strUserName & "')"
            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "AddUserToSecurityGroup fkiUserID=(" & fkiUserID & " " & sSecurityGroup & ")")

        Catch ex As Exception
            Throw ex
        Finally
            AddUserToSecurityGroup = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function RemoveUserFromSecurityGroup(ByVal fkiUserID As Int32, _
                                    ByVal sSecurityGroup As String, _
                                    ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            intSecurityGroup = ReturnSecurityGroupID(sSecurityGroup, strUserName, pgParlourID)

            strSQL = "Delete from SecureUserGroups where fkiSecureUserID= " & _
                    fkiUserID & " and fkiSecureGroupID = " & intSecurityGroup
            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "RemoveUserFromSecurityGroup fkiUserID=(" & fkiUserID & " " & sSecurityGroup & ")")

        Catch ex As Exception
            Throw ex
        Finally
            RemoveUserFromSecurityGroup = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function UpdateDependency(ByVal intDependencyID As Int32, _
                                       ByVal FullName As String, _
                                       ByVal Surname As String, _
                                        ByVal Gender As String, _
                                        ByVal Type As String, _
                                        ByVal Date_Of_Birth As Date, _
                                        ByVal ID_number As String, _
                                        ByVal age As Int32, _
                                        ByVal Telephone As String, _
                                        ByVal Cellphone As String, _
                                        ByVal Address1 As String, _
                                        ByVal Address2 As String, _
                                        ByVal Address3 As String, _
                                        ByVal Address4 As String, _
                                        ByVal Code As String, _
                                        ByVal Premium As Double, _
                                        ByVal plan As String, _
                                        ByVal InceptionDate As Date, _
                                        ByVal CoverDate As Date, _
                                        ByVal Cover As Double, _
                                        ByVal UnderwriterSplit As Double, _
                                        ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "Update Dependencies " & _
                    " Set [Full Name]=' " & FullName & "'," & _
                    "Surname =' " & Surname & "'," & _
                    "Gender='" & Gender & "'," & _
                    "IDNumber='" & ID_number & "'," & _
                    "DependencyType='" & Type & "'," & _
                    "Age=" & age & ", " & _
                    "Telephone = '" & Telephone & "'," & _
                    " LastModified =getdate()," & _
                    " ModifiedUser ='" & strUserName & "'," & _
                    "[Date Of Birth] ='" & Date_Of_Birth.ToString("yyyy-MM-dd") & "', " & _
                    "InceptionDate ='" & InceptionDate.ToString("yyyy-MM-dd") & "', " & _
                    "CoverDate ='" & CoverDate.ToString("yyyy-MM-dd") & "', " & _
                    "Cellphone ='" & Cellphone & "'," & _
                    "Address1 = '" & Address1 & "'," & _
                    "Address2 = '" & Address2 & "'," & _
                    "Address3 = '" & Address3 & "'," & _
                    "Address4 = '" & Address4 & "'," & _
                    "Code = '" & Code & "'," & _
                    "Premium = " & (Premium / 100).ToString().Replace(",", ".") & ", " & _
                    "UnderwriterSplit = " & (UnderwriterSplit / 100).ToString().Replace(",", ".") & ", " & _
                    "Cover = " & (Cover / 100).ToString().Replace(",", ".") & ", " & _
                    "parlourid='" & pgParlourID.ToString() & "', " & _
                    "[plan] = '" & plan & "' " & _
                    "Where pkiDependentID=" & intDependencyID

            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "Update Dependent =(" & FullName & " " & Surname & "" & ID_number & ")")

        Catch ex As Exception
            Throw ex
        Finally
            UpdateDependency = blnPassed
        End Try

    End Function

    <WebMethod()> _
    Public Function UpdateDependencyClaimNumber(ByVal intDependentID As Int32, _
                                                ByVal claimnumber As String, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "Update Dependencies Set " & _
                    " LastModified =getdate()," & _
                    " ModifiedUser ='" & strUserName & "'," & _
                    "Claimnumber = '" & claimnumber & "' " & _
                    "Where pkiDependentID=" & intDependentID

            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "Update Dependent ClaimNumber intDependentID=(" & intDependentID & " " & claimnumber & ")")

        Catch ex As Exception
            Throw ex
        Finally
            UpdateDependencyClaimNumber = blnPassed
        End Try

    End Function


    <WebMethod()> _
    Public Function DeleteDependency(ByVal intDependentID As Int32, _
                                     ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "Delete from Dependencies " & _
                    "Where pkiDependentID=" & intDependentID

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "Delete Dependent pkiDependentID= (" & intDependentID & ")")
        Catch ex As Exception
            Throw ex
        Finally
            DeleteDependency = blnPassed
        End Try

    End Function

    <WebMethod()> _
    Public Function UpdateMemberClaimNumber(ByVal intMemberID As Int32, _
                                     ByVal claimnumber As String, _
                                     ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False
            strSQL = "Update Members Set " & _
                    " LastModified =getdate()," & _
                    " ModifiedUser ='" & strUserName & "'," & _
                   "Claimnumber = '" & claimnumber & "' " & _
                    "Where pkiMemberID=" & intMemberID

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "Update Member ClaimNumber intMemberID=(" & intMemberID & " " & claimnumber & ")")
        Catch ex As Exception
            Throw ex
        Finally
            UpdateMemberClaimNumber = blnPassed
        End Try

    End Function

    <WebMethod()> _
    Public Function ReturnUserSecurityGroups(ByVal intUserID As Integer, _
                                             ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "SELECT SecureGroup.sSecureGroupName, SecureUserGroups.pkiSecureUserGroups, SecureUsers.PkiUserID " & _
                "FROM SecureUsers INNER JOIN (SecureGroup INNER JOIN SecureUserGroups ON SecureGroup.pkiSecureGroupID=SecureUserGroups.fkiSecureGroupID) ON SecureUsers.PkiUserID=SecureUserGroups.fkiSecureUserID " & _
                "WHERE ((SecureUsers.PkiUserID=" & intUserID & "));"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnUserSecurityGroups = dtData
        End Try
    End Function



    <WebMethod()> _
    Public Function ReturnQuotationServiceSelecetion(ByVal iQutotationID As Integer, _
                                                     ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            dsData = Nothing
            strSQL = "SELECT QuotationServicesSelection.Quantity, FuneralServices.ServiceName, " & _
            "FuneralServices.ServiceDesc, FuneralServices.ServiceCost " & _
            "FROM FuneralServices " & _
            "INNER JOIN QuotationServicesSelection ON FuneralServices.pkiServiceID " & _
            "= QuotationServicesSelection.fkiServiceID " & _
            "WHERE QuotationServicesSelection.QuotationID = " & iQutotationID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnQuotationServiceSelecetion = dtData
        End Try
    End Function



    <WebMethod()> _
    Public Function ReturnUserFuneralServiceSelecetion(ByVal iFuneralID As Integer, _
                                                       ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "SELECT FuneralServicesSelection.pkiFuneralServiceSelectionID, " & _
            "FuneralServices.ServiceName, FuneralServices.ServiceCost, " & _
            "FuneralServicesSelection.Quantity, (FuneralServices.ServiceCost * " & _
            "FuneralServicesSelection.Quantity) AS SubTotal FROM FuneralServices " & _
            "INNER JOIN FuneralServicesSelection ON FuneralServices.pkiServiceID " & _
            "= FuneralServicesSelection.fkiServiceID " & _
            "WHERE FuneralServicesSelection.fkiFuneralID = " & iFuneralID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnUserFuneralServiceSelecetion = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnFuneralsForDailyPlanner(ByVal dtDateFrom As Date, _
                                                      ByVal dtDateTo As Date, _
                                                       ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "SELECT Funerals.pkiFuneralID, Funerals.Title, " & _
                    "Funerals.[Full Names], Funerals.Surname, " & _
                    "Funerals.DateOfFuneral, Funerals.TimeOfFuneral, " & _
                    "Funerals.FuneralCemetery, Funerals.ContactPerson, " & _
                    "Funerals.ContactPersonNumber ,Funerals.DriverAndCars FROM Funerals WHERE " & _
                    "(Funerals.DateOfFuneral Between '" & dtDateFrom.ToString("yyyy-MM-dd") & "' and '" & dtDateTo.ToString("yyyy-MM-dd") & "') and " & _
                    "Funerals.parlourid='" & pgParlourID.ToString() & "' "

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnFuneralsForDailyPlanner = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnOverAge(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Exec allOverAge '" & pgParlourID.ToString() & "'"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnOverAge = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnOutStandingPayments(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Exec OutstandingPayments1 '" & pgParlourID.ToString() & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnOutStandingPayments = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnOutStandingPaymentsReport(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Exec OutstandingPayments1 '" & pgParlourID.ToString() & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReturnOutStandingPaymentsReport = dtData
        End Try
    End Function


    <WebMethod()> _
  Public Function CheckUserAccess(ByVal strSecurityGroupName As String, _
                                  ByVal username As String, _
                                  ByVal password As String, _
                                  ByVal OverRideAccess As Boolean, _
                                  ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try

            strSQL = "Exec dbo.LogUserIn @UserName='" & DL.ReplaceDBString(username) & "' , @Password ='" & DL.ReplaceDBString(password) & "' , @parlourid='" & pgParlourID.ToString() & "' "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            CheckUserAccess = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMember(ByVal iPkiMemberID As Int32, ByVal MemberNumber As String, _
                               ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False

            If MemberNumber = "" Then
                strSQL = "Select Members.*,[Spouse]+[Children]+[Adults] maxPeople " & _
                "from Members,plans where fkiPlanID=pkiPlanID and Members.parlourid='" & _
                pgParlourID.ToString & "'  and (pkiMemberID = " & _
                iPkiMemberID & ")"
            Else
                strSQL = "Select Members.*,[Spouse]+[Children]+[Adults] maxPeople " & _
              "from Members,plans where fkiPlanID=pkiPlanID and Members.parlourid='" & _
              pgParlourID.ToString & "'  and (pkiMemberID = " & _
              iPkiMemberID & " or Memebernumber='" & MemberNumber & "')"
            End If

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReadMember = dtData
        End Try
    End Function




    <WebMethod()> _
    Public Function ReadMemberTotalPremium(ByVal MemberNumber As String, _
                                           ByVal strUserName As String, ByVal pgParlourID As String) As Double
        Dim dblPremium As Double = 0
        Try


            strSQL = "SELECT Members.MemeberNumber, " & _
                        "Plans.PlanSubscription+sum(coalesce(Dependencies.Premium,0)) AS Premium " & _
                        "FROM (Plans INNER JOIN Members ON Plans.pkiPlanID=Members.fkiPlanID) " & _
                        "Left outer JOIN Dependencies ON Members.pkiMemberID= " & _
                        "Dependencies.fkiMemberID and (Dependencies.Claimnumber Is null or Dependencies.Claimnumber='') " & _
                        "WHERE Members.parlourid='" & pgParlourID & "' and ( Members.MemeberNumber = '" & _
                        MemberNumber & "') GROUP BY Members.MemeberNumber, Plans.PlanSubscription"


            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables.Count < 0 Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count < 0 Then
                Exit Try
            End If

            If Not IsDBNull(dsData.Tables(0).Rows(0).Item(1)) Then
                dblPremium = dsData.Tables(0).Rows(0).Item(1)
            Else
                dblPremium = ReturnMemberPlanDetails(MemberNumber, pgParlourID).Tables(0).Rows(0).Item(1)
            End If


        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberTotalPremium = dblPremium
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMemberTotalÇover(ByVal MemberNumber As String, _
                                         ByVal strUserName As String, ByVal pgParlourID As String) As Double
        Dim dblPremium As Double
        Try


            strSQL = "SELECT Members.MemeberNumber, " & _
                        "Plans.PlanSubscription+sum(Dependencies.Premium) AS Premium " & _
                        "FROM (Plans INNER JOIN Members ON Plans.pkiPlanID=Members.fkiPlanID) " & _
                        "Left outer JOIN Dependencies ON Members.pkiMemberID=Dependencies.fkiMemberID " & _
                        "WHERE (Dependencies.Claimnumber Is null and Members.MemeberNumber = '" & _
                        MemberNumber & "') GROUP BY Members.MemeberNumber, Plans.PlanSubscription"

            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count < 0 Then
                Exit Try
            End If

            If Not IsDBNull(dsData.Tables(0).Rows(0).Item(1)) Then
                dblPremium = dsData.Tables(0).Rows(0).Item(1)
            Else
                dblPremium = ReturnMemberPlanDetails(MemberNumber, pgParlourID).Tables(0).Rows(0).Item(1)
            End If


        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberTotalÇover = dblPremium
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadFuneral(ByVal iPkiFuneralID As Int32, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select * from Funerals where pkiFuneralID = " & iPkiFuneralID

            dtData.Clear()
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReadFuneral = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMemberIntoDatatable(ByVal MemberNo As String, _
                                            ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec [Readmember] '" & MemberNo & "','" & pgParlourID.ToString & "'"

            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberIntoDatatable = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadFuneralInvoiceIntoDatatable(ByVal FuneralID As Int32, _
                                                     ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec [ReadFuneralInvoice] " & FuneralID & ",'" & pgParlourID.ToString & "'"

            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReadFuneralInvoiceIntoDatatable = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadQuoteInvoiceIntoDatatable(ByVal quoteID As Int32, _
                                                  ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec [ReadQuoteInvoice] " & quoteID & ",'" & pgParlourID.ToString & "'"

            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReadQuoteInvoiceIntoDatatable = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMemberPaymentsIntoDatatable(ByVal MemberNo As String, _
                                                    ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec [ReadMemberPayments] '" & MemberNo & "','" & pgParlourID.ToString & "'"

            dsData = Nothing
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberPaymentsIntoDatatable = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMemberClaimsIntoDatatableByClaimNo(ByVal ClaimNo As String, _
                                                    ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec [ReadMemberClaim] '" & ClaimNo & "','" & pgParlourID.ToString & "'"

            dsData = Nothing
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberClaimsIntoDatatableByClaimNo = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMemberPolicybynumbersIntoDatatable(ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec [Policybynumbers] '" & pgParlourID.ToString & "'"

            dsData = Nothing
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberPolicybynumbersIntoDatatable = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMemberPolicybyAgeIntoDatatable(ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec dbo.PolicyByAge '" & pgParlourID.ToString & "'"

            dsData = Nothing
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberPolicybyAgeIntoDatatable = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadMemberClaimsIntoDatatable(ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            strSQL = "Exec dbo.PolicyByClaims '" & pgParlourID.ToString & "'"

            dsData = Nothing
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReadMemberClaimsIntoDatatable = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReadDependant(ByVal iPkiDependantID As Int32, _
                                  ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select * from Dependencies where pkiDependentID = " & iPkiDependantID

            dtData = Nothing
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReadDependant = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnPlanDetails(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            strSQL = "Select PlanName,PlanSubscription From Plans where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanDetails = dtData
        End Try
    End Function

    <WebMethod()> _
   Public Function ReturnMemberPlanDetails(ByVal strMemberNo As String, _
                                             ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try

            dtData = Nothing
            strSQL = "SELECT  Plans.PlanName, Plans.PlanSubscription, Plans.Spouse, Plans.Children, " & _
                    "            Plans.Adults, Plans.WaitingPeriod, Plans.Cover,Plans.JoiningFee ,  " & _
                    "            Members.PolicyStatus ,  max(coalesce(I.PaidUntil,getdate())) NextPaymentDate " & _
                    "            from Members  INNER JOIN Plans ON Plans.[pkiPlanID] = Members.[fkiPlanID]  " & _
                    "				left join Invoices I ON Members.pkiMemberID= I.MemberID " & _
                    "Where Members.parlourid='" & pgParlourID & "' and Members.MemeberNumber='" & strMemberNo & "' " & _
                    "           group by " & _
                    "			Plans.PlanName, Plans.PlanSubscription, Plans.Spouse, Plans.Children, " & _
                    "            Plans.Adults, Plans.WaitingPeriod, Plans.Cover,Plans.JoiningFee ,  " & _
                    "            Members.PolicyStatus "


            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberPlanDetails = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnSubcriptionByPlanName(ByVal PlanName As String, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As Decimal
        Dim SubscriptionAmount As Decimal

        Try
            dsData.Clear()
            strSQL = "Select PlanSubscription From Plans where PlanName='" & PlanName & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try
            SubscriptionAmount = Convert.ToDecimal(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnSubcriptionByPlanName = SubscriptionAmount
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnUnderwriterByPlanName(ByVal PlanName As String, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim PlanUnderwriter As String

        Try
            dsData.Clear()
            strSQL = "Select coalesce (PlanUnderwriter,'None' ) From Plans where PlanName='" & PlanName & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try
            PlanUnderwriter = dsData.Tables(0).Rows(0).Item(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnUnderwriterByPlanName = PlanUnderwriter
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnPlanIDByPlanName(ByVal strPlanName As String, _
                                           ByVal strUserName As String, ByVal pgParlourID As String) As Int32
        Dim intPlanID As Int32

        Try
            dsData.Clear()
            strSQL = "Select Top 1 pkiPlanID From Plans where PlanName='" & strPlanName & "' and parlourid='" & pgParlourID.ToString & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                intPlanID = 0
                Exit Try
            End If

            intPlanID = Convert.ToDecimal(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanIDByPlanName = intPlanID
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnPlanNameByPlanID(ByVal intPlanID As Integer, _
                                           ByVal strUserName As String, ByVal pgParlourID As String) As String

        Dim strPlanName As String = ""

        Try
            dsData.Clear()
            strSQL = "Select Top 1 PlanName From Plans where pkiPlanID=" & intPlanID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                strPlanName = ""
                Exit Try
            End If

            strPlanName = dsData.Tables(0).Rows(0).Item(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanNameByPlanID = strPlanName
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnPlanWaitingPeriodByPlanID(ByVal intPlanID As Integer, _
                                                    ByVal strUserName As String, ByVal pgParlourID As String) As Integer


        Dim intWaitingPeriod As Integer = 6

        Try
            dsData.Clear()
            strSQL = "Select Top 1 WaitingPeriod From Plans where pkiPlanID=" & intPlanID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                intWaitingPeriod = 6
                Exit Try
            End If

            If Not IsDBNull(dsData.Tables(0).Rows(0).Item(0)) Then intWaitingPeriod = CInt(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanWaitingPeriodByPlanID = intWaitingPeriod
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnPlanWaitingPeriodByPlanName(ByVal intPlanID As String, _
                                                      ByVal strUserName As String, ByVal pgParlourID As String) As Integer


        Dim intWaitingPeriod As Integer = 6

        Try
            dsData.Clear()
            strSQL = "Select Top 1 WaitingPeriod From Plans where PlanName='" & intPlanID & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                intWaitingPeriod = 6
                Exit Try
            End If

            If Not IsDBNull(dsData.Tables(0).Rows(0).Item(0)) Then intWaitingPeriod = CInt(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanWaitingPeriodByPlanName = intWaitingPeriod
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnPlanCoverByPlanID(ByVal intPlanID As Integer, _
                                            ByVal strUserName As String, ByVal pgParlourID As String) As String

        Dim strPlanName As String = ""

        Try
            dsData.Clear()
            strSQL = "Select Top 1 Cover From Plans where pkiPlanID=" & intPlanID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                strPlanName = ""
                Exit Try
            End If

            strPlanName = dsData.Tables(0).Rows(0).Item(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnPlanCoverByPlanID = strPlanName
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnWaitingPeriodByPlanID(ByVal intPlanID As Integer, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As Int32

        Dim intWaitingPeriod As Int32 = 0

        Try
            dsData.Clear()
            strSQL = "Select Top 1 WaitingPeriod From Plans where pkiPlanID=" & intPlanID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                intWaitingPeriod = 0
                Exit Try
            End If

            intWaitingPeriod = CInt(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnWaitingPeriodByPlanID = intWaitingPeriod
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnServiceIDByServiceName(ByVal strServiceName As String, _
                                                 ByVal strUserName As String, ByVal pgParlourID As String) As Int32
        Dim intServiceID As Int32

        Try
            dsData.Clear()
            strSQL = "Select Top 1 pkiServiceID From FuneralServices where ServiceName='" & strServiceName & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                intServiceID = 0
                Exit Try
            End If

            intServiceID = Convert.ToDecimal(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnServiceIDByServiceName = intServiceID
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnQTYByServiceName(ByVal strServiceName As String, _
                                           ByVal strUserName As String, ByVal pgParlourID As String) As Int32
        Dim intQTY As Int32

        Try
            dsData.Clear()
            strSQL = "Select Top 1 QTY From FuneralServices where ServiceName='" & strServiceName & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                intQTY = 0
                Exit Try
            End If

            intQTY = Convert.ToInt32(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnQTYByServiceName = intQTY
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnServiceDescByServiceID(ByVal strServiceName As String, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim strServiceDesc As String = ""

        Try
            dsData.Clear()
            strSQL = "Select Top 1 ServiceDesc From FuneralServices where ServiceName='" & strServiceName & "'"
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                Exit Try
            End If

            strServiceDesc = dsData.Tables(0).Rows(0).Item(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnServiceDescByServiceID = strServiceDesc
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnServiceDescByServiceID2(ByVal strServiceName As String, _
                                                  ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim strServiceDesc As String = ""

        Try
            dsData.Clear()
            strSQL = "Select Top 1 ServiceDesc + '(' + cast (QTY as varchar) + ')' Service From FuneralServices where ServiceName='" & strServiceName & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try

            If dsData.Tables(0).Rows.Count = 0 Then
                Exit Try
            End If

            strServiceDesc = dsData.Tables(0).Rows(0).Item(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnServiceDescByServiceID2 = strServiceDesc
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnSocietyIDBySocietyName(ByVal strSocietyName As String, _
                                                 ByVal strUserName As String, ByVal pgParlourID As String) As Int32
        Dim intSocietyID As Int32

        Try
            dsData.Clear()
            strSQL = "Select Top 1 pkiSocietyID From Societies where SocietyName='" & strSocietyName & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)
            If IsNothing(dsData) Then Exit Try
            intSocietyID = Convert.ToDecimal(dsData.Tables(0).Rows(0).Item(0))

        Catch ex As Exception
            Throw ex
        Finally
            ReturnSocietyIDBySocietyName = intSocietyID
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnBeneficiaryByMemberID(ByVal intMemberID As Int32, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Exec ReturnDependencies " & intMemberID


            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

            blnPassed = True
        Catch ex As Exception
            Throw ex
        Finally
            ReturnBeneficiaryByMemberID = dtData
        End Try

    End Function

    <WebMethod()> _
    Public Function ReturnDependnciesByMemberID(ByVal intMemberID As Int32, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select * From Dependencies where fkiMemberID=" & intMemberID


            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

            blnPassed = True
        Catch ex As Exception
            Throw ex
        Finally
            ReturnDependnciesByMemberID = dtData
        End Try

    End Function

    <WebMethod()> _
    Public Function ReturnSpouseByMemberID(ByVal intMemberID As Int32, _
                                           ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try

            dtData = Nothing

            strSQL = "Select * From Dependencies where DependencyType='Spouse' and fkiMemberID=" & intMemberID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnSpouseByMemberID = dtData
        End Try

    End Function

    <WebMethod()> _
    Public Function ReturnDependantsByMemberID(ByVal intMemberID As Int32, _
                                               ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try

            dtData = Nothing

            strSQL = "Select * From Dependencies where DependencyType <>'Spouse' and Premium <= 0 and fkiMemberID=" & intMemberID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReturnDependantsByMemberID = dtData
        End Try

    End Function

    <WebMethod()> _
    Public Function ReturnExtendedByMemberID(ByVal intMemberID As Int32, _
                                             ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try

            dtData = Nothing

            strSQL = "Select * From Dependencies where DependencyType <>'Spouse' and Premium>0 and fkiMemberID=" & intMemberID


            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnExtendedByMemberID = dtData
        End Try

    End Function

    <WebMethod()> _
    Public Function ReturnActiveDependnciesByMemberID(ByVal intMemberID As Int32, _
                                                      ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select * From Dependencies where (Claimnumber is null or Claimnumber='') and fkiMemberID=" & intMemberID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

            blnPassed = True
        Catch ex As Exception
            Throw ex
        Finally
            ReturnActiveDependnciesByMemberID = dtData
        End Try

    End Function

    <WebMethod()> _
   Public Function ReturnMemberNumber(ByVal MemberID As String, _
                                      ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim strMemberNumber As String = String.Empty

        Try
            strSQL = "Select MemeberNumber From Members Where pkiMemberID= " & MemberID
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            strMemberNumber = dsData.Tables(0).Rows(0).Item(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberNumber = strMemberNumber
        End Try
    End Function

    <WebMethod()> _
    Public Function MemberExistFromMemberNumber(ByVal MemberNo As String, _
                                                ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim strMemberNumber As String = String.Empty

        Try
            strSQL = "Select pkiMemberID From Members Where MemeberNumber= '" & MemberNo & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count > 0 Then
                strMemberNumber = dsData.Tables(0).Rows(0).Item(0)
            Else
                strMemberNumber = ""
            End If


        Catch ex As Exception
            Throw ex
        Finally
            MemberExistFromMemberNumber = strMemberNumber
        End Try
    End Function

    <WebMethod()> _
    Public Function MemberIDExistFromIDNumber(ByVal IDnumber As String, _
                                              ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim strMemberNumber As String = String.Empty

        Try
            strSQL = "Select pkiMemberID from Members  where len([ID Number])=13 and [ID Number]='" & IDnumber & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count > 0 Then
                strMemberNumber = dsData.Tables(0).Rows(0).Item(0)
            Else
                strMemberNumber = ""
            End If


        Catch ex As Exception
            Throw ex
        Finally
            MemberIDExistFromIDNumber = strMemberNumber
        End Try
    End Function


    <WebMethod()> _
    Public Function DependantExistFromIDNumber(ByVal IDNumber As String, _
                                               ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim strMemberNumber As String = String.Empty

        Try
            strSQL = "select pkiDependentID from Dependencies where IDNumber= '" & IDNumber & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count > 0 Then
                strMemberNumber = dsData.Tables(0).Rows(0).Item(0)
            Else
                strMemberNumber = ""
            End If


        Catch ex As Exception
            Throw ex
        Finally
            DependantExistFromIDNumber = strMemberNumber
        End Try
    End Function


    <WebMethod()> _
    Public Function ReturnIDNumber(ByVal IDNumber As String, _
                                   ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim ID_number As String = String.Empty

        Try
            strSQL = "Select Top 1 [ID Number] From Funerals Where [ID Number]= '" & IDNumber & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count > 0 Then
                ID_number = dsData.Tables(0).Rows(0).Item(0)
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnIDNumber = ID_number
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnMemberIDNumber(ByVal IDNumber As String, _
                                         ByVal strUserName As String, ByVal pgParlourID As String) As String
        Dim ID_number As String = String.Empty

        Try
            strSQL = "Select Top 1 [ID Number] From Members Where [ID Number]= '" & IDNumber & "' and parlourid='" & pgParlourID.ToString() & "' "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count > 0 Then
                ID_number = dsData.Tables(0).Rows(0).Item(0)
                Exit Try
            End If

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberIDNumber = ID_number
        End Try
    End Function

    <WebMethod()> _
    Public Function LogUserIn(ByVal userID As String, ByVal password As String, _
                              ByVal blnSaveUserAccessGroups As Boolean, _
                              ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            blnPassed = False
            DL.pblnSQL = True
            DL.pstrConnectionString = strConn
            If userID = "administrator" And password = "unplugg1t" Then
                blnPassed = True
                Exit Try
            End If

            strSQL = "Exec dbo.LogUserIn @UserName='" & DL.ReplaceDBString(userID) & "' , @Password ='" & DL.ReplaceDBString(password) & "' , @parlourid='" & pgParlourID.ToString() & "' "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            LogUserIn = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function AddPayments2(ByVal piPkiMemberID As Integer, _
                                ByVal dAmount As Double, _
                                ByVal strRecievedBy As String, _
                                ByVal strPaidBy As String, _
                                ByVal strNotes As String, _
                                ByVal strMemberNumber As String, _
                                ByVal dtPaymentDate As Date, _
                                ByVal dtNextPayment As Date, _
                                ByVal strbranch As String, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As String
        Try
            blnPassed = False

            If SearchMemberIDByMemberNo(strMemberNumber, strUserName, pgParlourID).Rows.Count > 0 And piPkiMemberID <> 0 Then
                If Now.ToString("yyyy-MM-dd") = dtPaymentDate.ToString("yyyy-MM-dd") Then
                    strSQL = "Insert Into Invoices(" & _
                           "MemberID,DatePaid,AmountPaid,RecievedBy," & _
                           "PaidBy,Notes,parlourid, PaymentBranch,LastModified,ModifiedUser,PaidUntil) values(" & _
                           piPkiMemberID & ", getdate() ," & dAmount & _
                           ",'" & strRecievedBy & "','" & strPaidBy & _
                           "','" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & _
                           strUserName & "', '" & dtNextPayment.ToString("yyyy-MM-dd") & "')"
                Else
                    strSQL = "Insert Into Invoices(" & _
                           "MemberID,DatePaid,AmountPaid,RecievedBy," & _
                           "PaidBy,Notes,parlourid, PaymentBranch,LastModified,ModifiedUser,PaidUntil) values(" & _
                           piPkiMemberID & ", '" & dtPaymentDate.ToString("yyyy-MM-dd") & "' ," & dAmount & _
                           ",'" & strRecievedBy & "','" & strPaidBy & _
                           "','" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & _
                           strUserName & "', '" & dtNextPayment.ToString("yyyy-MM-dd") & "')"

                End If

                ''     blnPassed = DL.ExecInsertDatabase(strSQL)

                ''   strSQL = "Exec UpdateMemberPolicy " & piPkiMemberID
                ''  blnPassed = DL.ExecInsertDatabase(strSQL)
                ''  AddAudit(strUserName, pgParlourID, "AddPayments  MemberNumber=(" & strMemberNumber & ")")
            End If

        Catch ex As Exception
            Throw ex
        Finally
            AddPayments2 = strSQL
        End Try

    End Function

    <WebMethod()> _
    Public Function AddReversalPayments(ByVal piPkiMemberID As Integer, _
                                ByVal dAmount As Double, _
                                ByVal strRecievedBy As String, _
                                ByVal strPaidBy As String, _
                                ByVal strNotes As String, _
                                ByVal strMemberNumber As String, _
                                ByVal dtPaymentDate As Date, _
                                ByVal dtNextPayment As Date, _
                                ByVal strbranch As String, _
                                ByVal intInvoiceID As Int32, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim invNumber As Integer

        Try
            blnPassed = False

            strSQL = "select  coalesce(max(InvNumber),0) + 1 from [dbo].[Invoices] Where parlourid='" & _
          pgParlourID.ToString() & "'  "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count <= 0 Then
                Exit Try
            End If

            invNumber = CInt(dsData.Tables(0).Rows(0).Item(0))


            If SearchMemberIDByMemberNo(strMemberNumber, strUserName, pgParlourID).Rows.Count > 0 And piPkiMemberID <> 0 Then
                If Now.ToString("yyyy-MM-dd") = dtPaymentDate.ToString("yyyy-MM-dd") Then
                    strSQL = "Insert Into Invoices(" & _
                           "MemberID,DatePaid,AmountPaid,RecievedBy," & _
                           "PaidBy,Notes,parlourid, PaymentBranch,LastModified,ModifiedUser,PaidUntil,InvNumber) values(" & _
                           piPkiMemberID & ", getdate() ," & (dAmount / 100).ToString().Replace(",", ".") & _
                           ",'" & strRecievedBy & "','" & strPaidBy & _
                           "','" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & _
                           strUserName & "', '" & dtNextPayment.ToString("yyyy-MM-dd") & "'," & invNumber & ")"
                Else
                    strSQL = "Insert Into Invoices(" & _
                           "MemberID,DatePaid,AmountPaid,RecievedBy," & _
                           "PaidBy,Notes,parlourid, PaymentBranch,LastModified,ModifiedUser,PaidUntil,InvNumber) values(" & _
                           piPkiMemberID & ", '" & dtPaymentDate.ToString("yyyy-MM-dd") & "' ," & (dAmount / 100).ToString().Replace(",", ".") & _
                           ",'" & strRecievedBy & "','" & strPaidBy & _
                           "','" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & _
                           strUserName & "', '" & dtNextPayment.ToString("yyyy-MM-dd") & "'," & invNumber & ")"

                End If

                blnPassed = DL.ExecInsertDatabase(strSQL)

                strSQL = "Exec UpdateMemberPolicy " & piPkiMemberID
                blnPassed = DL.ExecInsertDatabase(strSQL)
                AddAudit(strUserName, pgParlourID, "AddPayments  MemberNumber=(" & strMemberNumber & ")")
            End If

        Catch ex As Exception
            Throw ex
        Finally
            AddReversalPayments = blnPassed
        End Try

    End Function


    <WebMethod()> _
    Public Function AddPayments(ByVal piPkiMemberID As Integer, _
                                ByVal dAmount As Double, _
                                ByVal strRecievedBy As String, _
                                ByVal strPaidBy As String, _
                                ByVal strNotes As String, _
                                ByVal strMemberNumber As String, _
                                ByVal dtPaymentDate As Date, _
                                ByVal dtNextPayment As Date, _
                                ByVal strbranch As String, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim invNumber As Integer

        Try
            blnPassed = False

            strSQL = "select  coalesce(max(InvNumber),0) + 1 from [dbo].[Invoices] Where parlourid='" & _
          pgParlourID.ToString() & "'  "
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count <= 0 Then
                Exit Try
            End If

            invNumber = CInt(dsData.Tables(0).Rows(0).Item(0))


            If SearchMemberIDByMemberNo(strMemberNumber, strUserName, pgParlourID).Rows.Count > 0 And piPkiMemberID <> 0 Then
                If Now.ToString("yyyy-MM-dd") = dtPaymentDate.ToString("yyyy-MM-dd") Then
                    strSQL = "Insert Into Invoices(" & _
                           "MemberID,DatePaid,AmountPaid,RecievedBy," & _
                           "PaidBy,Notes,parlourid, PaymentBranch,LastModified,ModifiedUser,PaidUntil,InvNumber) values(" & _
                           piPkiMemberID & ", getdate() ," & (dAmount / 100).ToString().Replace(",", ".") & _
                           ",'" & strRecievedBy & "','" & strPaidBy & _
                           "','" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & _
                           strUserName & "', '" & dtNextPayment.ToString("yyyy-MM-dd") & "'," & invNumber & ")"
                Else
                    strSQL = "Insert Into Invoices(" & _
                           "MemberID,DatePaid,AmountPaid,RecievedBy," & _
                           "PaidBy,Notes,parlourid, PaymentBranch,LastModified,ModifiedUser,PaidUntil,InvNumber) values(" & _
                           piPkiMemberID & ", '" & dtPaymentDate.ToString("yyyy-MM-dd") & "' ," & (dAmount / 100).ToString().Replace(",", ".") & _
                           ",'" & strRecievedBy & "','" & strPaidBy & _
                           "','" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & _
                           strUserName & "', '" & dtNextPayment.ToString("yyyy-MM-dd") & "'," & invNumber & ")"

                End If

                blnPassed = DL.ExecInsertDatabase(strSQL)

                strSQL = "Exec UpdateMemberPolicy " & piPkiMemberID
                blnPassed = DL.ExecInsertDatabase(strSQL)
                AddAudit(strUserName, pgParlourID, "AddPayments  MemberNumber=(" & strMemberNumber & ")")
            End If

        Catch ex As Exception
            Throw ex
        Finally
            AddPayments = blnPassed
        End Try

    End Function

    <WebMethod()> _
    Public Function AddLoanAndPayments(ByVal dAmount As Double, _
                            ByVal strActionby As String, _
                            ByVal strIDNumber As String, _
                            ByVal strFullname As String, _
                            ByVal intloan As Integer, _
                            ByVal strNotes As String, _
                            ByVal strMemberNumber As String, _
                            ByVal strbranch As String, _
                            ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "Insert Into Loans(" & _
                        "DateCreated,UserID,IDNumber,FullName," & _
                        "Loan,Amount,Notes, Parlourid,PaymentBranch,,LastModified,ModifiedUser) values(" & _
                         "getdate(),'" & strActionby & "','" & strIDNumber & _
                        "','" & strFullname & "'," & intloan & "," & (dAmount / 100).ToString().Replace(",", ".") & _
                        ",'" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "AddLoanAndPayments strIDNumber=(" & strIDNumber & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddLoanAndPayments = blnPassed
        End Try

    End Function

    <WebMethod()> _
    Public Function AddGroupPayments(ByVal dAmount As Double, _
                               ByVal strRecievedBy As String, _
                               ByVal strPaidBy As String, _
                               ByVal strNotes As String, _
                               ByVal strMemberNumber As String, _
                               ByVal strbranch As String, _
                               ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False


            strSQL = "Insert Into GroupInvoices(" & _
                        "GroupID,DatePaid,AmountPaid,RecievedBy," & _
                        "PaidBy,Notes,parlourid, PaymentBranch,LastModified,ModifiedUser) values(" & _
                        ReturnSocietyIDBySocietyName(strMemberNumber, strUserName, pgParlourID) & ", getdate()," & (dAmount / 100).ToString().Replace(",", ".") & _
                        ",'" & strRecievedBy & "','" & strPaidBy & _
                        "','" & strNotes & "','" & pgParlourID.ToString & "','" & strbranch & "',getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)
            AddAudit(strUserName, pgParlourID, "AddGroupPayments SocietyName=(" & strMemberNumber & ")")


        Catch ex As Exception
            Throw ex
        Finally
            AddGroupPayments = blnPassed
        End Try

    End Function

    <WebMethod()> _
    Public Function AddUpdateExpense(ByVal UserID As String, _
                                     ByVal dtExpensdate As Date, _
                                     ByVal fkiExpenseCategoryID As String, _
                                    ByVal ExpenseNotes As String, _
                                     ByVal dAmount As Double, _
                                   ByVal fkiVendorID As Integer, _
                                    ByVal ExpenseBranch As String, _
                                    ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim pkiExpenseCategoryID As String
        Try
            blnPassed = False
            strSQL = "Select Top 1 pkiExpenseCategoryID from [ExpenseCategories] Where parlourid='" & _
            pgParlourID.ToString() & "' and [Category]='" & fkiExpenseCategoryID & "'"
            dsData.Clear()
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count <= 0 Then
                Exit Try
            End If

            pkiExpenseCategoryID = dsData.Tables(0).Rows(0).Item(0)


            strSQL = "Insert Into Expenses(" & _
                        "DateCreated,UserID,ExpenseDate,fkiExpenseCategoryID," & _
                        "fkiVendorID,ExpenseNotes,ExpenseAmount, ExpenseBranch,parlourid,LastModified,ModifiedUser) values(" & _
                        " getdate(),'" & UserID & "',' " & dtExpensdate.ToString("yyyy-MM-dd") & "', " & pkiExpenseCategoryID & _
                        "," & fkiVendorID & ", '" & ExpenseNotes & "' ," & (dAmount / 100).ToString().Replace(",", ".") & _
                        ", '" & ExpenseBranch & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "AddUpdateExpense   ExpenseNotes=(" & ExpenseNotes & ")")
        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateExpense = blnPassed
        End Try

    End Function

    <WebMethod()> _
    Public Function LoadPlanTypeCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select PlanName From Plans where parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadPlanTypeCombo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadDependencyTypeCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select DepStatus_Code From DependencyType"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)
        Catch ex As Exception
            Throw ex
        Finally
            LoadDependencyTypeCombo = dtData
        End Try
    End Function


    <WebMethod()> _
    Public Function LoadFuenralServicesCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False

            strSQL = "SELECT ServiceName FROM FuneralServices where parlourid='" & pgParlourID.ToString() & "' "

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadFuenralServicesCombo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadMembersCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select MemeberNumber + ':-'  + ' ' + Title + " & _
            "' ' + Surname + ' ' +  [Full Names]  From Members Where MemberType='Main' and parlourid='" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadMembersCombo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadVendor(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "SELECT  [VendorName]" & _
                        "FROM   [Vendors] " & _
                        "where [parlourid]='" & pgParlourID.ToString & "'"
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadVendor = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadExpenseCategory(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "SELECT [Category] " & _
                        "FROM  [ExpenseCategories] " & _
                        "where [parlourid]='" & pgParlourID.ToString & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadExpenseCategory = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadAgentsCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select 'All Agents' union all Select distinct M.Agent + ':-'  + ' ' + A.Title + ' ' + A.Surname + ' ' +  A.[Full Names] " & _
                    "From Members M " & _
                    "inner join Members A on M.Agent=A.MemeberNumber " & _
                    "Where M.MemberType='Main' and M.Agent is not null and m.[parlourid]='" & pgParlourID.ToString & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadAgentsCombo = dtData
        End Try
    End Function

    <WebMethod()> _
   Public Function LoadBrokerClientCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "[dbo].[ReturnBrokerClients] @BrokerID='" & pgParlourID.ToString & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadBrokerClientCombo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadBranchCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "ReturnBranches '" & pgParlourID.ToString() & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadBranchCombo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function LoadUnderwriterCombo(ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Exec ReturnUnderwriter '" & pgParlourID.ToString() & "' "
            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            LoadUnderwriterCombo = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function GenerateReportAsPerCriteria(ByVal intReportType As Int32, _
                                                 ByVal intSocietyID As Int32, _
                                                 ByVal intPlanID As Int32, _
                                                 ByVal dtFrom As Date, _
                                                 ByVal dtTo As Date, _
                                                 ByVal strMemberNumber As String, _
                                                 ByVal strSociety As String, _
                                                 ByVal strPlan As String, _
                                                 ByVal Branch As String, _
                                                 ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Dim rptType As Int32

        Try
            blnPassed = False
            If intReportType < 6 Then
                strSQL = "Select distinct M.MemeberNumber As [MemeberNo],   " & _
"S.SocietyName As [Society],    " & _
"P.PlanName As [Plan],   " & _
"'R ' +cast (P.Cover as varchar) Cover,    " & _
"M.[Full Names] As [Name],    " & _
"M.Surname As [Surname],    " & _
"M.Gender As [Gender],     " & _
"M.[ID Number] As [IDNo],     " & _
"cast(datepart(year,(M.[Date Of Birth])) as varchar)+ '-' +  " & _
"right('0'+ cast(datepart(month,(M.[Date Of Birth])) as varchar),2)+ '-' + " & _
"right('0'+ cast(datepart(day,(M.[Date Of Birth])) as varchar),2)   " & _
"As [DateOfBirth],  " & _
"datediff(day,M.[Date Of Birth],getdate())/365  'Age',  " & _
"'Main member' 'Type',  " & _
"M.Telephone As [TelNo],    " & _
"M.Cellphone As [CellNo],    " & _
"M.Address1 As [Address1],   " & _
"M.Address2 As [Address2],   " & _
"M.Address3 As [Address3], " & _
"M.Address4 As [Address4],  " & _
"M.Code As [Code],     " & _
"M.MemberBranch, " & _
"M.PolicyStatus As [PolicyStatus]     " & _
"FROM Members M      " & _
"INNER JOIN Plans P on    " & _
"P.pkiPlanID = M.fkiPlanID   " & _
"left JOIN Societies S     " & _
"ON S.SocietyName=M.MemberSociety "


                rptType = 1
            ElseIf intReportType = 10 Then
                strSQL = "SELECT distinct Quotations.ContactTitle, Quotations.ContactFirstName, Quotations.ContactLastName, Quotations.TelNumber, Quotations.CellNumber, Quotations.DateOfQuotation, (FuneralServices.ServiceCost*QuotationServicesSelection.Quantity) AS SubTotal, ([QuotationDiscounts].[Amount])  AS [% Discount], ([QuotationDiscounts].[Amount]*([FuneralServices].[ServiceCost]*[QuotationServicesSelection].[Quantity])/100) AS [DiscountAmount], ([FuneralServices].[ServiceCost]*[QuotationServicesSelection].[Quantity])-([QuotationDiscounts].[Amount]*([FuneralServices].[ServiceCost]*[QuotationServicesSelection].[Quantity])/100) AS Total  " & _
                        " FROM Quotations INNER JOIN QuotationServicesSelection ON Quotations.QuotationID = QuotationServicesSelection.fkiServiceID	INNER JOIN FuneralServices ON QuotationServicesSelection.fkiServiceID =FuneralServices.pkiServiceID left JOIN QuotationDiscounts ON Quotations.QuotationID = QuotationDiscounts.QuotationID "
                rptType = 3

            Else

                strSQL = "SELECT distinct Members.MemeberNumber,  " & _
                        "Invoices.InvoiceID [ReceiptNr], " & _
                    "Members.[Full Names] As Name,  " & _
                    "Members.Surname,  " & _
                    "Invoices.DatePaid,  " & _
                    "Invoices.AmountPaid,  " & _
                    "Invoices.RecievedBy,  " & _
                    "Invoices.PaidBy,  " & _
                    "Invoices.Notes," & _
                    "Plans.PlanSubscription Premium,  " & _
                    "case when Plans.UnderwriterSplit<>0 then ((Plans.UnderwriterSplit) /(Plans.PlanSubscription)  * Invoices.AmountPaid) else 0 END Underwriter, " & _
                    "case when Plans.ManagerSplit<>0 then  ((Plans.ManagerSplit) /(Plans.PlanSubscription)  * Invoices.AmountPaid) else 0 END Company ,  " & _
                    "case when Plans.AgentSplit<>0 then ((Plans.AgentSplit) /(Plans.PlanSubscription)  * Invoices.AmountPaid) else 0 END Agent,   " & _
                    "Invoices.PaymentBranch  " & _
                    "FROM Invoices INNER JOIN " & _
                    "Members ON Members.pkiMemberID = Invoices.MemberID and Members.parlourid='" & pgParlourID.ToString() & "' " & _
                     "INNER JOIN Plans ON Plans.pkiPlanID = Members.fkiPlanID "


                rptType = 2
            End If
            Select Case intReportType
                Case Is = 1 ' All Main Members


                    If Branch = "Default" Then
                        strSQL = "exec allmembers '" & pgParlourID.ToString() & "','All'"
                    Else
                        strSQL = "exec allmembers '" & pgParlourID.ToString() & "','" & Branch & "'"

                    End If

                    With Now
                        strFileName = "" & "AllMembers As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 2 ' Members By Society
                    strSQL = strSQL & "Where S.SocietyName='" & _
                    strSociety & "' And  M.MemberType='Main' and M.active=1 and " & _
                    "M.parlourid='" & pgParlourID.ToString() & "' "

                    With Now
                        strFileName = "" & "MembersBySociety As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 3
                    If Branch = "Default" Then
                        strSQL = "exec allmembers '" & pgParlourID.ToString() & "','All','" & _
                            dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "'"
                    Else
                        strSQL = "exec allmembers '" & pgParlourID.ToString() & "','" & Branch & "','" & _
                            dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "'"

                    End If


                    With Now
                        strFileName = "" & "MembersJoinByDate As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 4 'Members per plan
                    strSQL = strSQL & "Where P.PlanName='" & strPlan & "' " & _
                    " And M.MemberType='Main' and M.active=1 " & _
                    " And M.parlourid='" & pgParlourID.ToString() & "' "
                    With Now
                        strFileName = "" & "MembersByPlan As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 5

                    strSQL = strSQL & "Where M.PolicyStatus='" & strPlan & "' " & _
                    " And M.MemberType='Main' and M.active=1 " & _
                    " And M.parlourid='" & pgParlourID.ToString() & "' "
                    With Now
                        strFileName = "" & "MembersByPlan As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 555
                    If Branch = "Default" Then
                        strSQL = "exec allmembersUnderwiter '" & pgParlourID.ToString() & "','All','" & _
                           dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "'"
                    Else
                        strSQL = "exec allmembersUnderwiter '" & pgParlourID.ToString() & "','" & Branch & "','" & _
                           dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "'"

                    End If

                Case Is = 5555
                    If Branch = "Default" Then
                        strSQL = "exec allmembersUnderwiter '" & pgParlourID.ToString() & "','All','" & _
                           dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "'"
                    Else
                        strSQL = "exec allmembersUnderwiter '" & pgParlourID.ToString() & "','" & Branch & "','" & _
                           dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "'"

                    End If



                Case Is = 6
                    If Branch = "Default" Then
                        strSQL = strSQL & "Where Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                            "' order by Invoices.DatePaid "
                    Else
                        strSQL = strSQL & "Where Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                           "' and PaymentBranch='" & Branch & "' order by Invoices.DatePaid "

                    End If

                    With Now
                        strFileName = "" & "PaymentsBydate As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
                Case Is = 66
                    strSQL = strSQL & "Where Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' And RecievedBy='" & strUserName & "' order by Invoices.DatePaid"
                    With Now
                        strFileName = "" & "PaymentsRecievedby-" & strUserName & " As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
                Case Is = 7
                    strSQL = "UnderwriteraMemberPayments '" & strPlan & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', '" & pgParlourID.ToString() & "'"

                    With Now
                        strFileName = "" & "PaymentsByMember As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
                Case Is = 77
                    strSQL = "Exec ReturnAgentComm '" & strMemberNumber & "',' " & dtFrom.ToString("yyyy-MM-dd") & "', '" & dtTo.ToString("yyyy-MM-dd") & "'"
                    '                   strSQL = strSQL & "Where Members.Agent='" & strMemberNumber & "' and " & _
                    '                    "Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' And RecievedBy='" & strUserName & "' order by Invoices.DatePaid"
                    With Now
                        strFileName = "" & "PaymentsByMember As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
                Case Is = 8
                    If strPlan = "All" Then
                        strSQL = strSQL & "Where   " & _
                           "   Invoices.DatePaid between  '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                           "'  order by Invoices.DatePaid"
                        With Now
                            strFileName = "" & "PaymentsByPlans As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    Else
                        strSQL = strSQL & "Where Invoices.[Notes] like '%" & strPlan & "%' " & _
                   " and Invoices.DatePaid between  '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                   "'  order by Invoices.DatePaid"
                        With Now
                            strFileName = "" & "PaymentsByPlans As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    End If


                Case Is = 9

                    If strSociety <> "A - Societies only" Then
                        strSQL = strSQL & "Where Invoices.parlourid='" & pgParlourID.ToString() & "' and Members.MemberSociety='" & strSociety & "'" & _
                        " and Invoices.DatePaid between  '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                        "'  order by Invoices.DatePaid"
                        With Now
                            strFileName = "" & "PaymentsBySociety As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    Else
                        strSQL = "select " & _
                            "GroupID MemeberNumber " & _
                            ",GroupInvoiceID ReceiptNr " & _
                            ", SocietyName Name " & _
                            ",'' Surname " & _
                            ",DatePaid " & _
                            ",AmountPaid " & _
                            ",RecievedBy " & _
                            ",PaidBy " & _
                            ",Notes " & _
                            " ,AmountPaid Premium " & _
                            " ,0 Underwriter " & _
                            " ,0 Company " & _
                            " ,0 Agent  " & _
                            "from dbo.GroupInvoices " & _
                            "join dbo.Societies on pkiSocietyID=GroupID " & _
                            "where GroupInvoices.parlourid='" & pgParlourID.ToString() & "' and DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "'"

                        With Now
                            strFileName = "" & "PaymentsBySociety As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    End If

                Case Is = 10
                    strSQL = strSQL & " Where Quotations.DateOfQuotation between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' and Quotations.parlourid='" & pgParlourID.ToString() & "'"

                    With Now
                        strFileName = "" & "QuotationsByDate As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
            End Select

            If intReportType = 12 Then
                strSQL = "SELECT FuneralPayments.InvoiceID [ReceiptNr]," & _
                          "Funerals.MemeberNumber, " & _
                          "Funerals.[Full Names] As Name, " & _
                        "Funerals.Surname, " & _
                         "FuneralPayments.DatePaid, " & _
                         "FuneralPayments.AmountPaid, " & _
                         "FuneralPayments.RecievedBy, " & _
                         "FuneralPayments.PaidBy, " & _
                         "FuneralPayments.Notes " & _
                         "FROM Funerals INNER JOIN FuneralPayments ON Funerals.[pkiFuneralID] = FuneralPayments.[FuneralID] " & _
                         "Where FuneralPayments.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' and " & _
                         "Funerals.parlourid='" & pgParlourID.ToString() & "' "
                With Now
                    strFileName = "" & "FuneralPaymentsBydate As at " & _
                    .Year & "-" & .Month & "-" & .Day & ".xls"
                End With

                '    rptType = 2
            End If


            If intReportType = 13 Then
                strSQL = "SELECT Funerals.MemeberNumber, " & _
                          "Funerals.[Full Names] As Name, " & _
                        "Funerals.Surname, " & _
                         "FuneralPayments.DatePaid, " & _
                         "FuneralPayments.AmountPaid, " & _
                         "FuneralPayments.RecievedBy, " & _
                         "FuneralPayments.PaidBy, " & _
                         "FuneralPayments.Notes " & _
                         "FROM Funerals INNER JOIN FuneralPayments ON Funerals.[pkiFuneralID] = FuneralPayments.[FuneralID] " & _
                         "Where Funerals.[pkiFuneralID]=" & strMemberNumber & " and " & _
                          "Funerals.parlourid='" & pgParlourID.ToString() & "' "
                With Now
                    strFileName = "" & "FuneralPaymentsPerFuneral As at " & _
                    .Year & "-" & .Month & "-" & .Day & ".xls"
                End With

                rptType = 2
            End If

            If intReportType = 14 Then
                If Branch = "Default" Then
                    strSQL = "Exec ReturnExpenses '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "'"
                Else
                    strSQL = "Exec ReturnExpenses '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & Branch & "'"


                End If
            End If

            If intReportType = 20 Then 'Member transactions
                strSQL = "SELECT Invoices.AmountPaid AS Amount, Invoices.DatePaid AS [Date], Invoices.Notes, Members.MemeberNumber, Members.Surname, Members.[Full Names] as Name " & _
                        "FROM Members INNER JOIN Invoices ON Members.pkiMemberID = Invoices.MemberID Where Members.MemeberNumber='" & strMemberNumber & "' " & _
                        "UNION SELECT MemberPaymentReminders.Premium AS Amount, MemberPaymentReminders.DateLastPaid AS [Date], MemberPaymentReminders.Notes, Members.MemeberNumber, Members.Surname, Members.[Full Names]as Name " & _
                        "FROM Members INNER JOIN MemberPaymentReminders ON Members.pkiMemberID = MemberPaymentReminders.fkiMemberId Where Members.MemeberNumber='" & strMemberNumber & "' " & _
                        "ORDER BY [Date]"
                rptType = 5
            End If

            If intReportType = 11 Then 'Member transactions
                strSQL = "SELECT cast(Claims.[pkiClaimID] as varchar) as ClaimNo, Claims.[MemberNumber], Claims.[ClaimDate], Claims.[CourseOfDearth], Claims.[LoggedBy], Claims.[Cover], Claims.[ClaimantFullname], Claims.[ClaimantSurname],Claims.[ClaimingFor] " & _
               "FROM Claims WHERE Claims.ClaimDate Between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
               "' and  Claims.parlourid='" & pgParlourID.ToString() & "' ORDER BY Claims.[ClaimDate]"
                rptType = 6
            End If


            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If Not IsNothing(dsData) And intReportType = 11 Then
                Dim intI As Int32
                If dsData.Tables(0).Rows.Count > 0 Then
                    For intI = 0 To dsData.Tables(0).Rows.Count - 1
                        If CInt(dsData.Tables(0).Rows(intI).Item(0)) < 10 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM00000" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 10 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM0000" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 100 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM000" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 1000 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM00" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 10000 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM0" & dsData.Tables(0).Rows(intI).Item(0)
                        Else
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM" & dsData.Tables(0).Rows(intI).Item(0)
                        End If
                    Next
                End If
            End If


            blnPassed = True
        Catch ex As Exception
            Throw ex
        Finally
            GenerateReportAsPerCriteria = dsData
        End Try
    End Function


    <WebMethod()> _
    Public Function GenerateReportAsPerCriteriaNew(ByVal intReportType As Int32, _
                                                 ByVal intSocietyID As Int32, _
                                                 ByVal intPlanID As Int32, _
                                                 ByVal dtFrom As Date, _
                                                 ByVal dtTo As Date, _
                                                 ByVal strMemberNumber As String, _
                                                 ByVal strSociety As String, _
                                                 ByVal strPlan As String, _
                                                 ByVal Branch As String, _
                                                 ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Dim rptType As Int32

        Try
            blnPassed = False
            If intReportType < 6 Then
                strSQL = "Select distinct M.MemeberNumber As [MemeberNo],   " & _
"S.SocietyName As [Society],    " & _
"P.PlanName As [Plan],   " & _
"'R ' +cast (P.Cover as varchar) Cover,    " & _
"M.[Full Names] As [Name],    " & _
"M.Surname As [Surname],    " & _
"M.Gender As [Gender],     " & _
"M.[ID Number] As [IDNo],     " & _
"cast(datepart(year,(M.[Date Of Birth])) as varchar)+ '-' +  " & _
"right('0'+ cast(datepart(month,(M.[Date Of Birth])) as varchar),2)+ '-' + " & _
"right('0'+ cast(datepart(day,(M.[Date Of Birth])) as varchar),2)   " & _
"As [DateOfBirth],  " & _
"datediff(day,M.[Date Of Birth],getdate())/365  'Age',  " & _
"'Main member' 'Type',  " & _
"M.Telephone As [TelNo],    " & _
"M.Cellphone As [CellNo],    " & _
"M.Address1 As [Address1],   " & _
"M.Address2 As [Address2],   " & _
"M.Address3 As [Address3], " & _
"M.Address4 As [Address4],  " & _
"M.Code As [Code],     " & _
"M.MemberBranch, " & _
"M.PolicyStatus As [PolicyStatus]     " & _
"FROM Members M      " & _
"INNER JOIN Plans P on    " & _
"P.pkiPlanID = M.fkiPlanID   " & _
"left JOIN Societies S     " & _
"ON S.SocietyName=M.MemberSociety "


                rptType = 1
            ElseIf intReportType = 10 Then
                strSQL = "SELECT distinct Quotations.ContactTitle, Quotations.ContactFirstName, Quotations.ContactLastName, Quotations.TelNumber, Quotations.CellNumber, Quotations.DateOfQuotation, (FuneralServices.ServiceCost*QuotationServicesSelection.Quantity) AS SubTotal, ([QuotationDiscounts].[Amount])  AS [% Discount], ([QuotationDiscounts].[Amount]*([FuneralServices].[ServiceCost]*[QuotationServicesSelection].[Quantity])/100) AS [DiscountAmount], ([FuneralServices].[ServiceCost]*[QuotationServicesSelection].[Quantity])-([QuotationDiscounts].[Amount]*([FuneralServices].[ServiceCost]*[QuotationServicesSelection].[Quantity])/100) AS Total  " & _
                        " FROM Quotations INNER JOIN QuotationServicesSelection ON Quotations.QuotationID = QuotationServicesSelection.fkiServiceID	INNER JOIN FuneralServices ON QuotationServicesSelection.fkiServiceID =FuneralServices.pkiServiceID left JOIN QuotationDiscounts ON Quotations.QuotationID = QuotationDiscounts.QuotationID "
                rptType = 3

            Else

                strSQL = "SELECT distinct Members.MemeberNumber,  " & _
                        "Invoices.InvoiceID [ReceiptNr], " & _
                    "Members.[Full Names] As Name,  " & _
                    "Members.Surname,  " & _
                    "Invoices.DatePaid,  " & _
                    "Invoices.AmountPaid,  " & _
                    "Invoices.RecievedBy,  " & _
                    "Invoices.PaidBy,  " & _
                    "Invoices.Notes," & _
                    "Plans.PlanSubscription Premium,  " & _
                    "case when Plans.UnderwriterSplit<>0 then ((Plans.UnderwriterSplit) /(Plans.PlanSubscription)  * Invoices.AmountPaid) else 0 END Underwriter, " & _
                    "case when Plans.ManagerSplit<>0 then  ((Plans.ManagerSplit) /(Plans.PlanSubscription)  * Invoices.AmountPaid) else 0 END Company ,  " & _
                    "case when Plans.AgentSplit<>0 then ((Plans.AgentSplit) /(Plans.PlanSubscription)  * Invoices.AmountPaid) else 0 END Agent,   " & _
                    "Invoices.PaymentBranch  " & _
                    "FROM Invoices INNER JOIN " & _
                    "Members ON Members.pkiMemberID = Invoices.MemberID and Members.parlourid='" & pgParlourID.ToString() & "' " & _
                     "INNER JOIN Plans ON Plans.pkiPlanID = Members.fkiPlanID "


                rptType = 2
            End If
            Select Case intReportType
                Case Is = 1 ' All Main Members


                    If Branch = "Default" Then
                        strSQL = "exec ReadAllMembers '" & pgParlourID.ToString() & "','All'"
                    Else
                        strSQL = "exec ReadAllMembers '" & pgParlourID.ToString() & "','" & Branch & "'"

                    End If

                    With Now
                        strFileName = "" & "AllMembers As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 2 ' Members By Society
                    strSQL = strSQL & "Where S.SocietyName='" & _
                    strSociety & "' And  M.MemberType='Main' and M.active=1 and " & _
                    "M.parlourid='" & pgParlourID.ToString() & "' "

                    With Now
                        strFileName = "" & "MembersBySociety As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 3
                    If Branch = "Default" Then
                        strSQL = "exec allmembers '" & pgParlourID.ToString() & "','All','" & _
                            dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "'"
                    Else
                        strSQL = "exec allmembers '" & pgParlourID.ToString() & "','" & Branch & "','" & _
                            dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "'"

                    End If


                    With Now
                        strFileName = "" & "MembersJoinByDate As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 4 'Members per plan
                    strSQL = strSQL & "Where P.PlanName='" & strPlan & "' " & _
                    " And M.MemberType='Main' and M.active=1 " & _
                    " And M.parlourid='" & pgParlourID.ToString() & "' "
                    With Now
                        strFileName = "" & "MembersByPlan As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 5

                    strSQL = strSQL & "Where M.PolicyStatus='" & strPlan & "' " & _
                    " And M.MemberType='Main' and M.active=1 " & _
                    " And M.parlourid='" & pgParlourID.ToString() & "' "
                    With Now
                        strFileName = "" & "MembersByPlan As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 555
                    If Branch = "Default" Then
                        strSQL = "exec allmembersUnderwiter '" & pgParlourID.ToString() & "','All','" & _
                           dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "'"
                    Else
                        strSQL = "exec allmembersUnderwiter '" & pgParlourID.ToString() & "','" & Branch & "','" & _
                           dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "'"

                    End If


                Case Is = 6
                    If Branch = "Default" Then
                        strSQL = strSQL & "Where Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                            "' order by Invoices.DatePaid "
                    Else
                        strSQL = strSQL & "Where Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                           "' and PaymentBranch='" & Branch & "' order by Invoices.DatePaid "

                    End If

                    With Now
                        strFileName = "" & "PaymentsBydate As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
                Case Is = 66
                    strSQL = strSQL & "Where Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' And RecievedBy='" & strUserName & "' order by Invoices.DatePaid"
                    With Now
                        strFileName = "" & "PaymentsRecievedby-" & strUserName & " As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With

                Case Is = 5555
                    If Branch = "All" Then
                        strSQL = "allmembersUnderwritten '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "' , 'All'"
                    Else
                        strSQL = "allmembersUnderwritten '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & strPlan & "', 'No'"
                    End If

                Case Is = 6666
                    If Branch = "All" Then
                        strSQL = "UnderwtriterClaims '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', 'All'"
                    Else
                        strSQL = "UnderwtriterClaims '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', 'No'"
                    End If

                Case Is = 7777
                    If Branch = "All" Then
                        strSQL = "UnderwriterOutstandingPayments1 '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', 'All'"
                    Else
                        strSQL = "UnderwriterOutstandingPayments1 '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', 'No'"
                    End If

                Case Is = 8888
                    If Branch = "All" Then
                        strSQL = "UnderwriterMemberPayments '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', 'All'"
                    Else
                        strSQL = "UnderwriterMemberPayments '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', 'No'"
                    End If


                Case Is = 7
                    strSQL = "UnderwriteraMemberPayments '" & strPlan & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "', '" & pgParlourID.ToString() & "'"

                    With Now
                        strFileName = "" & "PaymentsByMember As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
                Case Is = 77
                    strSQL = "Exec ReturnAgentComm '" & strMemberNumber & "',' " & dtFrom.ToString("yyyy-MM-dd") & "', '" & dtTo.ToString("yyyy-MM-dd") & "'"
                    '                   strSQL = strSQL & "Where Members.Agent='" & strMemberNumber & "' and " & _
                    '                    "Invoices.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' And RecievedBy='" & strUserName & "' order by Invoices.DatePaid"
                    With Now
                        strFileName = "" & "PaymentsByMember As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
                Case Is = 8
                    If strPlan = "All" Then
                        strSQL = strSQL & "Where   " & _
                           "   Invoices.DatePaid between  '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                           "'  order by Invoices.DatePaid"
                        With Now
                            strFileName = "" & "PaymentsByPlans As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    Else
                        strSQL = strSQL & "Where Invoices.[Notes] like '%" & strPlan & "%' " & _
                   " and Invoices.DatePaid between  '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                   "'  order by Invoices.DatePaid"
                        With Now
                            strFileName = "" & "PaymentsByPlans As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    End If


                Case Is = 9

                    If strSociety <> "A - Societies only" Then
                        strSQL = strSQL & "Where Invoices.parlourid='" & pgParlourID.ToString() & "' and Members.MemberSociety='" & strSociety & "'" & _
                        " and Invoices.DatePaid between  '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
                        "'  order by Invoices.DatePaid"
                        With Now
                            strFileName = "" & "PaymentsBySociety As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    Else
                        strSQL = "select " & _
                            "GroupID MemeberNumber " & _
                            ",GroupInvoiceID ReceiptNr " & _
                            ", SocietyName Name " & _
                            ",'' Surname " & _
                            ",DatePaid " & _
                            ",AmountPaid " & _
                            ",RecievedBy " & _
                            ",PaidBy " & _
                            ",Notes " & _
                            " ,AmountPaid Premium " & _
                            " ,0 Underwriter " & _
                            " ,0 Company " & _
                            " ,0 Agent  " & _
                            "from dbo.GroupInvoices " & _
                            "join dbo.Societies on pkiSocietyID=GroupID " & _
                            "where GroupInvoices.parlourid='" & pgParlourID.ToString() & "' and DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "'"

                        With Now
                            strFileName = "" & "PaymentsBySociety As at " & _
                            .Year & "-" & .Month & "-" & .Day & ".xls"
                        End With
                    End If

                Case Is = 10
                    strSQL = strSQL & " Where Quotations.DateOfQuotation between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' and Quotations.parlourid='" & pgParlourID.ToString() & "'"

                    With Now
                        strFileName = "" & "QuotationsByDate As at " & _
                        .Year & "-" & .Month & "-" & .Day & ".xls"
                    End With
            End Select

            If intReportType = 12 Then
                strSQL = "SELECT FuneralPayments.InvoiceID [ReceiptNr]," & _
                          "Funerals.MemeberNumber, " & _
                          "Funerals.[Full Names] As Name, " & _
                        "Funerals.Surname, " & _
                         "FuneralPayments.DatePaid, " & _
                         "FuneralPayments.AmountPaid, " & _
                         "FuneralPayments.RecievedBy, " & _
                         "FuneralPayments.PaidBy, " & _
                         "FuneralPayments.Notes " & _
                         "FROM Funerals INNER JOIN FuneralPayments ON Funerals.[pkiFuneralID] = FuneralPayments.[FuneralID] " & _
                         "Where FuneralPayments.DatePaid between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & "' and " & _
                         "Funerals.parlourid='" & pgParlourID.ToString() & "' "
                With Now
                    strFileName = "" & "FuneralPaymentsBydate As at " & _
                    .Year & "-" & .Month & "-" & .Day & ".xls"
                End With

                '    rptType = 2
            End If


            If intReportType = 13 Then
                strSQL = "SELECT Funerals.MemeberNumber, " & _
                          "Funerals.[Full Names] As Name, " & _
                        "Funerals.Surname, " & _
                         "FuneralPayments.DatePaid, " & _
                         "FuneralPayments.AmountPaid, " & _
                         "FuneralPayments.RecievedBy, " & _
                         "FuneralPayments.PaidBy, " & _
                         "FuneralPayments.Notes " & _
                         "FROM Funerals INNER JOIN FuneralPayments ON Funerals.[pkiFuneralID] = FuneralPayments.[FuneralID] " & _
                         "Where Funerals.[pkiFuneralID]=" & strMemberNumber & " and " & _
                          "Funerals.parlourid='" & pgParlourID.ToString() & "' "
                With Now
                    strFileName = "" & "FuneralPaymentsPerFuneral As at " & _
                    .Year & "-" & .Month & "-" & .Day & ".xls"
                End With

                rptType = 2
            End If

            If intReportType = 14 Then
                If Branch = "Default" Then
                    strSQL = "Exec ReturnExpenses '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "'"
                Else
                    strSQL = "Exec ReturnExpenses '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & Branch & "'"


                End If
            End If

            If intReportType = 15 Then
                If Branch = "Default" Then
                    strSQL = "Exec dbo.ReturnDetailedPayments '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "'"
                Else
                    strSQL = "Exec dbo.ReturnDetailedPayments '" & pgParlourID.ToString() & "','" & dtFrom.ToString("yyyy-MM-dd") & "','" & dtTo.ToString("yyyy-MM-dd") & "','" & Branch & "'"


                End If
            End If

            If intReportType = 20 Then 'Member transactions
                strSQL = "SELECT Invoices.AmountPaid AS Amount, Invoices.DatePaid AS [Date], Invoices.Notes, Members.MemeberNumber, Members.Surname, Members.[Full Names] as Name " & _
                        "FROM Members INNER JOIN Invoices ON Members.pkiMemberID = Invoices.MemberID Where Members.MemeberNumber='" & strMemberNumber & "' " & _
                        "UNION SELECT MemberPaymentReminders.Premium AS Amount, MemberPaymentReminders.DateLastPaid AS [Date], MemberPaymentReminders.Notes, Members.MemeberNumber, Members.Surname, Members.[Full Names]as Name " & _
                        "FROM Members INNER JOIN MemberPaymentReminders ON Members.pkiMemberID = MemberPaymentReminders.fkiMemberId Where Members.MemeberNumber='" & strMemberNumber & "' " & _
                        "ORDER BY [Date]"
                rptType = 5
            End If

            If intReportType = 11 Then 'Member transactions
                strSQL = "SELECT cast(Claims.[pkiClaimID] as varchar) as ClaimNo, Claims.[MemberNumber], Claims.[ClaimDate], Claims.[CourseOfDearth], Claims.[LoggedBy], Claims.[Cover], Claims.[ClaimantFullname], Claims.[ClaimantSurname],Claims.[ClaimingFor] " & _
               "FROM Claims WHERE Claims.ClaimDate Between '" & dtFrom.ToString("yyyy-MM-dd") & "' And '" & dtTo.ToString("yyyy-MM-dd") & _
               "' and  Claims.parlourid='" & pgParlourID.ToString() & "' ORDER BY Claims.[ClaimDate]"
                rptType = 6
            End If


            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If Not IsNothing(dsData) And intReportType = 11 Then
                Dim intI As Int32
                If dsData.Tables(0).Rows.Count > 0 Then
                    For intI = 0 To dsData.Tables(0).Rows.Count - 1
                        If CInt(dsData.Tables(0).Rows(intI).Item(0)) < 10 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM00000" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 10 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM0000" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 100 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM000" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 1000 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM00" & dsData.Tables(0).Rows(intI).Item(0)
                        ElseIf CInt(dsData.Tables(0).Rows(intI).Item(0)) >= 10000 Then
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM0" & dsData.Tables(0).Rows(intI).Item(0)
                        Else
                            dsData.Tables(0).Rows(intI).Item(0) = "CLM" & dsData.Tables(0).Rows(intI).Item(0)
                        End If
                    Next
                End If
            End If


            blnPassed = True
        Catch ex As Exception
            Throw ex
        Finally
            GenerateReportAsPerCriteriaNew = dsData
        End Try
    End Function


    <WebMethod()> _
   Public Function SearchPaymentMemberNotes(ByVal strNotes As String, _
                                            ByVal strUserName As String, ByVal pgParlourID As String) As DataTable

        Try
            blnPassed = False

            strSQL = "Select top 1 Notes from Invoices where Notes = '" & DL.ReplaceDBString(strNotes) & "' and parlourid='" & pgParlourID.ToString() & "' "

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)


        Catch ex As Exception
            Throw ex
        Finally
            SearchPaymentMemberNotes = dsData.Tables(0)
        End Try
    End Function


    Public Function backup(Optional ByVal strFilename As String = "") As Boolean

        Try
            blnPassed = False

            If strFilename = "" Then
                strSQL = "BACKUP DATABASE [ApplicationData] " & _
                "TO  DISK = N'C:\Program Files (x86)\Microsoft SQL Server\MSSQL10.UNPLUGGITDEV\MSSQL\Backup\ApplicationDataBackup.bak' " & _
                "WITH FORMAT, INIT,  MEDIANAME = N'Test',  " & _
                "NAME = N'ApplicationData-Full Database Backup', SKIP, NOREWIND, NOUNLOAD,  STATS = 10 "
            End If

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            backup = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnMemberPaymentHistory(ByVal intMemberID As Int32, _
                                               ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select coalesce(InvNumber,InvoiceID) as [InvoiceID], DatePaid as [DatePaid], 'R' + Cast(AmountPaid as varchar) as [Amount], RecievedBy as [RecievedBy], PaidBy as [PaidBy], Notes as [Notes]" & _
            "From Invoices Where MemberID=" & intMemberID & " order by 2 desc"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberPaymentHistory = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnMemberPayment(ByVal intMemberID As Int32, _
                                        ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select coalesce(InvNumber,InvoiceID) as [InvoiceID], DatePaid as [DatePaid], 'R' + Cast(AmountPaid as varchar) as [Amount], RecievedBy as [RecievedBy], PaidBy as [PaidBy], Notes as [Notes]" & _
            "From Invoices Where MemberID=" & intMemberID & " and [DatePaid]= (select max(I.[DatePaid]) from Invoices I where I.MemberID=Invoices.MemberID) "

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberPayment = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnGroupPaymentHistory(ByVal GroupInvoiceID As String, _
                                              ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select [GroupInvoiceID] as [InvoiceID], DatePaid as [DatePaid], 'R' + Cast(AmountPaid as varchar) as [Amount], RecievedBy as [RecievedBy], PaidBy as [PaidBy], Notes as [Notes]" & _
            " From GroupInvoices Where GroupID=" & ReturnSocietyIDBySocietyName(GroupInvoiceID, strUserName, pgParlourID) & " order by 2 desc"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnGroupPaymentHistory = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnExpensesHistory(ByVal ExpenseBranch As String, _
                                            ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "SELECT   E.[pkiExpenseID] " & _
                        "		,E.[ExpenseDate] " & _
                        "		,C.[Category] " & _
                        "		,E.UserID " & _
                        "		,E.[ExpenseAmount] " & _
                        "		,E.[ExpenseNotes] " & _
                         "		,V.[VendorName] " & _
                        " FROM [dbo].[Expenses] E " & _
                        "  join [dbo].[ExpenseCategories] C on [fkiExpenseCategoryID] = [pkiExpenseCategoryID] " & _
                        "  left outer join [dbo].[Vendors] V on V.[pkiVendorID] = E.[fkiVendorID] " & _
                        "  where E.[parlourid]  ='" & pgParlourID.ToString & "' and E.ExpenseBranch = '" & ExpenseBranch & "' "

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnExpensesHistory = dtData
        End Try
    End Function


    <WebMethod()> _
    Public Function ReturnMemberHistoryPaymentbyID(ByVal intPkiMemberID As Integer, _
                                                   ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            dsData = Nothing

            strSQL = "Select top 3 InvoiceID as [InvoiceID], DatePaid as [DatePaid], 'R' + Cast(AmountPaid as varchar) as [Amount], " & _
                    "		RecievedBy as [RecievedBy],PaidBy as [PaidBy], Notes as [Notes] " & _
                    "From Invoices,	Members " & _
                    "Where Invoices.MemberID=Members.pkiMemberID and " & _
                    "Members.pkiMemberID=" & intPkiMemberID & " and Invoices.[parlourid]  ='" & pgParlourID.ToString & "' " & _
                    "and Members.[parlourid]  ='" & pgParlourID.ToString & "' order by 1 desc"

            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberHistoryPaymentbyID = dsData.Tables(0)
        End Try
    End Function

    <WebMethod()> _
   Public Function ReturnMemberHistoryPaymentbyIDJoiningFee(ByVal intPkiMemberID As Integer, _
                                                  ByVal strUserName As String, ByVal pgParlourID As String) As DataSet
        Try
            dsData = Nothing

            strSQL = "EXECUTE  [dbo].[ReturnMemberPaymentHistoryJoiningFee]  @parlourid='" & pgParlourID.ToString & "' ,@intPkiMemberID=" & intPkiMemberID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberHistoryPaymentbyIDJoiningFee = dsData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnMemberHistoryPayment(ByVal strMemberNo As String, _
                                               ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False
            strSQL = "Select InvoiceID as [InvoiceID], DatePaid as [DatePaid], 'R' + Cast(AmountPaid as varchar) as [Amount], " & _
                    "		RecievedBy as [RecievedBy],PaidBy as [PaidBy], Notes as [Notes] " & _
                    "From Invoices,	Members " & _
                    "Where Invoices.MemberID=Members.pkiMemberID and " & _
                    "Members.MemeberNumber='" & strMemberNo & "' and Invoices.[parlourid]  ='" & pgParlourID.ToString & "' " & _
                    "and Members.[parlourid]  ='" & pgParlourID.ToString & "' order by 2 desc"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnMemberHistoryPayment = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateQuotationServiceSelecetion(ByVal iQuotationID As Int32, _
                                                        ByVal strServiceName As String, _
                                                        ByVal iQuantity As Int32, _
                                                        ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Dim iServiceID As Int32

        Try
            iServiceID = ReturnServiceIDByServiceName(strServiceName, strUserName, pgParlourID)
            blnPassed = False

            strSQL = "Insert into QuotationServicesSelection(QuotationID,fkiServiceID,Quantity) " & _
            "values ( " & iQuotationID & "," & iServiceID & "," & iQuantity & ")"

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateQuotationServiceSelecetion = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateFuneralServiceSelecetionByServiceName(ByVal iFuneralid As Int32, _
                                                     ByVal strServiceName As String, _
                                                     ByVal iQuantity As Int32, _
                                                     ByVal strUserName As String, _
                                                     ByVal pgParlourID As String) As Boolean
        Dim iServiceIID As Int64

        Try
            iServiceIID = ReturnServiceIDByServiceName(strServiceName, strUserName, pgParlourID)
            blnPassed = False

            strSQL = "Insert into FuneralServicesSelection(fkiFuneralID,fkiServiceID,Quantity,LastModified,ModifiedUser) " & _
            "values ( " & iFuneralid & "," & iServiceIID & "," & iQuantity & ",getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)

            If blnPassed Then
                strSQL = "Update FuneralServices set " & _
                 " LastModified =getdate()," & _
                 " ModifiedUser ='" & strUserName & "'," & _
                  "QTY = (QTY -  " & iQuantity & ") where pkiServiceID=" & iServiceIID

                blnPassed = DL.ExecInsertDatabase(strSQL)
            End If

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateFuneralServiceSelecetionByServiceName = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdateFuneralServiceSelecetion(ByVal iFuneralid As Int32, _
                                                   ByVal iServiceID As Int32, _
                                                   ByVal iQuantity As Int32, _
                                                   ByVal strUserName As String, _
                                                   ByVal pgParlourID As String) As Boolean


        Try

            blnPassed = False

            strSQL = "Insert into FuneralServicesSelection(fkiFuneralID,fkiServiceID,Quantity,LastModified,ModifiedUser) " & _
            "values ( " & iFuneralid & "," & iServiceID & "," & iQuantity & ",getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)

            If blnPassed Then
                strSQL = "Update FuneralServices set QTY = (QTY -  " & iQuantity & ") where pkiServiceID=" & iServiceID

                blnPassed = DL.ExecInsertDatabase(strSQL)
            End If

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdateFuneralServiceSelecetion = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function AddUpdatePackageServiceSelecetion(ByVal packagename As String, _
                                                        ByVal fkiServiceID As Int32, _
                                                        ByVal strUserName As String, _
                                                        ByVal pgParlourID As String) As Boolean
        '  Dim iServiceID As Int32

        Try
            '   iServiceID = ReturnServiceIDByServiceName(strServiceName)
            blnPassed = False

            strSQL = "Insert into PackageServicesSelection(packagename,fkiServiceID,LastModified,ModifiedUser) " & _
            "values ( '" & packagename & "'," & fkiServiceID & ",getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)

            AddAudit(strUserName, pgParlourID, "AddUpdatePackageServiceSelecetion  fkiServiceID=(" & fkiServiceID & ")")

        Catch ex As Exception
            Throw ex
        Finally
            AddUpdatePackageServiceSelecetion = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnFuneralDiscountPerFuneralID(ByVal iFuneralID As Int32, _
                                                      ByVal strUserName As String, ByVal pgParlourID As String) As Int32
        Dim dblDiscount As Double = 0

        Try
            strSQL = "SELECT Amount FROM Discounts where FuneralID = " & iFuneralID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count <= 0 Then
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                dblDiscount = CDbl(.Item(0))
            End With

        Catch ex As Exception
            Throw ex
        Finally
            ReturnFuneralDiscountPerFuneralID = dblDiscount
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnQuotationDiscountPerQtotationID(ByVal iQuotationID As Int32, _
                                                          ByVal strUserName As String, ByVal pgParlourID As String) As Int32
        Dim dblDiscount As Double = 0

        Try
            strSQL = "SELECT Amount FROM QuotationDiscounts where QuotationID = " & iQuotationID
            dsData = DL.ExecReturnDatasetFromSQL(strSQL)

            If IsNothing(dsData) Then
                Exit Try
            End If

            If dsData.Tables(0).Rows.Count <= 0 Then
                Exit Try
            End If

            With dsData.Tables(0).Rows(0)
                dblDiscount = CDbl(.Item(0))
            End With

        Catch ex As Exception
            Throw ex
        Finally
            ReturnQuotationDiscountPerQtotationID = dblDiscount
        End Try
    End Function

    <WebMethod()> _
    Public Function DeleteFuneralServiceItem(ByVal iFuneralServiceSelectionID As Int32, _
                                             ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "Delete from FuneralServicesSelection where pkiFuneralServiceSelectionID = " & iFuneralServiceSelectionID

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            DeleteFuneralServiceItem = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function DeleteQuotationFuneralServiceItem(ByVal iQuotationServiceSelectionID As Int32, _
                                                      ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "Delete from QuotationServicesSelection where pkiQuotationSelectionID = " & iQuotationServiceSelectionID

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            DeleteQuotationFuneralServiceItem = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function InsertFuneralDiscount(ByVal iFuneralID As Int32, _
                                          ByVal intDiscount As Int32, _
                                          ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "Insert Into Discounts(FuneralID,DatePaid,Amount) values (" & _
            iFuneralID & ",getdate()," & intDiscount & ")"

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            InsertFuneralDiscount = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function InsertQuotationDiscount(ByVal iQuotationID As Int32, _
                                            ByVal intDiscount As Int32, _
                                            ByVal strUserName As String, _
                                            ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "Insert Into QuotationDiscounts(QuotationID,DatePaid,Amount,LastModified,ModifiedUser) values (" & _
            iQuotationID & ",getdate()," & intDiscount & ",getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            InsertQuotationDiscount = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function InsertFuneralPayments(ByVal dAmount As Double, _
                                ByVal strRecievedBy As String, _
                                ByVal strPaidBy As String, _
                                ByVal strNotes As String, _
                                ByVal pIntFnrlID As String, _
                                ByVal strUserName As String, ByVal pgParlourID As String) As Boolean
        Try
            blnPassed = False

            strSQL = "Insert Into FuneralPayments(" & _
            "FuneralID,DatePaid,AmountPaid,RecievedBy," & _
            "PaidBy,Notes,parlourid,LastModified,ModifiedUser) values(" & _
            pIntFnrlID & ",getdate()," & (dAmount / 100).ToString().Replace(",", ".") & _
            ",'" & strRecievedBy & "','" & strPaidBy & "','" & _
            strNotes & "','" & pgParlourID.ToString & "',getdate(),'" & strUserName & "')"

            blnPassed = DL.ExecInsertDatabase(strSQL)

        Catch ex As Exception
            Throw ex
        Finally
            InsertFuneralPayments = blnPassed
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnFuneralPayments(ByVal pIntFnrlID As String, _
                                          ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False

            strSQL = "Select InvoiceID as [InvoiceID], DatePaid as [DatePaid], AmountPaid as [Amount], RecievedBy as [RecievedBy], PaidBy as [PaidBy], Notes as [Notes]" & _
            "From FuneralPayments Where FuneralID=" & pIntFnrlID

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)

        Catch ex As Exception
            Throw ex
        Finally
            ReturnFuneralPayments = dtData
        End Try
    End Function

    <WebMethod()> _
    Public Function ReturnLoanPayments(ByVal pstrloanIDNumber As String, _
                                       ByVal strUserName As String, ByVal pgParlourID As String) As DataTable
        Try
            blnPassed = False

            strSQL = "Exec getLoadBalance '" & pstrloanIDNumber & "'"

            dtData = DL.ExecReturnDatasetFromSQL(strSQL).Tables(0)


        Catch ex As Exception
            Throw ex
        Finally
            ReturnLoanPayments = dtData
        End Try
    End Function



End Class

