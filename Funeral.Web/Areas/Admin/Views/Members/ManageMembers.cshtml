@model Funeral.Web.Areas.Admin.Models.ViewModel.ManageMembersVM
@using Newtonsoft.Json
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Id = HttpContext.Current.Session["Id"];
    int memberId = Convert.ToInt32(Id);
    var tempData = TempData["IsPolicyNoEnabled"];
}
<script src="~/Scripts/jquery-2.1.1.min.js"></script>
@Styles.Render("~/Content/datatablecss")
<script src="~/Scripts/plugins/dateformat/DateFormat.js"></script>
<script src="~/Scripts/plugins/jquery-ui/jquery-ui.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.0/themes/smoothness/jquery-ui.css">

<link href="~/Content/plugins/datapicker/datepicker3.css" rel="stylesheet" />
<script src="~/Scripts/plugins/datapicker/bootstrap-datepicker.js"></script>
@Scripts.Render("~/plugins/jquerydatatables")

<!-- #region Style-->
<style type="text/css">
    input[type=radio] {
        margin-left: 4px !important;
    }

    em {
        color: red;
    }


    .table-responsive {
        overflow-x: hidden !important;
    }

    .popup, #popup {
        position: fixed;
        width: 350px;
        height: 171px;
        top: 24%;
        left: 33%;
        margin: 0 auto;
        text-align: center;
        /*z-index: 2003;*/
        background-color: white;
        display: none;
    }

    input, select, textarea {
        max-width: 100%;
    }



    #poptable {
        margin: 25px;
    }

        #poptable td, #poptable tr, #poptable td input[type=text] {
            margin: 10px;
        }

    .noteHead {
        width: 100%;
    }

        .noteHead h3 {
            float: left;
        }

    .noteDate {
        float: right;
        margin-right: 5px;
    }

    .noteContainer {
        margin-top: 44px;
        float: left;
    }

    #ddlDependencyTypeFormInput, #ddlDependencyRelationshipFormInput {
        max-width: 60% !important;
    }

    #NotePopUp {
        width: 50%;
        height: 50%;
        z-index: 5000;
        position: fixed;
        background-color: white;
        top: 22%;
        left: 25%;
        padding: 12px;
        display: none;
    }

    #NotePopUpWrap {
        height: 100%;
        width: 100%;
        position: fixed;
        z-index: 4000;
        background-color: black;
        opacity: .7;
        display: none;
        top: 0;
        left: 0;
    }

    .NoteCss {
        float: right;
        margin-right: 50Px;
    }

    .modalPopup {
        top: 20%;
        background-color: #FFFFFF;
        width: 500px;
        height: auto;
        border-radius: 5px;
        position: fixed;
        font-size: 12px;
        margin: 0 auto;
        /*z-index: 1003;*/
    }

    #TaskFollowUpModel {
        left: 12% !important;
    }

    .modal-backdrop {
        /*position: none;*/
        top: auto !important;
        right: auto !important;
        bottom: auto !important;
        left: auto !important;
        z-index: 1040;
        background-color: #000;
    }

        /*#TaskCopyPopupModel {
        left: 12% !important;
    }*/

        .modal-backdrop.in {
            /*filter: alpha(opacity=50);*/
            opacity: 0 !important;
        }
    /*#AgentInfoModel {
            left: 13% !important;
        }*/

    .closePopUp {
        float: right;
        color: #676a6c;
        margin-right: 3px;
        cursor: pointer;
    }

    .PanelHeder {
        background-color: red;
        color: white;
        padding: 10px !important;
        margin: -10px !important;
    }

    .TabColor {
        background-color: #ED1C24;
        color: aliceblue;
    }

    td {
        cursor: pointer;
    }

    input[type="radio"] {
        margin: 5px;
    }

    .datepicker {
        z-index: 2060 !important;
        position: relative;
    }

    .ibox {
        clear: both;
        margin-bottom: 25px;
        margin-top: 0px;
        padding: 10px;
    }

    /* Jeenal Changes */
    /*.modal {
        text-align: center;
        padding: 0 !important;
    }

    .modal:before {
        content: '';
        display: inline-block;
        height: 100%;
        vertical-align: middle;
        margin-right: -4px;
        padding: 0 !important;
    }

    .modal-dialog {
        display: inline-block;
        text-align: left;
        vertical-align: middle;
    }*/
    /* Jeenal Changes End*/

    /*.ui-datepicker-div { z-index: 2060 !important; }*/
</style>
<!-- #endregion -->

<div class="row">
    <div class="col-lg-12">
        <span id="lblMessage">

        </span>
        <!-- #region ActionUrls -->
        @Html.Hidden("Members", Url.Action("GetPremiumForPolicy"))
        @Html.Hidden("SaveManageMembers", Url.Action("SaveManageMembers"))
        @Html.Hidden("BindPolicyCoverDateUrl", Url.Action("BindPolicyCoverDate"))
        @Html.Hidden("GetMemberToUpdate", Url.Action("GetMember"))
        @Html.Hidden("GetPolicyDetails", Url.Action("GetPolicyDetails"))
        @Html.Hidden("GetPolicyDetailsBetweenAge", Url.Action("GetPolicyDetailsBetweenAge"))
        @Html.Hidden("SaveAddOnProduct", Url.Action("SaveAddOnProduct"))
        @Html.Hidden("UpdateAddOnProduct", Url.Action("UpdateAddOnProduct"))
        @Html.Hidden("DeleteAddOnProduct", Url.Action("DeleteAddOnProduct"))
        @Html.Hidden("SaveNote", Url.Action("SaveNote"))
        @Html.Hidden("UpdateNote", Url.Action("UpdateNote"))
        @Html.Hidden("DeleteNote", Url.Action("DeleteNote"))
        @Html.Hidden("SubmitDocuments", Url.Action("SubmitDocuments"))
        @Html.Hidden("DeleteDocuments", Url.Action("DeleteDocument"))
        @Html.Hidden("GetProductPrice", Url.Action("GetProductPrice"))
        @Html.Hidden("BindDependency", Url.Action("BindDependency"))
        @Html.Hidden("SaveDependancy", Url.Action("SaveDependancy"))
        @Html.Hidden("UpdateDependancy", Url.Action("UpdateDependancy"))
        @Html.Hidden("DeleteDependancy", Url.Action("DeleteDependency"))
        @Html.Hidden("UpdatePolicyPopup", Url.Action("UpdatePolicyPopup"))
        @Html.Hidden("btnCopyPolicyUrl", Url.Action("btnCopyPolicy"))
        @Html.Hidden("btnPolicyDocUrl", Url.Action("btnPolicyDoc"))
        @Html.Hidden("DependentForDuplicatePolicyUrl", Url.Action("DependentForDuplicatePolicy"))
        @Html.Hidden("DependencyStartdateChangeUrl", Url.Action("DependencyStartdateChange"))
        @Html.Hidden("DeleteMemberPolicy", Url.Action("DeleteMemberPolicy"))
        @Html.Hidden("SaveAddonProductUrl", Url.Action("SaveAddonProduct"))
        <!-- #endregion -->
    </div>
    <div id="blueimp-gallery" class="blueimp-gallery">
        <div class="slides"></div>
        <h3 class="title"></h3>
        <a class="prev">‹</a>
        <a class="next">›</a>
        <a class="close">×</a>
        <a class="play-pause"></a>
        <ol class="indicator"></ol>
    </div>
    <div class="col-lg-12">
        <div class="ibox ">
            <div class="ibox-title">
                <h5>Members Details</h5>
                <div class="pull-right">
                    <div class="btn-group">
                        <input type="submit" id="btnCopy" style="margin-right: 12px; margin-top: -5px;display:none" class="btn btn-sm btn-primary" value="CopyPolicy">
                        <input type="submit" style="display:inline; margin-left:11px; font-size:12px" id="PolicyDoc" class="btn btn-sm btn-primary pull-right m-t-n-xs" value="Policy Document" onclick="location.href='@Url.Action("btnPolicyDoc", "Members")'">
                        <input type="submit" style="display:inline; font-size:10.7px" id="PolicyDoc" class="btn btn-sm btn-primary pull-right m-t-n-xs" value="Participation Certificate" onclick="location.href='@Url.Action("btnParticipationCertificate", "Members")'">
                    </div>
                </div>
            </div>
            <div class="ibox-content">
                <div class="row">
                    <div class="panel blank-panel">
                        <div class="panel-heading">
                            <div class="panel-options" id="Tabs">
                                <ul class="nav nav-tabs" id="myTab">
                                    <li class="active" id="tab1">
                                        <a data-toggle="tab" href="#tab-1" id="atab1" aria-expanded="true">Personal Details</a>
                                    </li>
                                    <li class="" id="tab2">
                                        <a data-toggle="tab" href="#tab-2" id="atab2" aria-expanded="false">Member Address</a>
                                    </li>
                                    <li class="" id="tab3">
                                        <a data-toggle="tab" href="#tab-3" id="atab3" aria-expanded="false">Policy Details</a>
                                    </li>
                                    <li class="" id="tab4">
                                        <a data-toggle="tab" href="#tab-4" id="atab4" aria-expanded="false">Banking Details</a>
                                    </li>
                                    <li class="" id="tab5">
                                        <a data-toggle="tab" href="#tab-5" id="atab5" aria-expanded="false">Dependent & Extended Family </a>
                                    </li>
                                    <li class="" id="tab9">
                                        <a data-toggle="tab" href="#tab-9" id="atab9" aria-expanded="false">Supplementary Benefits</a>
                                    </li>
                                    <li class="" id="tab6">
                                        <a data-toggle="tab" href="#tab-6" id="atab6" aria-expanded="false">Payment History</a>
                                    </li>
                                    <li class="" id="tab7">
                                        <a data-toggle="tab" href="#tab-7" id="atab7" aria-expanded="false">Note</a>
                                    </li>
                                    <li class="" id="tab8">
                                        <a data-toggle="tab" href="#tab-8" id="atab8" aria-expanded="false">Supporting Documents</a>
                                    </li>
                                    <li class="" id="tab10">
                                        <a data-toggle="tab" href="#tab-10" id="atab10" aria-expanded="false">Beneficiary</a>
                                    </li>
                                    <li class="" id="tab11">
                                        <a data-toggle="tab" href="#tab-11" id="atab11" aria-expanded="false">Audit Trail</a>
                                    </li>

                                </ul>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="tab-content">
                                <!-- #region Tab1 -->
                                <div id="tab-1" class="tab-pane fade in active">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="input-group" style="color:red;">
                                                    <ul id="validationMessage" hidden></ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            @Html.Hidden("pkiMemberID", new { Id = "pkiMemberID" })
                                            <div class="form-group">
                                                <label>Scheme </label>
                                                @Html.DropDownList("ddlSelectCompany", new SelectList(ViewBag.Companies, "parlourid", "ApplicationName"), new { @id = "ddlSelectCompany", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Group Name</label>
                                                @Html.DropDownList("SocietyList", Model.SocietyList, "Please select", new { Name = "SocietyName", @id = "ddlMemberSociety", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Full Name  <em>*</em>  </label>
                                                <input type="text" maxlength="25" id="txtFirstname" name="txtFirstname" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Surname  <em>*</em> </label>
                                                <input type="text" maxlength="25" id="txtLastName" name="txtLastName" class="form-control">
                                            </div>

                                            <div class="form-group">
                                                <label>ID Number <em>*</em>  </label>
                                                @{
                                                    if (Model.IsAdministrator == true || Model.IsSuperUser == true)
                                                    {
                                                        <input type="text" pattern="/d*" maxlength="13" id="txtIdNumber" name="txtIdNumber" class="form-control" onkeyup="DateComparisionJavascriptFun();" onblur="IdNumberBasicValidation(txtIdNumber);">
                                                    }
                                                    else if (Model.Member.pkiMemberID > 0)
                                                    {
                                                        <input type="text" pattern="/d*" maxlength="13" id="txtIdNumber" name="txtIdNumber" class="form-control" onkeyup="DateComparisionJavascriptFun();" readonly="readonly" onblur="IdNumberBasicValidation(txtIdNumber);">
                                                    }
                                                    else
                                                    {
                                                        <input type="text" pattern="/d*" maxlength="13" id="txtIdNumber" name="txtIdNumber" class="form-control" onkeyup="DateComparisionJavascriptFun();" onblur="IdNumberBasicValidation(txtIdNumber);">
                                                    }
                                                }
                                            </div>
                                            <div class="form-group">
                                                <label>Date of Birth </label>
                                                <input type="text" id="txtBirthDay" name="txtBirthDay" class="form-control birthDate DatepickerSelection" readonly="readonly">
                                            </div>

                                            <div class="form-group">
                                                <label>Gender</label>
                                                <br>
                                                <input type="radio" name="gender" value="0" checked> Male
                                                <input type="radio" name="gender" value="1"> Female
                                            </div>
                                        </div>
                                        <div class="col-lg-6">

                                            <div class="form-group">
                                                <label>Cellphone Number <em>*</em>  </label>
                                                <input type="text" id="txtCellphone" name="txtCellphone" onkeypress="return onlyNumberKey(event)" maxlength="13" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Telephone Number</label>
                                                <input type="text" onkeypress="return onlyNumberKey(event)" maxlength="13" id="txtTelePhone" name="txtTelePhone" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Email Address</label>
                                                <input type="email" maxlength="200" id="txtEmail" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Citizenship</label>
                                                @Html.DropDownList("CitizenShipList", Model.countryList, "Select", new { Name = "CitizenShip", @id = "ddlCitizenship", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Passport</label>
                                                <input type="text" maxlength="30" id="txtPassport" name="name" class="form-control" disabled>
                                            </div>
                                            <div class="form-group">
                                                <input type="checkbox" id="chkIdORPass">&nbsp;
                                                <label>Either Allow Passport Number Or ID Number</label>
                                            </div>
                                            <div class="form-group">
                                                <label>Age</label>
                                                <input type="text" maxlength="25" id="txtAge" name="txtAge" class="form-control" readonly placeholder="Will be Calculated From Date Of Birth">
                                            </div>
                                        </div>
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="btn-group" style="display:none">
                                                    <input type="button" value="Reset" class="btn btn-sm btn-primary" id="btnResetTab1" />  @*onclick="window.location.reload()"*@
                                                </div>
                                                <div class="btn-group">
                                                    @*<input type="button" value="Next" class="btn btn-sm btn-primary" id="btnNextStepPersonalDetails" onclick="return goToTab(1,2)" />*@
                                                    <a data-toggle="tab" href="#tab-2" id="tab1NextButton" class="btn btn-sm btn-primary pull-right m-t-n-xs disabled" aria-expanded="true">Next</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-12 ">
                                            <div class="table-responsive">
                                                @Html.EditorFor(model => model.PolicySearch.PageNum, new { htmlAttributes = new { @class = "hidden", id = "PageNum1" } })
                                                @Html.EditorFor(model => model.PolicySearch.PageSize, new { htmlAttributes = new { @class = "hidden", id = "PageSize1" } })
                                                <table id="memberPolicyDataTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                                                    <thead>
                                                        <tr>
                                                            <th>MemberId</th>
                                                            <th>Policy No</th>
                                                            <th>ID No</th>
                                                            <th>Branch</th>
                                                            <th>Start date</th>
                                                            <th>Inception date</th>
                                                            <th>Cover date</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="modal  fade" id="PolicyUpdatePopupModel" role="dialog" tabindex="-1" aria-hidden="true" style="margin-bottom: 0px; overflow: auto; height: 600px;">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                        <div class="modal-header" style="text-align:center;">
                                                            <span data-dismiss="modal" target="_blank" class="closePopUp">x</span>
                                                            <h4 id="PopForPolicyTitle" class="modal-title" style="font-size">Edit Policy</h4>

                                                        </div>
                                                        <div class="modal-body">
                                                            <div class="row">
                                                                <div class="col-lg-6">

                                                                    <div class="form-group">
                                                                        <label>Plan Name<em>*</em> </label>
                                                                        @Html.DropDownList("PolicyList", Model.PolicyList, "Select", new { Name = "CitizenShip", @id = "ddlPolicyPopupPolicy", @style = "width:100%", @class = "form-control" })
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Premium </label>
                                                                        <input type="text" maxlength="25" id="txtPolicyPopupPremium" name="name" class="form-control" disabled>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>
                                                                            Policy No / Membership No<em>*</em>
                                                                        </label>
                                                                        <input type="text" maxlength="20" id="txtPolicyNo" name="name" class="form-control">
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>EasyPay</label>
                                                                        <input type="text" maxlength="50" id="txtEasyToPay" name="name" class="form-control">
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Select Branch</label>
                                                                        <label>
                                                                            <em>*</em>
                                                                        </label>
                                                                        @Html.DropDownList("BranchList", Model.BranchList, "Select", new { Name = "BranchList", @id = "ddlMemberBranch", @style = "width:100%", @class = "form-control" })
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Custom Payment Method</label>
                                                                        @Html.DropDownList("CustomPaymentMethod", Model.CustomPaymentMethod, "Select", new { Name = "CustomPayment", @id = "ddlPopupCustom1", @style = "width:100%", @class = "form-control" })
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Custom Grouping 2</label>
                                                                        @Html.DropDownList("CustomGrouping2", Model.CustomGrouping2, "Select", new { Name = "CustomGrouping2", @id = "ddlPopupCustom2", @style = "width:100%", @class = "form-control" })
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Custom Grouping 3</label>
                                                                        @Html.DropDownList("CustomGrouping3", Model.CustomGrouping3, "Select", new { Name = "CustomGrouping3", @id = "ddlPopupCustom3", @style = "width:100%", @class = "form-control" })
                                                                    </div>
                                                                </div>
                                                                <div class="col-lg-6">
                                                                    <div class="form-group">
                                                                        <label>Policy Start Date</label>
                                                                        <input type="text" id="txtPolicyStartDate" name="txtPolicyStartDate" class="form-control policyPopupDate DatepickerSelection">
                                                                    </div>

                                                                    <div class="form-group">
                                                                        <label>Policy Inception Date</label>
                                                                        <input type="text" maxlength="25" id="txtPolicyPopupInception" name="name" class="form-control DatepickerSelection">
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Policy Cover Date</label>
                                                                        <input type="text" maxlength="30" id="txtPolicyPopupCoverDate" name="name" class="form-control DatepickerSelection" disabled>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Policy Underwritten By</label>
                                                                        <input type="text" maxlength="50" id="txtPolicyPopupUnderwriter" name="name" class="form-control">
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Policy Agent or Broker</label>

                                                                        @Html.DropDownList("AgentList", Model.AgentList, "Select", new { Name = "Agent", @id = "ddlAgent", @style = "width:100%", @class = "form-control", @disabled = "enabled" })

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Total Premium</label>
                                                                        <input type="text" maxlength="20" id="txtTotalPremium" value="@Model.TotalPremium" name="name" class="form-control" disabled>
                                                                    </div>

                                                                </div>
                                                                <div class="col-lg-12">
                                                                    <div class="form-group">
                                                                        <div class="btn-group">
                                                                            <button id="BtnUpdatePolicyPopup" class="btn btn-sm btn-primary pull-right m-t-n-xs">Update</button>
                                                                        </div>

                                                                        <div class="btn-group">
                                                                            <button class="btn btn-sm btn-primary pull-right m-t-n-xs" data-dismiss="modal">Close</button>
                                                                        </div>

                                                                        @*<div class="btn-group">
                                                    <button class="btn btn-sm btn-primary pull-right m-t-n-xs">Reset</button>
                                                </div>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="policyNextButton" onclick="return goToTab(3,9);">Next</button>
                                                </div>*@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- #endregion Tab1 -->
                                <!-- #region Tab2 -->
                                <div id="tab-2" class="tab-pane">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="input-group">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6" id="Physical">
                                            <div class="form-group">
                                                <label>Member Address</label>
                                                <input type="text" maxlength="100" id="txtStreetPostalAddress" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Street Address</label>
                                                <input type="text" maxlength="50" id="txtStreetAddress" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Town or City</label>
                                                <input type="text" maxlength="50" id="txtTownOrCity" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Province</label>
                                                @Html.DropDownList("Province", new SelectList(ViewBag.Provinces, "ProvinceName", "ProvinceName"), "Select", new { @class = "form-control", @id = "txtProvince" })
                                            </div>
                                            <div class="form-group">
                                                <label>Code</label>
                                                <input type="text" maxlength="50" id="txtCode" onkeypress="return isDecimalNumber(event,this);" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                @*<label>Gender</label><br>*@
                                                @*<input type="checkbox" id="CopyValues" name="CopyValues" class="cb-element"> Check if Physical Address matches Postal Address*@
                                                <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="CopyValues" name="CopyValues">Copy</button>
                                                @*<input type="radio" name="gender" value="1"> Female*@
                                            </div>
                                            <div class="form-group">
                                                <div class="btn-group">
                                                    <a data-toggle="tab" href="#tab-1" id="tab2BackButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Back</a>
                                                </div>
                                                <div class="btn-group" style="display:none">
                                                    <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="btnPhysicalAddressReset">Reset</button>
                                                </div>
                                                <div class="btn-group">
                                                    <a data-toggle="tab" href="#tab-3" id="tab2NextButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Next</a>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6" id="Postal">
                                            <div class="form-group">
                                                <label>Postal Address</label>
                                                <input type="text" maxlength="100" id="txtStreetPostalAddress_Post" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Street Address</label>
                                                <input type="text" maxlength="50" id="txtStreetAddress_Post" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Town or City</label>
                                                <input type="text" maxlength="50" id="txtTownOrCity_Post" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Province</label>
                                                @Html.DropDownList("Province", new SelectList(ViewBag.Provinces, "ProvinceName", "ProvinceName"), "Select", new { @class = "form-control", @id = "txtProvince_Post" })
                                            </div>
                                            <div class="form-group">
                                                <label>Code</label>
                                                <input type="text" maxlength="50" id="txtCode_Post" onkeypress="return isDecimalNumber(event,this);" name="name" class="form-control">
                                            </div>
                                            @*<div class="form-group">
                        <div class="btn-group">
                            <a data-toggle="tab" href="#tab-1" id="tab2BackButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Back</a>
                        </div>
                        <div class="btn-group" style="display:none">
                            <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="btnPhysicalAddressReset">Reset</button>
                        </div>
                        <div class="btn-group">
                            <a data-toggle="tab" href="#tab-3" id="tab2NextButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Next</a>
                        </div>
                    </div>*@
                                        </div>
                                    </div>
                                </div>
                                <!-- #endregion Tab2 -->
                                <!-- #region Tab3 -->
                                <div id="tab-3" class="tab-pane">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="input-group" style="color:red;">
                                                    <ul id="validationTabMessage" hidden></ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">

                                            <div class="form-group">
                                                <label>Plan Name<em>*</em> </label>
                                                @Html.DropDownList("PolicyList", Model.PolicyList, "Select", new { Name = "CitizenShip", @id = "ddlPolicy", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Premium </label>
                                                <input type="text" maxlength="25" id="txtPolicyPremium" name="name" class="form-control" disabled>
                                            </div>
                                            <div class="form-group">
                                                <label> Cover Amount</label>
                                                <input type="text" maxlength="25" id="txtPolicyCoverAmount" name="name" class="form-control" disabled>
                                            </div>
                                            <div class="form-group">
                                                <label>
                                                    Membership Number<em>*</em>
                                                </label>
                                                @if ((bool)TempData["IsPolicyNoEnabled"])
                                                {
                                                    @Html.TextBox("name", null, new { @maxlength = "20", @class = "form-control", id = "txtPolicyNo" })
                                                }
                                                else
                                                {
                                                    @Html.TextBox("name", null, new { @maxlength = "20", @class = "form-control", id = "txtPolicyNo", @disabled = "disabled" })
                                                }
                                                @*<input type="text" maxlength="20" id="txtPolicyNo" name="name" class="form-control">*@
                                            </div>
                                            <div class="form-group">
                                                <label>EasyPay</label>
                                                <input type="text" maxlength="50" id="txtEasyToPay" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Select Branch<em>*</em></label>
                                                @Html.DropDownList("BranchList", Model.BranchList, "Select", new { Name = "BranchList", @id = "ddlMemberBranch", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group" style="display:none">
                                                <label>Custom Payment Method</label>
                                                @Html.DropDownList("CustomPaymentMethod", Model.CustomPaymentMethod, "Select", new { Name = "CustomPayment", @id = "ddlCustom1", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group" style="display:none">
                                                <label>Custom Grouping 2</label>
                                                @Html.DropDownList("CustomGrouping2", Model.CustomGrouping2, "Select", new { Name = "CustomGrouping2", @id = "ddlCustom2", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group" style="display:none">
                                                <label>Custom Grouping 3</label>
                                                @Html.DropDownList("CustomGrouping3", Model.CustomGrouping3, "Select", new { Name = "CustomGrouping3", @id = "ddlCustom3", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Total Premium</label>
                                                <input type="text" maxlength="20" id="txtTotalPremium" value="@Model.Currency @Model.TotalPremium" name="name" class="form-control" disabled>
                                            </div>

                                        </div>
                                        <div class="col-lg-6">
                                            <div class="form-group">
                                                <label>Policy Start Date</label>
                                                <input type="text" id="txtPolicyStartDate" name="txtPolicyStartDate" class="form-control date1 DatepickerSelection">
                                            </div>

                                            <div class="form-group">
                                                <label>Policy Inception Date</label>
                                                <input type="text" maxlength="25" id="txtInception" name="name" class="form-control date2 datepicker DatepickerSelection">
                                            </div>
                                            <div class="form-group" style="display:none;">
                                                <label>Policy Cover Date</label>
                                                <input type="text" maxlength="30" id="txtCoverDate" name="name" class="form-control DatepickerSelection" disabled>
                                            </div>
                                            <div class="form-group">
                                                <label>Policy Underwritten By</label>
                                                <input type="text" maxlength="50" id="txtUnderwriter" name="name" class="form-control">
                                            </div>

                                            @*<div class="form-group">
                        <label>Policy Underwritten By</label>
                        @Html.DropDownList("UnderwritterList", Model.UnderwritterList, "Select", new { Name = "Underwritter", @id = "ddlUnderwritter", @style = "width:100%", @class = "form-control" })
                    </div>*@

                                            <div class="form-group">
                                                <label>Policy Agent or Broker</label>

                                                @{
                                                    if (Model.IsAdministrator == true || Model.IsSuperUser == true)
                                                    {
                                                        @Html.DropDownList("AgentList", Model.AgentList, "Select", new { Name = "Agent", @id = "ddlAgent", @style = "width:100%", @class = "form-control" })
                                                    }
                                                    else if (Model.Member.pkiMemberID > 0)
                                                    {
                                                        @Html.DropDownList("AgentList", Model.AgentList, "Select", new { Name = "Agent", @id = "ddlAgent", @style = "width:100%", @class = "form-control", @disabled = "false" })
                                                    }
                                                    else
                                                    {
                                                        @Html.DropDownList("AgentList", Model.AgentList, "Select", new { Name = "Agent", @id = "ddlAgent", @style = "width:100%", @class = "form-control" })
                                                    }
                                                }
                                            </div>
                                            <div class="form-group">
                                                <label>Policy Status</label>
                                                @{
                                                    if (Model.IsAdministrator == true || Model.IsSuperUser == true)
                                                    {
                                                        @Html.DropDownList("StatusList", new SelectList(ViewBag.Statuses, "Status", "Status"), new { @class = "form-control", @id = "ddlPolicyStatus", @name = "ddlPolicyStatus" })
                                                    }
                                                    else if (Model.Member.pkiMemberID > 0)
                                                    {
                                                        @Html.DropDownList("StatusList", new SelectList(ViewBag.Statuses, "Status", "Status"), new { @class = "form-control", @id = "ddlPolicyStatus", @name = "ddlPolicyStatus", @disabled = "disabled" })
                                                    }
                                                    else
                                                    {
                                                        @Html.DropDownList("StatusList", new SelectList(ViewBag.Statuses, "Status", "Status"), new { @class = "form-control", @id = "ddlPolicyStatus", @name = "ddlPolicyStatus" })
                                                    }
                                                }

                                            </div>
                                            <div class="form-group">
                                                <label>Employee Number</label>
                                                <input type="text" maxlength="50" id="txtReferenceNumber" name="name" class="form-control">
                                            </div>
                                        </div>
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="btn-group">
                                                    @*<a data-toggle="tab" href="#tab-2" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true"></a>*@
                                                    <a data-toggle="tab" href="#tab-2" id="tab3BackButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Back</a>
                                                    @*<button class="btn btn-sm btn-primary pull-right m-t-n-xs" onclick="return goToTab(3,2);">Back</button>*@
                                                </div>
                                                <div class="btn-group" style="display:none">
                                                    <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="btnResetTab3">Reset</button>
                                                </div>
                                                <div class="btn-group">
                                                    <a data-toggle="tab" href="#tab-9" id="tab3NextButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Next</a>
                                                    @*<button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="policyNextButton" onclick="return goToTab(3,9);">Next</button>*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <!-- #endregion Tab3 -->
                                <!-- #region Tab9 -->
                                <div id="tab-9" class="tab-pane">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="input-group">
                                                    <div id="ValidationSummary5" style="color: red;" hidden>
                                                        <ul></ul>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.ValidationSummary(false, "", new { @id = "AddUpdateAddOnProductValidationSummary", @style = "color: red;" })
                                            </div>
                                            <div class="form-group">
                                                <div class="input-group">
                                                    <input type="hidden" id="fkiMemberid" name="fkiMemberid" value="">
                                                    <input type="hidden" id="pkiMemberProductID" name="pkiMemberProductID" value="">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="form-group">
                                                <label>Member Type</label>
                                                @Html.DropDownList("DependencyList_Product", Model.ExtendedFamily, "Main Member", new { Name = "Dependency", @id = "ddlDependentDependencyType_Product", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Product Name</label>
                                                @Html.DropDownList("ProductAddOnList", Model.ProductAddOnList, "Select", new { Name = "ProductAddOn", @id = "drpProductName", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <button class="btn btn-sm btn-primary" id="btnSaveProduct">Save AddonProducts</button> @*onclick="SaveAddOnProduct()"*@
                                                <button class="btn btn-sm btn-primary" id="btnUpdateProduct" onclick="UpdateAddOnProduct()">Update AddonProducts</button>
                                                <br />
                                                <br />
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="form-group">
                                                <label>Premium</label>
                                                <input type="hidden" id="hdnPremium" name="hdnPremium" value="">
                                                <input type="text" maxlength="20" id="txtPremium" name="name" class="form-control" placeholder="Premium" step="0.01" value="0.00">
                                            </div>
                                            <div class="form-group">
                                                <label>Cover</label>
                                                <input type="hidden" id="hdnSupCover" name="hdnSupCover" value="">
                                                <input type="text" maxlength="20" id="txtSupCover" name="name" class="form-control" placeholder="Cover" step="0.01" value="0.00" disabled>
                                            </div>
                                        </div>
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                @*<div class="btn-group">
                    <a data-toggle="tab" href="#tab-3" id="tab9BackButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Back</a>
                </div>*@
                                                <div class="btn-group" style="display:none">
                                                    <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="btnResetTab9">Reset</button>
                                                </div>
                                                @*<div class="btn-group">
                    <a data-toggle="tab" href="#tab-4" id="tab9NextButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Next</a>
                </div>*@
                                            </div>
                                        </div>
                                        <div class="col-lg-12">
                                            <div class="table-responsive">
                                            </div>
                                        </div>

                                    </div>
                                    <div class="row">
                                        <div class="col-lg-12 ">
                                            <div class="table-responsive">
                                                @Html.EditorFor(model => model.ProductSearch.PageNum, new { htmlAttributes = new { @class = "hidden", id = "PageNum1" } })
                                                @Html.EditorFor(model => model.ProductSearch.PageSize, new { htmlAttributes = new { @class = "hidden", id = "PageSize1" } })
                                                <table id="productDataTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                                                    <thead>
                                                        <tr>
                                                            <th>pkiMemberProductID</th>
                                                            <th>Product ID</th>
                                                            <th>Product Name</th>
                                                            <th>Dependency Name</th>
                                                            <th>Date Created</th>
                                                            <th>Product Cost</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- #endregion Tab9 -->
                                <!-- #region Tab4 -->
                                <div id="tab-4" class="tab-pane">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="input-group" style="color:red;">
                                                    <ul id="validationTab4Message" hidden></ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="form-group">
                                                <label>Account Holder</label>
                                                <input type="text" maxlength="25" id="txtAccountholder" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Bank Name</label>
                                                @Html.DropDownList("BankList", Model.BankList, "Select", new { Name = "BankName", @id = "ddlBank", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Bank Branch</label>
                                                <input type="text" maxlength="25" id="txtBankBranch" name="name" class="form-control">
                                            </div>

                                            <div class="form-group">
                                                <label>Branch Code</label>
                                                <input type="text" maxlength="25" id="txtBranchCode" name="name" class="form-control" readonly>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="form-group">
                                                <label>Account Number</label>
                                                <input type="text" maxlength="25" id="txtAccountNumber" name="name" class="form-control">
                                            </div>
                                            <div class="form-group">
                                                <label>Account Type</label>
                                                @Html.DropDownList("AccountTypeList", Model.AllAccountTypesList, "Select", new { Name = "AccountType", @id = "ddlAccountType", @style = "width:100%", @class = "form-control" })
                                            </div>
                                            <div class="form-group">
                                                <label>Debit Date</label>
                                                <input type="text" maxlength="25" id="txtDebitDate" name="name" class="form-control date4 DatepickerSelection">
                                            </div>
                                        </div>
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                <div class="btn-group">
                                                    <a data-toggle="tab" href="#tab-3" id="tab4BackButton" class="btn btn-sm btn-primary pull-right m-t-n-xs" aria-expanded="true">Back</a>
                                                    @*<button class="btn btn-sm btn-primary pull-right m-t-n-xs" onclick="return goToTab(4,9);">Back</button>*@
                                                </div>
                                                <div class="btn-group" style="display:none">
                                                    <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="btnResetTab4">Reset</button>
                                                </div>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="txtSaveBtn">Save</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- #endregion Tab4 -->
                                <!-- #region Tab5 -->
                                <div id="tab-5" class="tab-pane">
                                    <div class="row form-group" id="tab5Dependent">
                                        <div class="col-lg-12 ">
                                            <div class="ibox float-e-margins">
                                                <div class="ibox-title">
                                                    <h5>Add/Update Dependent</h5>
                                                    <div class="ibox-tools">
                                                        <a class="collapse-link">
                                                            <i class="fa fa-chevron-up"></i>
                                                        </a>
                                                        <a class="close-link">
                                                            <i class="fa fa-times"></i>
                                                        </a>
                                                    </div>
                                                </div>
                                                <div class="ibox-content">
                                                    <div class="col-lg-12">
                                                        <div class="form-group">
                                                            <div class="input-group">
                                                                <div id="ValidationSummary4" style="color: red;" hidden>
                                                                    <ul></ul>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-lg-12">
                                                            <div class="form-group">
                                                                <div class="input-group">
                                                                    <input type="hidden" id="hdnDependantId" name="hdnDependantId" />
                                                                    @Html.ValidationSummary(false, "", new { @id = "AddUpdateDependantValidationSummary", @style = "color: red;" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-6">
                                                            <div class="form-group">
                                                                <label>Full Name <em>*</em></label>
                                                                <input type="text" maxlength="25" id="txtDependentFirstname" name="name" class="form-control">
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Surname <em>*</em></label>
                                                                <input type="text" maxlength="25" id="txtDependentLastname" name="name" class="form-control">
                                                            </div>
                                                            <div class="form-group">
                                                                <label>ID Number <em>*</em></label>
                                                                <input type="text" pattern="/d*" maxlength="13" id="txtDependentIdNumber" name="name" class="form-control" onkeyup="DependentExtendedIDNumberChanges();" onblur="IdNumberBasicValidation(txtDependentIdNumber);">
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Date Of Birth <em>*</em></label>
                                                                <input type="text" id="txtDependentDateOfBirth" name="txtDateOfBirth" class="form-control dependantDOB DatepickerSelection">
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Age</label>
                                                                <input type="text" maxlength="25" id="txtDependentAge" name="name" class="form-control" readonly>
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Premium <em>*</em></label>
                                                                <input type="text" maxlength="25" id="txtDependentPremium" name="name" class="form-control" disabled>
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Gender</label>
                                                                <br />
                                                                &nbsp; &nbsp;
                                                                <input type="radio" name="dependentGender" value="male" id="male" checked="checked"> Male
                                                                <input type="radio" name="dependentGender" value="female" id="female"> Female
                                                                <br>
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-6">
                                                            <div class="form-group">
                                                                <label>Start Date <em>*</em></label>
                                                                <input type="text" maxlength="30" id="txtDependentStartDate" name="txtDependentStartDate"
                                                                       class="form-control dependantStartDate DatepickerSelection">
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Inception Date <em>*</em></label>
                                                                <input type="text" maxlength="25" id="txtDependentInceptionDate" name="txtDependentInceptionDate"
                                                                       class="form-control dependantInceptionDate DatepickerSelection">
                                                            </div>

                                                            <div class="form-group">
                                                                <label>Cover Date <em>*</em></label>
                                                                <input type="text" maxlength="25" id="txtDependentCoverDate" name="txtDependentCoverDate"
                                                                       class="form-control dependantCoverDate DatepickerSelection" readonly>
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Relationship Type</label>
                                                                @*<input type="text" maxlength="25" id="txtDepnduncyType" name="name" class="form-control">*@
                                                                @Html.DropDownList("DependencyList", Model.DependencyTypeList, "Select", new { Name = "Dependency", @id = "ddlDependentDependencyType", @style = "width:100%", @class = "form-control" })
                                                            </div>
                                                            <div class="form-group">
                                                                <label>Status</label>
                                                                <select id="ddl_DependentStatus" class="form-control">
                                                                    <option value="Active">Active</option>
                                                                    <option value="Cancelled">Cancelled</option>
                                                                    <option value="Deceased">Deceased</option>
                                                                    <option value="Deleted">Deleted</option>
                                                                    <option value="Lapsed">Lapsed</option>
                                                                    <option value="NTU">NTU</option>
                                                                    <option value="On Trial">On Trial</option>
                                                                </select>
                                                            </div>
                                                            @*<div class="form-group">
                                        <label>Premium<em>*</em></label>
                                        <input type="text" maxlength="25" id="txtDependentPremium" name="name" class="form-control" disabled>
                                    </div>*@
                                                            <div class="form-group">
                                                                <label>Cover Amount <em>*</em></label>
                                                                <input type="text" maxlength="25" id="txtDependentCoverAmount" name="name" class="form-control" disabled>
                                                            </div>

                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <div class="form-group">
                                                            <div class="btn-group" style="display:none">
                                                                <button class="btn btn-sm btn-primary pull-right m-t-n-xs">Reset</button>
                                                            </div>
                                                            <div class="btn-group">
                                                                <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="btnSaveDependent" onclick="SaveDependants()">Save</button>
                                                                <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="btnUpdateDependent" onclick="UpdateDependants()">Update</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12 ">
                                        <div class="table-responsive">
                                            @Html.EditorFor(model => model.DependancySearch.PageNum, new { htmlAttributes = new { @class = "hidden", id = "PageNum1" } })
                                            @Html.EditorFor(model => model.DependancySearch.PageSize, new { htmlAttributes = new { @class = "hidden", id = "PageSize1" } })
                                            <table id="dependantExtendedFamilyDataTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                                                <thead>
                                                    <tr>
                                                        <th>pkiDependentID</th>
                                                        <th>Name</th>
                                                        <th>IDNumber</th>
                                                        <th>Start Date</th>
                                                        <th>InceptionDate</th>
                                                        <th>CoverDate</th>
                                                        <th>Premium</th>
                                                        <th>Cover</th>
                                                        <th>DependencyType</th>
                                                        <th>Gender</th>
                                                        <th>Status</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody></tbody>
                                            </table>
                                        </div>

                                    </div>
                                </div>
                                <!-- #endregion Tab5 -->
                                <!-- #region Tab6 -->
                                <div id="tab-6" class="tab-pane">
                                    <br />
                                    <br />
                                    <div class="col-lg-12 ">
                                        <div class="table-responsive">
                                            @Html.EditorFor(model => model.InvoiceSearch.PageNum, new { htmlAttributes = new { @class = "hidden", id = "PageNum1" } })
                                            @Html.EditorFor(model => model.InvoiceSearch.PageSize, new { htmlAttributes = new { @class = "hidden", id = "PageSize1" } })
                                            <table id="invoiceDataTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                                                <thead>
                                                    <tr>
                                                        <th>InvoiceID</th>
                                                        <th>Amount</th>
                                                        <th>Date Paid</th>
                                                        <th>Received By</th>
                                                        <th>Invoice Number</th>
                                                        <th>Payment Branch</th>
                                                    </tr>
                                                </thead>
                                                <tbody></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                <!-- #endregion Tab6 -->
                                <!-- #region Tab7 -->
                                <div id="tab-7" class="tab-pane">
                                    <br />
                                    <br />
                                    <div class="row">
                                        <div class="col-lg-6">
                                            <div class="form-group row">
                                                @Html.ValidationSummary(false, "", new { @id = "AddUpdateNoteValidationSummary", @style = "color: red;" })
                                            </div>
                                            <div class="form-group row">
                                                @Html.Hidden("pkiNoteId", new { Id = "pkiNoteId" })
                                                <label class="col-lg-12">Enter note description</label>
                                                <textarea class="col-lg-12" type="text" rows="3" maxlength="255" id="txtNote" placeholder="Enter Note"></textarea>
                                            </div>
                                            <div class="form-group row text-center">
                                                <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="BtnAddNote" tex>Save</button>
                                                <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="BtnUpdateNote">Update</button>
                                                <br />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-12 ">
                                            <div class="table-responsive">
                                                @Html.EditorFor(model => model.NoteSearch.PageNum, new { htmlAttributes = new { @class = "hidden", id = "PageNum1" } })
                                                @Html.EditorFor(model => model.NoteSearch.PageSize, new { htmlAttributes = new { @class = "hidden", id = "PageSize1" } })
                                                <table id="noteDataTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                                                    <thead>
                                                        <tr>
                                                            <th>pkiNoteID</th>
                                                            <th>Notes</th>
                                                            <th>NoteDate</th>
                                                            <th>LastModified</th>
                                                            <th>LastModifiedBy</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                            <div class="modal inmodal fade" id="noteModal" role="dialog" hidden="true">
                                                <div class="modal-dialog modal-lg">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <button type="button" class="close" data-dismiss="modal">
                                                                &times;
                                                            </button>
                                                            <h2 class="modal-title"></h2>
                                                            <small class="font-bold"></small>
                                                        </div>
                                                        <div class="modal-body">

                                                        </div>
                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-danger" data-dismiss="modal">
                                                                Close
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- #endregion Tab7 -->
                                <!-- #region Tab8 -->
                                <div id="tab-8" class="tab-pane">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="form-group">
                                                @Html.ValidationSummary(false, "", new { @id = "AddUpdateDocumentValidationSummary", @style = "color: red;" })
                                            </div>
                                            <div class="form-group">
                                                <label>Select Supported Document File</label>
                                                <div class="input-group">
                                                    <input type="file" name="fuSupportDocument" id="fuSupportDocument" />
                                                    @*<asp:FileUpload ID="fuSupportDocument" runat="server" />*@
                                                    <span class="input-group-btn">
                                                        &nbsp;
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div id="input-type" class="row">
                                                    <div class="col-sm-3">
                                                        <label class="radio-inline" for="rbtnDocumentsPassport">
                                                            <input type="radio" name="supportedDocuments" id="rbtnDocumentsPassport" value="1" style="margin-left:-10%!important;">
                                                            Id Documents/ passports – main member – spouse
                                                        </label>
                                                    </div>
                                                    <div class="col-sm-2">
                                                        <label class="radio-inline" for="rbtnMarriageCertificate">
                                                            <input type="radio" name="supportedDocuments" id="rbtnMarriageCertificate" value="2" style="margin-left:-20%!important;">
                                                            Marriage certificate
                                                        </label>
                                                    </div>
                                                    <div class="col-sm-2">
                                                        <label class="radio-inline" for="rbtnBirthCertificate">
                                                            <input type="radio" name="supportedDocuments" id="rbtnBirthCertificate" value="3" style="margin-left:-20%!important;">
                                                            Dependants – birth certificate
                                                        </label>
                                                    </div>
                                                    <div class="col-sm-3">
                                                        <label class="radio-inline" for="rbtnPolicyCertificate">
                                                            <input type="radio" name="supportedDocuments" id="rbtnPolicyCertificate" value="4" style="margin-left:-20%!important;">
                                                            Policy Document
                                                        </label>
                                                    </div>
                                                    <div class="col-sm-2">
                                                        <label class="radio-inline" for="rbtnOtherCertificate">
                                                            <input type="radio" name="supportedDocuments" id="rbtnOtherCertificate" value="5" style="margin-left:-20%!important;">
                                                            Other Document
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <button class="btn btn-sm btn-primary pull-right m-t-n-xs" id="BtnAddDocument" tex>Save Document</button>
                                                <br />
                                            </div>
                                            <div class="form-group">
                                                <div class="col-lg-12 ">
                                                    <div class="table-responsive">
                                                        @Html.EditorFor(model => model.DocumentSearch.PageNum, new { htmlAttributes = new { @class = "hidden", id = "PageNum1" } })
                                                        @Html.EditorFor(model => model.DocumentSearch.PageSize, new { htmlAttributes = new { @class = "hidden", id = "PageSize1" } })
                                                        <table id="documentsDataTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                                                            <thead>
                                                                <tr>
                                                                    <th>pkiPictureID</th>
                                                                    <th>ImageName</th>
                                                                    <th>DocType</th>
                                                                    <th>CreateDate</th>
                                                                    <th>Actions</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody></tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-12 ">
                                            <div class="table-responsive">

                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- #endregion Tab8 -->
                                <!-- #region Tab10 -->
                                <div id="tab-10" class="tab-pane">
                                    @Html.Partial("_AddEditBeneficiary", Model)
                                </div>
                                <div id="tab-11" class="tab-pane">
                                    @{
                                        var auditModel = ViewBag.AuditList;
                                    }

                                    <div class="row">
                                        <div class="col-lg-12 ">
                                            <div class="table-responsive">
                                                @*@Html.EditorFor(model => model.PageNum, new { htmlAttributes = new { @class = "hidden", id = "PageNum1" } })*@
                                                @*@Html.EditorFor(model => model.PageSize, new { htmlAttributes = new { @class = "hidden", id = "PageSize1" } })*@
                                                @Html.Hidden("ItemId")
                                                <table id="auditTrailDataTable" class="table table-striped table-bordered table-hover" width="100%" cellspacing="0">
                                                    <thead></thead>
                                                    <tbody>
                                                        <tr>
                                                            <th class="hidden"></th>
                                                            <th>User</th>
                                                            <th>Action</th>
                                                            <th>Action Description</th>
                                                            <th>Date</th>
                                                        </tr>
                                                        @if (auditModel != null && auditModel.Count > 0)
                                                        {
                                                            foreach (var item in auditModel)
                                                            {
                                                                <tr>
                                                                    <td>@item.User</td>
                                                                    <td>@item.Action</td>
                                                                    <td>@item.ActionDesc</td>
                                                                    <td>@item.ActionDate</td>
                                                                    @*<td>
                                                                        <a href="@url.action("printform", "grouppayment", new{ groupinvoiceid= item.groupinvoiceid})"><i class="glyphicon glyphicon-print"></i></a>
                                                                        <div class="col-sm-4 text-center"><a href="@url.action("printform", "grouppayment", null, request.url.scheme)?groupinvoiceid=@item.groupinvoiceid"><i class="glyphicon glyphicon-print"></i></a></div>
                                                                    </td>*@
                                                                </tr>
                                                            }
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="TaskCopyPopupModel" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <span data-dismiss="modal" target="_blank" class="closePopUp">x</span>
                <h4 id="PopForCopyTitle" class="modal-title"></h4>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <label>Premium<em>*</em> </label>
                            <input type="text" id="popupTxtPremium" class="form-control" value="">
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="pull-right">
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-primary" ID="btnPremiumSubmit">Submit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="DependencyCopiedPolicyPopupModel" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <span data-dismiss="modal" target="_blank" class="closePopUp">x</span>
                <h4 id="PopForDependencyTitle" class="modal-title">Add Dependents for a Copiedpolicy</h4>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="input-group">
                                <div id="ValidationSummary3" style="color: red;" hidden>
                                    <ul></ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label>Surame <em>*</em></label>
                            <input type="text" maxlength="25" id="txtLastnamePopup" name="name" class="form-control">
                        </div>

                        <div class="form-group">
                            <label>Full name <em>*</em></label>
                            <input type="text" maxlength="25" id="txtFirstnamePopup" name="name" class="form-control">
                        </div>
                        <div class="form-group">
                            <label>ID Number <em></em></label>
                            <input type="text" pattern="/d*" maxlength="13" id="txtIdNumberPopup" name="name" class="form-control" onkeyup="DateComparisionJavascriptPopup();">
                        </div>
                        <div class="form-group">
                            <label>Date Of Birth <em>*</em></label>
                            <input type="text" id="txtDateOfBirthPopup" name="txtDateOfBirth" class="form-control dependantDOB DatepickerSelection">
                        </div>
                        <div class="form-group">
                            <label>Age</label>
                            <input type="text" maxlength="25" id="txtAgePopup" name="name" class="form-control" placeholder="Will be Calculated From Date Of Birth" readonly>
                        </div>
                        <div class="form-group">
                            <label>Gender</label>
                            <br />
                            &nbsp &nbsp
                            <input type="radio" name="genderPopup" value="male"> Male
                            <input type="radio" name="genderPopup" value="female"> Female
                            <br>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label>Start Date <em>*</em></label>
                            <input type="text" maxlength="30" id="txtStartDatePopup" name="txtStartDate"
                                   class="form-control dependantStartDate DatepickerSelection">
                        </div>
                        <div class="form-group">
                            <label>Inception Date <em>*</em></label>
                            <input type="text" maxlength="25" id="txtInceptionDatePopup" name="txtInceptionDate"
                                   class="form-control dependantInceptionDate DatepickerSelection">
                        </div>

                        <div class="form-group">
                            <label>Cover Date <em>*</em></label>
                            <input type="text" maxlength="25" id="txtCoverDatePopup" name="txtCoverDate" class="form-control dependantCoverDate DatepickerSelection" readonly>
                        </div>
                        <div class="form-group">
                            <label>Select Supplimentory Benefit</label>
                            @*<input type="text" maxlength="25" id="txtDepnduncyType" name="name" class="form-control">*@
                            @Html.DropDownList("DependencyList", Model.DependencyTypeList, "Select", new { Name = "Dependency", @id = "ddlDependencyTypePopup", @style = "width:100%", @class = "form-control" })
                        </div>
                        <div class="form-group">
                            <label>Premium <em>*</em></label>
                            <input type="text" maxlength="25" id="txtPremiumPopup" name="name" class="form-control">
                        </div>

                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="pull-right">
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-primary" id="btnDependencyCopiedPolicy">Submit</button>
                                    @*<asp:Button class="btn btn-sm btn-primary" Visible="true" ID="btnDependencyCopiedPolicy" runat="server" Text="Add Dependent to Copied Policy" OnClick="btnDependencyCopiedPolicy_Click" />*@
                                </div>
                            </div>
                            @*<%--<asp:RequiredFieldValidator ValidationGroup="tab4" ControlToValidate="txtAccountno" ID="RequiredFieldValidator26" ForeColor="red" runat="server" ErrorMessage="Please enter account number" Display="None"></asp:RequiredFieldValidator>--%>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var planId = 0;
    var pkiMemberId = '@((int)Session["Id"])'
    $(window).load(function() {
        $("#tab1").addClass("active");
    })
    jQuery(function ($) {
        $(document).ajaxStart(function () {
            $('#AjaxLoader').show();
        }).ajaxStop(function () {
            $('#AjaxLoader').hide();
        });

        $(document).ready(function () {
            var productDatatable;
            var invoiceDatatable;
            var noteDatatable;
            var documentDatatable;
            var dependancyDatatable;
            var memberPolicyDatatable;

            $("#txtBirthDay").datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date(), onSelect: function (dateText) { $(this).change(); } }).on("change", function () {
                Validate();
            });

            $("#tab-1 #ddlCitizenship option").each(function () {
                if ($(this).val() == "ZA") {
                    $(this).attr('selected', 'selected');
                }
            });

            if (@memberId== 0) {
                $("#productDataTable").parent().hide();
            }

            $("#tab2NextButton").click(function () {
                $("#tab2").removeClass('active')
                $("#tab3").addClass("active");
            })
            $("#tab3NextButton").click(function () {
                $("#tab3").removeClass('active')
                //$("#tab9").addClass("active");
                $("#tab4").addClass("active");
            })
            //$("#tab9NextButton").click(function () {
            //    $("#tab9").removeClass('active')
            //    $("#tab4").addClass("active");
            //})

            //Back Button click event to active tab
            $("#tab2BackButton").click(function () {
                $("#tab2").removeClass("active");
                $("#tab1").addClass('active');
            })
            $("#tab3BackButton").click(function () {
                $("#tab3").removeClass("active");
                $("#tab2").addClass('active');
            })
            //$("#tab9BackButton").click(function () {
            //    $("#tab9").removeClass("active");
            //    $("#tab3").addClass('active');
            //})
            $("#tab4BackButton").click(function () {
                $("#tab4").removeClass("active");
                $("#tab3").addClass('active');
            })

            //Tab1 validation
            $("#tab1NextButton").click(function () {
                var lastName = $("#txtLastName").val();
                var SelectedCompanyId = $("#ddlSelectCompany").val();
                var FirstName = $("#txtFirstname").val();
                var IdNumber = $("#txtIdNumber").val();
                var CellNumber = $("#txtCellphone").val();
                var TellNumber = $("#txtTelePhone").val();
                var flag = true;
                var lastNameFlag = true;
                var firstNameFlag = true;
                var idNumberFlag = true;
                var cellNumberFlag = true;
                var teleNumberFlag = true;
                var Agent = $("#ddlAgent").text();
                //all fields are blank
                if (lastName == "" && FirstName == "" && IdNumber == "" && CellNumber == "" && TellNumber == "" && (SelectedCompanyId == "" || SelectedCompanyId == null)) {
                    $("#validationMessage").show();
                    $("#validationMessage").append('<li id="EnterLastNameid">Please Enter Surename.</li>');
                    $("#validationMessage").append('<li id="EnterFirstName">Please Enter Full Name.</li>');
                    $("#validationMessage").append('<li id="enterIdNumber">Please Enter ID Number.</li>');
                    $("#validationMessage").append('<li id="txtCellphonevalId">Please Enter Cell Number.</li>');
                    $("#validationMessage").append('<li id="txtTelePhoneid">Please Enter Telephone Number.</li>');
                    $("#validationMessage").append('<li id="ddlCompanySelection">Please Select Scheme.</li>');
                    flag = false;
                }

                if (lastName != "") {
                    lastNameFlag = true;
                    //var regex = new RegExp("^[a-zA-Z]+$");
                    //if (regex.test(lastName)) {
                    //    $("li#txtLastNameid").hide();
                    //    $("li#txtLastNameid").html('');
                    //    $("li#EnterLastNameid").hide();
                    //    $("li#EnterLastNameid").html('');
                    //    lastNameFlag = true;
                    //}
                    //else
                    //{
                    //    $("li#txtLastNameid").hide();
                    //    $("li#txtLastNameid").html('');
                    //    $("li#EnterLastNameid").hide();
                    //    $("li#EnterLastNameid").html('');
                    //    $("#validationMessage").show();
                    //    $("#validationMessage").append('<li id="txtLastNameid">Surname Enter Only characters.</li>');
                    //    lastNameFlag = false;
                    //}
                } else {
                    $("li#txtLastNameid").hide();
                    $("li#txtLastNameid").html('');
                    $("li#EnterLastNameid").hide();
                    $("li#EnterLastNameid").html('');
                    $("#validationMessage").show();
                    $("#validationMessage").append('<li id="EnterLastNameid">Please Enter Surname.</li>');
                    lastNameFlag = false;
                }
                if (FirstName != "") {
                    firstNameFlag = true;
                    //var regex = new RegExp("^[a-zA-Z]+$");
                    //if (regex.test(FirstName)) {
                    //    $("li#txtFirstNameid").hide();
                    //    $("li#txtFirstNameid").html('');
                    //    $("li#EnterFirstName").hide();
                    //    $("li#EnterFirstName").html('');
                    //    firstNameFlag = true;
                    //}else{
                    //    $("li#txtFirstNameid").hide();
                    //    $("li#txtFirstNameid").html('');
                    //    $("li#EnterFirstName").hide();
                    //    $("li#EnterFirstName").html('');
                    //    $("li#validationMessage").show();
                    //    $("#validationMessage").append('<li id="txtFirstNameid">Full name Enter Only characters</li>');
                    //    firstNameFlag = false;
                    //}
                } else {
                    $("li#txtFirstNameid").hide();
                    $("li#txtFirstNameid").html('');
                    $("li#EnterFirstName").hide();
                    $("li#EnterFirstName").html('');
                    $("#validationMessage").show();
                    $("#validationMessage").append('<li id="EnterFirstName">Please Enter Full name.</li>');
                    firstNameFlag = false;
                }
                if (IdNumber != "") {
                    var numericReg = /^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$/;
                    if (numericReg.test(IdNumber)) {
                        $("li#txtIdNumberid").hide();
                        $("li#txtIdNumberid").html('');
                        $("li#enterIdNumber").hide();
                        $("li#enterIdNumber").html('');
                        idNumberFlag = true;
                    }
                    else {
                        $("li#txtIdNumberid").hide();
                        $("li#txtIdNumberid").html('');
                        $("li#enterIdNumber").hide();
                        $("li#enterIdNumber").html('');
                        $("#validationMessage").show();
                        $("#validationMessage").append('<li id="txtIdNumberid">Invalid Id Number</li>');
                        idNumberFlag = false;
                    }
                } else {
                    $("li#txtIdNumberid").hide();
                    $("li#txtIdNumberid").html('');
                    $("li#enterIdNumber").hide();
                    $("li#enterIdNumber").html('');
                    $("#validationMessage").show();
                    $("#validationMessage").append('<li id="enterIdNumber">Please Enter ID Number.</li>');
                    idNumberFlag = false;
                }

                if (CellNumber != "") {
                    $("li#txtCellphonevalId").html('');
                    $("li#txtCellphonevalId").hide('');
                    cellNumberFlag = true;
                } else {
                    $("li#txtCellphonevalId").html('');
                    $("li#txtCellphonevalId").hide('');
                    $("#validationMessage").show();
                    $("#validationMessage").append('<li id="txtCellphonevalId">Please Enter Cellphone Number.</li>');
                    cellNumberFlag = false;
                }

                if ($("#txtPassport").val() != "") {
                    $("li#txtIdNumberid").hide();
                    $("li#txtIdNumberid").html('');
                    $("li#enterIdNumber").hide();
                    $("li#enterIdNumber").html('');
                    idNumberFlag = true;
                }
                if (flag == false || firstNameFlag == false || lastNameFlag == false || idNumberFlag == false || cellNumberFlag == false || teleNumberFlag == false)
                    return false;
                else {
                    $("#tab1").removeClass('active')
                    $("#tab2").addClass("active");
                    return true;
                }

            })

            //Tab3 validation
            $("#tab3NextButton").click(function () {
                var policyName = $("#tab-3 #ddlPolicy").val();
                var PolicyNo = $("#tab-3 #txtPolicyNo").val();
                var BranchName = $("#tab-3 #ddlMemberBranch").text();
                var flag = true;
                var policyNameFlag = true;
                var PolicyNoFlag = true;
                var BranchNameFlag = true;
                //var startDate = $("#tab-3 #txtPolicyStartDate").val();
                if (policyName == "" && PolicyNo == "" && BranchName == "") {
                    if ($("#tab-3 #txtPolicyNo").attr('disabled') || $("#tab-3 #txtPolicyNo").prop('disabled')) {
                        $("li#SelectPolicyId").html('');
                        $("li#SelectPolicyId").hide();
                        $("li#SelectBranch").html('');
                        $("li#SelectBranch").hide();
                        $("#validationTabMessage").show();
                        $("#validationTabMessage").append('<li id="SelectPolicyId">Select Policy.</li>');
                        $("#validationTabMessage").append('<li id="SelectBranch">Select a Branch.</li>');
                        flag = false;
                    }
                    else {
                        $("li#SelectPolicyId").html('');
                        $("li#SelectPolicyId").hide();
                        $("li#EnterPolicyNo").html('');
                        $("li#EnterPolicyNo").hide();
                        $("li#SelectBranch").html('');
                        $("li#SelectBranch").hide();
                        $("#validationTabMessage").show();
                        $("#validationTabMessage").append('<li id="SelectPolicyId">Select Policy.</li>');
                        $("#validationTabMessage").append('<li id="EnterPolicyNo">Please enter policy no.</li>');
                        $("#validationTabMessage").append('<li id="SelectBranch">Select a Branch.</li>');
                        flag = false;
                    }

                } else {
                    if (policyName != "") {
                        $("li#SelectPolicyId").html('');
                        $("li#SelectPolicyId").hide();
                        policyNameFlag = true;
                    } else {
                        $("li#SelectPolicyId").hide();
                        $("li#SelectPolicyId").html('');
                        $("#validationTabMessage").show();
                        $("#validationTabMessage").append('<li id="SelectPolicyId">Select Policy.</li>');
                        policyNameFlag = false;
                    }
                    if (PolicyNo != "" || $("#tab-3 #txtPolicyNo").attr('disabled') || $("#tab-3 #txtPolicyNo").prop('disabled')) {
                        $("li#EnterPolicyNo").html('');
                        $("li#EnterPolicyNo").hide();
                        PolicyNoFlag = true;
                    } else {

                        $("li#EnterPolicyNo").hide();
                        $("li#EnterPolicyNo").html('');
                        $("#validationTabMessage").show();
                        $("#validationTabMessage").append('<li id="EnterPolicyNo">Please enter policy no.</li>');
                        PolicyNoFlag = false;


                    }
                    if (BranchName != "") {
                        $("li#SelectBranchName").html('');
                        $("li#SelectBranchName").hide();
                        BranchNameFlag = true;

                    } else {
                        $("li#SelectBranchName").html('');
                        $("li#SelectBranchName").hide();
                        $("#validationTabMessage").show();
                        $("#validationTabMessage").append('<li id="SelectPolicyId">Select Branch.</li>');
                        BranchNameFlag = false;


                    }
                    if (flag == false || policyNameFlag == false || PolicyNoFlag == false || BranchNameFlag == false)
                        return false;
                    else {
                        $("#tab3").removeClass('active')
                        $("#tab9").addClass("active");
                        return true;
                    }

                }
            })


            $('#btnNextStepPersonalDetails').prop('disabled', true);
            var id = @memberId;
            if (id == 0) {
                $("#tab5").hide();
                $("#tab6").hide();
                $("#tab7").hide();
                $("#tab8").hide();
                $("#tab9").hide();
                $("#tab10").hide();
                $("#tab11").hide();
                $("#btnUpdateProduct").hide();
            }
            else {
                $("#tab5").show();
                $("#tab6").show();
                $("#tab7").show();
                $("#tab8").show();
                $("#tab9").show();
                $("#tab10").show();
                $("#tab11").show();
                $('#btnCopy').prop("disabled", false);
                $('#PolicyDoc').prop("disabled", false);
                $('#tab1NextButton').removeClass('disabled');
                $("#btnUpdateProduct").show();
            }

            $('input[type="checkbox"]').click(function () {
                if ($(this).is(":checked")) {

                    $('#txtPassport').prop('disabled', false);
                    $('#txtIdNumber').prop('disabled', true);
                }
                else if ($(this).is(":not(:checked)")) {
                    $('#txtIdNumber').prop('disabled', false);
                    $('#txtPassport').prop('disabled', true);
                }
            });

            // #region ddlPolicyChange

            $("#tab-3 #ddlPolicy").change(function () {
                var GetPremiumForPolicyURl = $("#GetPolicyDetailsBetweenAge").val();
                var getAge = $("#txtAge").val();
                if (getAge != "" && getAge != null) {
                    var id = $("#tab-3 #ddlPolicy").val();
                    var date = $("#tab-3 #txtPolicyStartDate").val();
                    var date = new Date(parseInt($("#tab-3 #txtPolicyStartDate").val().replace('/Date(', '')));
                    var policyStartDate = dateFormat($("#tab-3 #txtPolicyStartDate").val(), 'mm/dd/yyyy', false);

                    if ($("#tab-3 #ddlPolicy :selected").val() != "") {
                        $.ajax({
                            url: GetPremiumForPolicyURl + "?id=" + id + "&date=" + policyStartDate + "&UserType=1&Age=" + getAge,
                            type: "get",
                            cache: false,
                            success: function (result) {
                                $('#tab-3 #txtPolicyPremium').val(result[0]);
                                $('#tab-3 #txtPolicyCoverAmount').val(result[4]);
                                $('#tab-3 #txtUnderwriter').val(result[1]);
                                $('#hdCoverDate').val(result[2]);
                                $('#txtDependencyCovertDate').val(result[2]);
                                $('#tab-3 #txtCoverDate').val(result[2]);
                                $('#tab-3 #txtTotalPremium').val(result[0]);

                                //window.location.hash = 'tab-3';
                                //location.reload();

                                //if (window.performance.navigation.type != 1) {
                                //    location.reload();
                                //    activeTab = "tab-3";
                                //}

                                // Set current tab
                                localStorage.setItem("Tab-3", 1); // 1 for tab index

                                // Retrieve active tab after reload
                                var activeTab = localStorage.getItem("activeTab"); // activeTab will be "1"


                                //var urlParser = document.createElement('tab3');
                                //urlParser.href = redirectToURL;
                                //if (urlParser.origin + urlParser.pathname === location.origin + location.pathname) {
                                //    window.location.reload();
                                //}
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                alert(thrownError);
                            }
                        })
                    } else {
                        alert("Please select policy..!");
                    }
                }
                else {
                    alert("Age not found in first tab");
                }
            });
            $("#ddlDependentDependencyType").change(function () {
                var GetPremiumForPolicyURl = $("#GetPolicyDetailsBetweenAge").val();
                var UserTypeId = $(this).val();
                var Control = $(this);
                var DependentAge = $("#txtDependentAge").val();
                if (DependentAge != "" && DependentAge != null) {
                    Control.after('<img id="ddlDependentDependencyType_loader" src="../../Content/images/ajax-loader.gif"/>');
                    var policyStartDate = dateFormat($("#tab-3 #txtPolicyStartDate").val(), 'mm/dd/yyyy', false);
                    var id = $("#tab-3 #ddlPolicy").val();
                    $('#tab-5 #txtDependentPremium').val(0);
                    $('#tab-5 #txtDependentCoverAmount').val(0);
                    if ($("#tab-3 #ddlPolicy :selected").val() != "") {
                        $.ajax({
                            url: GetPremiumForPolicyURl + "?id=" + id + "&date=" + policyStartDate + "&UserType=" + UserTypeId + "&Age=" + DependentAge,
                            type: "get",
                            cache: false,
                            success: function (result) {
                                var DependentPremium = result[0] == null || result[0] == "" ? "0" : result[0];
                                var DependentCoverAmount = result[4] == null || result[4] == "" ? "0" : result[4];
                                $('#tab-5 #txtDependentPremium').val(DependentPremium);
                                $('#tab-5 #txtDependentCoverAmount').val(DependentCoverAmount);
                                var GetTotalPremium = parseFloat($('#tab-3 #txtTotalPremium').val()) + parseFloat(DependentPremium);
                                $('#tab-3 #txtTotalPremium').val(currencySymbol + " " + GetTotalPremium);
                                $("#ddlDependentDependencyType_loader").remove();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                alert(thrownError);
                                $("#ddlDependentDependencyType_loader").remove();
                            }
                        })
                    } else {
                        alert("Please select policy..!");
                        $("#ddlDependentDependencyType_loader").remove();
                    }
                }
                else {
                    alert("Please select dependent Age");
                }
            });

            // #endregion

            // #region ddlPolicyChange Jeenal Changes
            $(".policystartdate1").datepicker({
                onSelect: function (dateText) {
                    $(this).change();
                }
            }).on("change", function () {
                var policyStartDate = dateFormat($(".policystartdate1").val(), 'mm/dd/yyyy', false);
                var policyId = $("#tab-1 #ddlPolicy").val();
                OnStartChangeFillPolicyModal(policyId, policyStartDate);
            });
            $("#tab-3 #txtPolicyStartDate").datepicker({
                format: "dd MM yyyy",
                autoclose: true,
                setDate: new Date(),
                onSelect: function (dateText) {
                    $(this).change();
                }
            }).on("change", function () {
                var policyStartDate = dateFormat($("#tab-3 #txtPolicyStartDate").val(), 'mm/dd/yyyy', false);
                //var policyStartDate = $(this).val();
                var policyId = $("#tab-3 #ddlPolicy").val();
                OnStartChangeFillPolicy(policyId, policyStartDate);
                //display("Change event");
            });

            $("#PolicyUpdatePopupModel .modal-body #txtPolicyStartDate").datepicker({
                onSelect: function (dateText) {
                    $(this).change();
                }
            }).on("change", function () {
                var policyStartDate = dateFormat($("#PolicyUpdatePopupModel .modal-body #txtPolicyStartDate").val(), 'mm/dd/yyyy', false);
                var policyId = $("#ddlPolicyPopupPolicy").val();
                OnStartChangeFillPolicyPopup(policyId, policyStartDate);
            });

            function OnStartChangeFillPolicyPopup(policyId, policyStartDate) {

                var bindPolicyCoverDateUrl = $("#BindPolicyCoverDateUrl").val();

                if (policyId != '' && policyStartDate != undefined) {
                    $.ajax({
                        url: bindPolicyCoverDateUrl + "?id=" + policyId + "&date=" + policyStartDate,
                        type: "get",
                        cache: false,
                        success: function (result) {

                            $('#PolicyUpdatePopupModel .modal-body #txtPolicyPopupPremium').val(result[0]);
                            $('#PolicyUpdatePopupModel .modal-body #txtUnderwriter').val(result[1]);
                            $('#PolicyUpdatePopupModel .modal-body #txtCoverDate').val(result[2]);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert(thrownError);
                        }
                    })
                }
            }

            $("#tab-5 #txtDependentStartDate").datepicker({
                format: "dd MM yyyy",
                autoclose: true,
                setDate: new Date(),
                onSelect: function (dateText) {
                    $(this).change();
                }
            }).on("change", function () {
                var policyStartDate = dateFormat($("#tab-5 #txtDependentStartDate").val(), 'mm/dd/yyyy', false);
                //var policyStartDate = $(this).val();
                var policyId = $("#tab-3 #ddlPolicy").val();
                OnStartChangeFillDependentFamilyDetails(policyId, policyStartDate);
                //display("Change event");
            });
            // #endregion Jeenal Changes End

            // #region ddlBankChange
            $("#ddlBank").change(function () {
                var bankVal = $("#ddlBank").val();
                $("#txtBranchCode").val('');
                $("#txtBranchCode").val(bankVal);
            })
            // #endregion

            // #region ControlValidation

            var isInceptionEnabled = '@((bool)ViewBag.IsInceptionEnabled)' == 'True' ? true : false;
            if (isInceptionEnabled) {
                $("#tab-3 #txtInception").prop('disabled', false);
            }
            else {
                $("#tab-3 #txtInception").prop('disabled', true);
            }


            var isPolicyDocEnabled = '@((bool)ViewBag.IsPolicyDocEnabled)' == 'True' ? true : false;
            if (isPolicyDocEnabled) {
                $("#PolicyDoc").prop('disabled', false);
            }
            else {
                $("#PolicyDoc").prop('disabled', true);
            }

            var hasCreateRight = '@((bool)ViewBag.HasCreateRight)' == 'True' ? true : false;
            if (hasCreateRight) {
                $("#txtSaveBtn").prop('disabled', false);
            }
            else {
                $("#txtSaveBtn").prop('disabled', true);
            }

            $("#BtnAddNote").prop('disabled', false);
            $("#BtnUpdateNote").prop('disabled', true);

            // #endregion

            //#region ListBinding Methods

            BindAddOnProducts();
            BindInvoices();
            BindNotes();
            BindDocuments();
            BindDependents();
            bindBeneficiaryDatatable();
            // #endregion

            // #region datepickerFormat

            $('.date1').datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date() });

            $('.policyPopupDate').datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date() });

            $('.date2').datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date() });

            $('.birthDate').datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date() });

            $('.beneficiary_DOB').datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date() });

            $('.date4').datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date() });


            $('.dependantStartDate').datepicker({ format: 'dd MM yyyy', autoclose: true, setDate: new Date() });
            $('.dependantStartDate').datepicker('setDate', new Date())

            $('.dependantDOB').datepicker({ format: 'dd MM yyyy', autoclose: true });
            $('.dependantDOB').datepicker('setDate', new Date());

            $('.dependantInceptionDate').datepicker({ format: 'dd MM yyyy', autoclose: true });
            $('.dependantInceptionDate').datepicker('setDate', new Date())

            $('.dependantCoverDate').datepicker({ format: 'dd MM yyyy', autoclose: true });
            $('.dependantCoverDate').datepicker('setDate', new Date())
        });

        // #endregion


        $("#txtDependentDateOfBirth").blur(function () {
            var mdate = dateFormat($('#txtDependentDateOfBirth').val(), 'mm-dd-yyyy', false)
            var yearThen = parseInt(mdate.substring(6, 10), 10);
            var monthThen = parseInt(mdate.substring(0, 2), 10);
            var dayThen = parseInt(mdate.substring(3, 5), 10);

            var today = new Date();
            var birthday = new Date(yearThen, monthThen - 1, dayThen);

            var differenceInMilisecond = today.valueOf() - birthday.valueOf();

            var year_age = Math.floor(differenceInMilisecond / 31536000000);
            if (isNaN(year_age)) {
                alert("Invalid birthday - Please try again!");
            }
            else {
                $("#tab-5 #txtDependentAge").val(year_age);
            }
        });

        $("#txtBirthDay").blur(function () {
            var mdate = dateFormat($('#txtBirthDay').val(), 'dd-mm-yyyy', false)
            var yearThen = parseInt(mdate.substring(6, 10), 10);
            var monthThen = parseInt(mdate.substring(0, 2), 10);
            var dayThen = parseInt(mdate.substring(3, 5), 10);

            var today = new Date();
            var birthday = new Date(yearThen, monthThen - 1, dayThen);

            var differenceInMilisecond = today.valueOf() - birthday.valueOf();

            var year_age = Math.floor(differenceInMilisecond / 31536000000);
            if (isNaN(year_age)) {
                alert("Invalid birthday - Please try again!");
            }
            else {
                $("#txtAge").val(year_age);
            }
        });

        // #region SaveUpdate Manage Member

        $("#txtSaveBtn").click(function () {
            var SaveManageMembersURl = $("#SaveManageMembers").val();
            var idNumber = 0;
            var CustomId1 = 0;
            var CustomId2 = 0;
            var CustomId3 = 0;
            var Agent = 0;
            var productName = null;
            var productCost = 0;
            var fkiMemberid = 0;
            var PlanName = null;
            var fkiProductID = "00000000-0000-0000-0000-000000000000";
            if ($("#tab-3 #ddlCustom1").val() != null) {
                CustomId1 = $("#tab-3 #ddlCustom1").val();
            }
            if ($("#tab-3 #ddlCustom2").val() != null) {
                CustomId2 = $("#tab-3 #ddlCustom2").val();
            }
            if ($("#tab-3 #ddlCustom3").val() != null) {
                CustomId3 = $("#tab-3 #ddlCustom3").val();
            }

            if ($("#tab-1 #txtIdNumber").val() != "") {
                idNumber = $("#tab-1 #txtIdNumber").val();
            }

            if ($("#tab-1 #ddlAgent").val() != null) {
                Agent = $("#tab-1 #ddlAgent").val();
            }

            if ($("#drpProductName option:selected").text() != "") {
                productName = $("#drpProductName option:selected").text()
            }
            if ($("#hdnPremium").val() != "") {
                productCost = $("#hdnPremium").val()
            }
            if ($("#hdnPremium").val() != "") {
                fkiMemberid = $("#hdnPremium").val()
            }
            if ($("#drpProductName option:selected").val() != "") {
                fkiProductID = $("#drpProductName option:selected").val();
            }
            //if ($("#ddlPolicyPopupPolicy option:selected").val() != "") {
            //    PlanName: $("#ddlPolicyPopupPolicy option:selected").val();
            //}


            fkiMemberid = $("#pkiMemberID").val();
            var data = {
                pkiMemberID: $("#pkiMemberID").val(),
                MemberType: "Main",
                Title: "",
                FullNames: $("#tab-1 #txtFirstname").val(),
                Surname: $("#tab-1 #txtLastName").val(),
                Gender: $("#tab-1 input[name='Gender']:checked").val(),
                IDNumber: idNumber,
                DateOfBirth: dateFormat($("#tab-1 #txtBirthDay").val(), 'dd-mm-yyyy', false),
                Telephone: $("#txtTelePhone").val(),
                Cellphone: $("#txtCellphone").val(),
                Email: $("#txtEmail").val(),
                Citizenship: $("#ddlCitizenship :selected").text(),
                Passport: $("#txtPassport").val(),
                Address1: $("#txtStreetPostalAddress").val(),
                Address1_Post: $("#txtStreetPostalAddress_Post").val(),
                parlourid: $("#ddlSelectCompany").val(),
                Address2: $("#txtStreetAddress").val(),
                Address2_Post: $("#txtStreetAddress_Post").val(),
                Address3: $("#tab-2 #txtTownOrCity").val(),
                Address3_Post: $("#tab-2 #txtTownOrCity_Post").val(),
                Address4: $("#txtProvince").val(),
                Address4_Post: $("#txtProvince_Post").val(),
                Code: $("#txtCode").val(),
                Code_Post: $("#txtCode_Post").val(),
                fkiPlanID: $("#tab-3 #ddlPolicy").val(),
                PlanName: $("#tab-3 #ddlPolicy").val(),
                MemeberNumber: $("#tab-3 #txtPolicyNo").val(),
                EasyPayNo: $("#tab-3 #txtEasyToPay").val(),
                RefNumber: $("#tab-3 #txtReferenceNumber").val(),
                //Branch: $("#tab-4 #txtBankBranch").val(),
                MemberBranch: $("#tab-3 #ddlMemberBranch :selected").text(),
                CustomId1: CustomId1,
                CustomId2: CustomId2,
                CustomId3: CustomId3,
                MemberSociety: $("#tab-1 #ddlMemberSociety :selected").text(),
                StartDate: dateFormat($("#tab-3 #txtPolicyStartDate").val(), 'dd-mm-yyyy', false),
                InceptionDate: dateFormat($("#tab-3 #txtInception").val(), 'dd-mm-yyyy', false),
                CoverDate: dateFormat($("#tab-3 #txtCoverDate").val(), 'dd-mm-yyyy', false),
                Agent: $("#tab-3 #ddlAgent :selected").text(),
                //Agent: $("#tab-1 #ddlAgent").val(),
                //Claimnumber:$("#txtTelePhone").val(),
                PolicyStatus: $("#ddlPolicyStatus :selected").val(),
                //PolicyStatus:$("#txtTelePhone").val(),
                //parlourid:$("#txtTelePhone").val(),
                AccountHolder: $("#txtAccountholder").val(),
                Bank: $("#ddlBank :selected").text(),
                BranchCode: $("#txtBranchCode").val(),
                PolicyNumber: $("#tab-3 #txtPolicyNo").val(),
                AccountNumber: $("#txtAccountNumber").val(),
                AccountType: $("#ddlAccountType :selected").text(),
                DebitDate: dateFormat($("#txtDebitDate").val(), 'dd-mm-yyyy', false),
                FK_MemberId: fkiMemberid,
                PolicyPremium: $("#tab-3 #txtPolicyPremium").val(),
                PolicyPremium: $("#tab-3 #txtPolicyCoverAmount").val(),
                Branch: $("#tab-4 #txtBankBranch").val(), //$("#ddlBankBranch :selected").text()



            };


            $.ajax({
                url: SaveManageMembersURl,
                data: {
                    Member: data,
                    fkiMemberid: fkiMemberid,
                    ProductName: productName,
                    ProductCost: productCost,
                    fkiProductID: fkiProductID,
                    //PlanName: PlanName
                },
                type: "post",
                cache: false,
                success: function (result) {
                    console.log(result);
                    if (result.success == false) {

                        $("#validationTab4Message").show();
                        $("#validationTab4Message").empty().append(result.errors);

                    }
                    else {
                        if (result.pkiMemberID == 0 || result.pkiMemberID == "undefined") {
                            window.location.href = '@Url.Action("ManageMembers", "Members")';
                        } else {
                            var printMemberDataUrl = '@Url.Action("ManageMembers", "Members", new { pkiMemberID = "pkiMemberIDVal" }, Request.Url.Scheme)';
                            printMemberDataUrl = printMemberDataUrl.replace("pkiMemberIDVal", result.pkiMemberID);
                            window.location.href = printMemberDataUrl;
                            $("#tab5").addClass('active');
                            alert("Member saved successfully...!!");
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $("#validationTab4Message").show();
                    $("#validationTab4Message").empty().append(result.errors);
                }

            })

        })

        //#endregion

        $("#txtCode").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsg").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });

        $("#chkIdORPass").change(function () {
            if ($("#tab-1 #chkIdORPass").prop('checked') == true) {
                $("#tab-1 #txtPassport").prop("readonly", false);
                $("#tab-1 #txtIdNumber").prop("readonly", true);
                $("#tab-1 #txtIdNumber").val('');
            }
            else {
                $("#tab-1 #txtPassport").prop("readonly", true);
                $("#tab-1 #txtIdNumber").prop("readonly", false);
                $("#tab-1 #txtPassport").val('');
            }
        })

        $("#btnResetTab1").click(function () {
            $("#tab-1 #txtLastName").val('');
            $("#tab-1 #txtFirstname").val('');
            $("#tab-1 #txtIdNumber").val('');
            $("#tab-1 #txtBirthDay").val('');
            $("#tab-1 #txtAge").val('');
            $("#tab-1 #ddlCitizenship").val('');
            $("#txtCellphone").val('');
            $("#txtTelePhone").val('');
            $("#txtEmail").val('');
        })
        $("#btnResetTab3").click(function () {
            $("#tab-3 #ddlPolicy").val('');
            $("#tab-3 #txtPolicyPremium").val('');
            $("#tab-3 #txtPolicyCoverAmount").val('');
            $("#tab-3 #txtPolicyNo").val('');
            $("#tab-3 #txtEasyToPay").val('');
            $("#tab-3 #txtReferenceNumber").val('');
            $("#tab-3 #ddlMemberBranch").val('');
            $("#tab-3 #ddlCustom1").val('');
            $("#tab-3 #ddlCustom2").val('');
            $("#tab-3 #ddlCustom3").val('');
            $("#tab-3 #txtCoverDate").val('');
            $("#tab-1 #ddlMemberSociety").val('');
            $("#tab-3 #txtPolicyStartDate").val('');
            $("#tab-3 #ddlAgent").val('');
            $("#tab-3 #txtInception").val('');
            $("#tab-3 #txtUnderwriter").val('');
            $("#tab-3 #txtTotalPremium").val('');
            $("#tab-3 #ddlPolicyStatus").val('');
        })
        $("#btnResetTab9").click(function () {
            $("#tab-9 #ddlDependentDependencyType_Product").val('');
            $("#tab-9 #drpProductName").val('');
            $("#tab-9 #txtPremium").val('0.00');
            //$("#tab-9 #txtSupCover").val('0.00');
        })
        $("#btnResetTab4").click(function () {
            $("#tab-4 #txtAccountholder").val('');
            $("#tab-4 #ddlBank").val('');
            $("#tab-4 #txtBankBranch").val('');
            $("#tab-4 #txtBranchCode").val('');
            $("#tab-4 #txtAccountNumber").val('');
            $("#tab-4 #ddlAccountType").val('');
            $("#tab-4 #txtDebitDate").val('');
        })

        $("#btnPhysicalAddressReset").click(function () {
            $("#txtStreetPostalAddress").val('');
            $("#txtStreetAddress").val('');
            $("#txtTownOrCity").val('');
            $("#txtProvince").val('');
            $("#txtCode").val('');
        })

        // #region GetMemberToUpdate
        var GetMemberToUpdateURl = $("#GetMemberToUpdate").val();
        $.ajax({
            url: GetMemberToUpdateURl + "?pkiMemberId=" + pkiMemberId,
            type: "get",
            cache: false,
            success: function (result) {

                if (result.Member != undefined) {
                    result.Member.fkiMemberID = result.Member.pkiMemberID;
                    EditValues(result.Member);
                    BindPolicies();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert(thrownError);
            }
        });
        // #endregion

        // #region BindPolicies
        function BindPolicies() {
            var sortOrder = @Html.Raw(Json.Encode(@Model.PolicySearch.SortOrder));
            var sortBy =@Html.Raw(Json.Encode(@Model.PolicySearch.SortBy));
            var totalRecord =@Html.Raw(Json.Encode(@Model.PolicySearch.TotalRecord));
            var pageNum =@Html.Raw(Json.Encode(@Model.PolicySearch.PageNum));
            var pageSize =@Html.Raw(Json.Encode(@Model.PolicySearch.PageSize));
            var searchText =@Html.Raw(Json.Encode(@Model.PolicySearch.SarchText));

            var model1 = {
                SortOrder: sortOrder,
                SortBy: sortBy,
                TotalRecord: totalRecord,
                PageNum: pageNum,
                PageSize: pageSize,
                SarchText: searchText
            };

            $(document).ready(function () {
                jQuery.noConflict();
                var idNumber = $("#txtIdNumber").val();
                var passportNumber = $("#txtPassport").val();
                var bindMemberUrl = '@Url.Action("BindMembers", "Members", new { IdNumber = "IdNumberVal",PassportNumber="passportNumber" },Request.Url.Scheme)';
                if (idNumber == '')
                    idNumber = 0;

                bindMemberUrl = bindMemberUrl.replace("IdNumberVal", idNumber).replace("passportNumber", passportNumber).replace('&amp;', '&');

                memberPolicyDatatable = $($('#memberPolicyDataTable')[0])
                    .on('page.dt', function () {
                        var table = $('#memberPolicyDataTable').DataTable();
                        var page = table.page.info();
                        model1.PageNum = page.page + 1;
                    })
                    .dataTable({
                        'bProcessing': true,
                        'bServerSide': true,
                        "bLengthChange": false,
                        'bFilter': false,
                        'ordering': false,
                        'ajax': {
                            "url": bindMemberUrl,
                            "type": "POST",
                            "contentType": "application/json",
                            "data": function (d) {
                                d['order'].forEach(function (item, index) {
                                    if (model1.SortBy != d['columns'][item.column]['data']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = "asc";
                                    }
                                    if (model1.SortBy == d['columns'][item.column]['data'] && model1.SortOrder != d['order'][index]['dir']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = d['order'][index]['dir'];
                                    }
                                    model1.SortBy = d['columns'][item.column]['data'];
                                    model1.SortOrder = d['order'][index]['dir'];
                                });
                                return JSON.stringify(model1);
                            },
                            dataFilter: function (data) {
                                var json = jQuery.parseJSON(data);
                                json.recordsTotal = json.TotalCount;
                                json.recordsFiltered = json.TotalCount;
                                json.data = json.Result;
                                return JSON.stringify(json);
                            }
                        },
                        "columns": [
                            { "data": "pkiMemberID", "name": "Member Id", "autoWidth": true },
                            { "data": "MemeberNumber", "name": "Policy Number", "autoWidth": true },
                            { "data": "IDNumber", "name": "ID No", "autoWidth": true },
                            { "data": "MemberBranch", "name": "Branch", "autoWidth": true },
                            {
                                "data": "StartDate", "name": "Start Date", "autoWidth": true,
                                "render": function (data) {
                                    var date = new Date(parseInt(data.replace('/Date(', '')));
                                    return dateFormat(date, 'dd-mmm-yyyy', false);
                                }
                            },
                            {
                                "data": "InceptionDate", "name": "Inception Date", "autoWidth": true,
                                "render": function (data) {
                                    var date = new Date(parseInt(data.replace('/Date(', '')));
                                    return dateFormat(date, 'dd-mmm-yyyy', false);
                                }
                            },
                            {
                                "data": "CoverDate", "name": "Cover Date", "autoWidth": true,
                                "render": function (data) {
                                    var date = new Date(parseInt(data.replace('/Date(', '')));
                                    return dateFormat(date, 'dd-mmm-yyyy', false);
                                }
                            },
                            {
                                "render": function (data, type, full, meta) {
                                    var hasEditRights = '@ViewBag.HasEditRight' == "True" ? true : false;
                                    var hasDeleteRights = true;

                                    var dom = "<div class='row'>";
                                    var data1 = JSON.stringify(full);
                                    data1 = data1.replace(/"/g, "\'")
                                    if (hasEditRights) {
                                        var editNoteUrl = '<div class="col-sm-4 text-center"><a  onclick="UpdateMemberPolicy(' + data1 + ')"><i class="fa fa-edit"></i></a></div>';
                                        dom = dom + editNoteUrl;
                                    }
                                    if (hasDeleteRights) {
                                        var deleteNoteUrl = '<div class="col-sm-4 text-center"> <a onclick="DeleteMemberPolicy(' + data1 + ')"; ><i class="fa fa-trash-o"></i></a></div>';
                                        dom = dom + deleteNoteUrl;
                                    }

                                    dom = dom + "</div>";
                                    return dom;
                                }
                            }
                        ]
                    });
            });
        }
        // #endregion

        //#region BindInvoices
        function BindInvoices() {
            var sortOrder = @Html.Raw(Json.Encode(@Model.InvoiceSearch.SortOrder));
            var sortBy =@Html.Raw(Json.Encode(@Model.InvoiceSearch.SortBy));
            var totalRecord =@Html.Raw(Json.Encode(@Model.InvoiceSearch.TotalRecord));
            var pageNum =@Html.Raw(Json.Encode(@Model.InvoiceSearch.PageNum));
            var pageSize =@Html.Raw(Json.Encode(@Model.InvoiceSearch.PageSize));
            var searchText =@Html.Raw(Json.Encode(@Model.InvoiceSearch.SarchText));

            var model1 = {
                SortOrder: sortOrder,
                SortBy: sortBy,
                TotalRecord: totalRecord,
                PageNum: pageNum,
                PageSize: pageSize,
                SarchText: searchText
            };


            $(document).ready(function () {
                jQuery.noConflict();
                invoiceDatatable = $($('#invoiceDataTable')[0])
                    .on('page.dt', function () {
                        var table = $('#invoiceDataTable').DataTable();
                        var page = table.page.info();
                        model1.PageNum = page.page + 1;
                    })
                    .dataTable({
                        'bProcessing': true,
                        'bServerSide': true,
                        "bLengthChange": false,
                        'bFilter': false,
                        'ordering': false,
                        'ajax': {
                            "url": '@Url.Action("BindInvoices", "Members", null, Request.Url.Scheme)',
                            "type": "POST",
                            "contentType": "application/json",
                            "data": function (d) {
                                d['order'].forEach(function (item, index) {
                                    if (model1.SortBy != d['columns'][item.column]['data']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = "asc";
                                    }
                                    if (model1.SortBy == d['columns'][item.column]['data'] && model1.SortOrder != d['order'][index]['dir']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = d['order'][index]['dir'];
                                    }
                                    model1.SortBy = d['columns'][item.column]['data'];
                                    model1.SortOrder = d['order'][index]['dir'];
                                });
                                return JSON.stringify(model1);
                            },
                            dataFilter: function (data) {
                                var json = jQuery.parseJSON(data);
                                json.recordsTotal = json.TotalCount;
                                json.recordsFiltered = json.TotalCount;
                                json.data = json.Result;
                                return JSON.stringify(json);
                            }
                        },
                        "columns": [
                            { "data": "InvoiceID", "name": "InvoiceID", "autoWidth": true, "visible": false },
                            { "data": "AmountPaid", "name": "Amount", "autoWidth": true },
                            {
                                "data": "DatePaid", "name": "Date Paid", "autoWidth": true
                            },
                            { "data": "RecievedBy", "name": "Recieved By", "autoWidth": true },
                            { "data": "InvNumber", "name": "Invoice Number", "autoWidth": true },
                            { "data": "PaymentBranch", "name": "Payment Branch", "autoWidth": true }
                        ]
                    });
            });
        }

        //#endregion

        //#region BindNotes
        function BindNotes() {
            var sortOrder = @Html.Raw(Json.Encode(@Model.NoteSearch.SortOrder));
            var sortBy =@Html.Raw(Json.Encode(@Model.NoteSearch.SortBy));
            var totalRecord =@Html.Raw(Json.Encode(@Model.NoteSearch.TotalRecord));
            var pageNum =@Html.Raw(Json.Encode(@Model.NoteSearch.PageNum));
            var pageSize =@Html.Raw(Json.Encode(@Model.NoteSearch.PageSize));
            var searchText =@Html.Raw(Json.Encode(@Model.NoteSearch.SarchText));

            var model1 = {
                SortOrder: sortOrder,
                SortBy: sortBy,
                TotalRecord: totalRecord,
                PageNum: pageNum,
                PageSize: pageSize,
                SarchText: searchText
            };

            noteDatatable = $($('#noteDataTable')[0])
                .on('page.dt', function () {
                    var table = $('#noteDataTable').DataTable();
                    var page = table.page.info();
                    model1.PageNum = page.page + 1;
                })
                .dataTable({
                    'bProcessing': true,
                    'bServerSide': true,
                    "bLengthChange": false,
                    'bFilter': false,
                    'ordering': false,
                    'ajax': {
                        "url": '@Url.Action("BindNotes", "Members", null, Request.Url.Scheme)',
                        "type": "POST",
                        "contentType": "application/json",
                        "data": function (d) {
                            d['order'].forEach(function (item, index) {
                                if (model1.SortBy != d['columns'][item.column]['data']) {
                                    model1.PageNum = 1;
                                    model1.SortOrder = "asc";
                                }
                                if (model1.SortBy == d['columns'][item.column]['data'] && model1.SortOrder != d['order'][index]['dir']) {
                                    model1.PageNum = 1;
                                    model1.SortOrder = d['order'][index]['dir'];
                                }
                                model1.SortBy = d['columns'][item.column]['data'];
                                model1.SortOrder = d['order'][index]['dir'];
                            });
                            return JSON.stringify(model1);
                        },
                        dataFilter: function (data) {
                            var json = jQuery.parseJSON(data);
                            json.recordsTotal = json.TotalCount;
                            json.recordsFiltered = json.TotalCount;
                            json.data = json.Result;
                            return JSON.stringify(json);
                        }
                    },
                    "columns": [
                        { "data": "pkiNoteID", "name": "pkiNoteID", "autoWidth": true, "visible": false },
                        { "data": "Notes", "name": "Notes", "autoWidth": true },
                        {
                            "data": "NoteDate", "name": "NoteDate", "autoWidth": true,
                            "render": function (data) {
                                var date = new Date(parseInt(data.replace('/Date(', '')));
                                return dateFormat(date, 'dd-mmm-yyyy', false);
                            }
                        },
                        {
                            "data": "LastModified", "name": "LastModified", "autoWidth": true,
                            "render": function (data) {
                                var date = new Date(parseInt(data.replace('/Date(', '')));
                                return dateFormat(date, 'dd-mmm-yyyy', false);
                            }
                        },
                        { "data": "ModifiedUser", "name": "ModifiedUser", "autoWidth": true },
                        {
                            "render": function (data, type, full, meta) {
                                var hasEditRights = '@ViewBag.HasEditRight' == "True" ? true : false;
                                var hasDeleteRights = '@ViewBag.HasDeleteRight' == "True" ? true : false;
                                var dom = "<div class='row'>";
                                var data1 = JSON.stringify(full);
                                data1 = data1.replace(/"/g, "\'")
                                if (hasEditRights) {
                                    var editNoteUrl = '<div class="col-sm-4 text-center"><a  onclick="EditNote(' + data1 + ')"><i class="fa fa-edit"></i></a></div>';
                                    dom = dom + editNoteUrl;
                                }
                                if (hasDeleteRights) {
                                    var deleteNoteUrl = '<div class="col-sm-4 text-center"> <a onclick="DeleteNote(' + data1 + ')"; ><i class="fa fa-trash-o"></i></a></div>';
                                    dom = dom + deleteNoteUrl;
                                }

                                var viewNoteUrl = '<div class="col-sm-4 text-center"> <a onclick="ViewNote(' + data1 + ')"; ><i class="fa fa-search"></i></a></div>';
                                dom = dom + viewNoteUrl;

                                dom = dom + "</div>";
                                return dom;

                            }
                        }
                    ]
                });

        }
        //#endregion

        //#region AddUpdateNote
        $("#BtnAddNote").click(function () {
            var SaveNoteURl = $("#SaveNote").val();
            var data = {
                pkiNoteID: $("#pkiNoteId").val(),
                fkiMemberID: pkiMemberId,
                Notes: $("#txtNote").val()
            };

            $.ajax({
                url: SaveNoteURl,
                data: data,
                type: "post",
                cache: false,
                success: function (result) {

                    var isSuccessful = (result['success']);
                    if (isSuccessful != false) {
                        noteDatatable.fnDraw();
                        $("#pkiNoteId").val('');
                        $("#txtNote").val('');
                        $("#lblMessage").html('');
                        $("#lblMessage").append('<div class="alert alert-success">Note Added Successfully</div>')
                        $("#txtPremium").val('');
                    }
                    else {
                        var errors = result['errors'];
                        displayNoteValidationErrors(errors);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
        });

        $("#BtnUpdateNote").click(function () {

            var UpdateNoteURl = $("#UpdateNote").val();
            var data = {
                pkiNoteID: $("#pkiNoteId").val(),
                fkiMemberID: pkiMemberId,
                Notes: $("#txtNote").val()
            };

            $.ajax({
                url: UpdateNoteURl,
                data: data,
                type: "post",
                cache: false,
                success: function (result) {

                    var isSuccessful = (result['success']);
                    if (isSuccessful != false) {

                        noteDatatable.fnDraw();
                        $("#pkiNoteId").val('');
                        $("#txtNote").val('');

                        $("#BtnAddNote").prop('disabled', false);
                        $("#BtnUpdateNote").prop('disabled', true);
                        $("#lblMessage").html('');
                        $("#lblMessage").append('<div class="alert alert-success">Note Updated Successfully</div>')
                        $("#txtPremium").val('');
                    }
                    else {
                        var errors = result['errors'];
                        displayNoteValidationErrors(errors);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
        });
        //#endregion

        //#region BindAddOnProduct
        function BindAddOnProducts() {
            var sortOrder = @Html.Raw(Json.Encode(@Model.ProductSearch.SortOrder));
            var sortBy =@Html.Raw(Json.Encode(@Model.ProductSearch.SortBy));
            var totalRecord =@Html.Raw(Json.Encode(@Model.ProductSearch.TotalRecord));
            var pageNum =@Html.Raw(Json.Encode(@Model.ProductSearch.PageNum));
            var pageSize =@Html.Raw(Json.Encode(@Model.ProductSearch.PageSize));
            var searchText =@Html.Raw(Json.Encode(@Model.ProductSearch.SarchText));

            var model1 = {
                SortOrder: sortOrder,
                SortBy: sortBy,
                TotalRecord: totalRecord,
                PageNum: pageNum,
                PageSize: pageSize,
                SarchText: searchText
            };

            $(document).ready(function () {
                $("#btnSbtnSaveProductaveProduct").prop('disabled', false);
                $("#btnUpdateProduct").prop('disabled', true);
                jQuery.noConflict();
                productDatatable = $($('#productDataTable')[0]).on('page.dt', function () {
                    var table = $('#productDataTable').DataTable();
                    var page = table.page.info();
                    model1.PageNum = page.page + 1;
                }).dataTable({
                    'bProcessing': true,
                    'bServerSide': true,
                    "bLengthChange": false,
                    'bFilter': false,
                    'ordering': false,
                    'ajax': {
                        "url": '@Url.Action("SearchProductData", "Members", null, Request.Url.Scheme)',
                        "type": "POST",
                        "contentType": "application/json",
                        "data": function (d) {
                            d['order'].forEach(function (item, index) {
                                if (model1.SortBy != d['columns'][item.column]['data']) {
                                    model1.PageNum = 1;
                                    model1.SortOrder = "asc";
                                }
                                if (model1.SortBy == d['columns'][item.column]['data'] && model1.SortOrder != d['order'][index]['dir']) {
                                    model1.PageNum = 1;
                                    model1.SortOrder = d['order'][index]['dir'];
                                }
                                model1.SortBy = d['columns'][item.column]['data'];
                                model1.SortOrder = d['order'][index]['dir'];
                            });
                            return JSON.stringify(model1);
                        },
                        dataFilter: function (data) {
                            var json = jQuery.parseJSON(data);
                            json.recordsTotal = json.TotalCount;
                            json.recordsFiltered = json.TotalCount;
                            currencySymbol = json.SearchParameters.Currency
                            json.data = json.Result;
                            return JSON.stringify(json);
                        }
                    },
                    "columns": [
                        { "data": "pkiMemberProductID", "name": "pkiMemberProductID", "autoWidth": true, "visible": false },
                        { "data": "fkiProductID", "name": "Product ID", "autoWidth": true, "visible": false },
                        { "data": "ProductName", "name": "ProductName", "autoWidth": true },
                        { "data": "DependencyName", "name": "DependencyName", "autoWidth": true },
                        {
                            "data": "DateCreated", "name": "DateCreated", "autoWidth": true,
                            "render": function (data) {
                                return dateFormat(new Date(ConvertDate(data)), "dd-mmm-yyyy", false)
                            }
                        },
                        {
                            "data": "ProductCost", "name": "ProductCost", "autoWidth": true,
                            "render": function (data) {
                                var productCost = data + ".00";
                                return productCost;
                            }
                        },
                        {
                            "render": function (data, type, full, meta) {
                                var hasEditRights = '@ViewBag.HasEditRight' == "True" ? true : false;
                                var hasDeleteRights = '@ViewBag.HasDeleteRight' == "True" ? true : false;
                                var dom = "<div class='row'>";
                                var data1 = JSON.stringify(full);
                                data1 = data1.replace(/"/g, "\'")
                                if (hasEditRights) {
                                    var editProductUrl = '<div class="col-sm-4 text-center"><a  onclick="EditProduct(' + data1 + ')"><i class="fa fa-edit"></i></a></div>';
                                    dom = dom + editProductUrl;
                                }
                                if (hasDeleteRights) {
                                    var deleteProductUrl = '<div class="col-sm-4 text-center"> <a onclick="DeleteProduct(' + data1 + ')"; ><i class="fa fa-trash-o"></i></a></div>';
                                    dom = dom + deleteProductUrl;
                                }

                                dom = dom + "</div>";
                                return dom;

                            }
                        }
                    ]
                });
            });
        }
        //#endregion


        //#region AddUpdateProduct
        $("#btnSaveProduct").click(function () {

            if ($("#drpProductName").val() != "") {
                if ($("#txtPremium").val() != "") {
                    $("#ValidationSummary5").hide();
                    $("li#txtPremiumAmountId").hide();
                    $("li#txtPremiumAmountId").html('');
                    var SaveAddonProductUrl = $("#SaveAddonProductUrl").val();

                    var objProductModel = {
                        DateCreated: 0,
                        DependencyType: $("#ddlDependentDependencyType_Product").val(),
                        ProductCost: parseInt($("#txtPremium").val()),
                        fkiMemberid: $("#pkiMemberID").val(),
                        LastModified: 0,
                        UserID: 0,
                        ModifiedUser: 0,
                        Deleted: 0,
                        fkiProductID: $("#drpProductName").val(),
                        parlourid: 0,
                        pkiMemberProductID: 0
                    };

                    $.ajax({
                        url: SaveAddonProductUrl,
                        data: objProductModel,
                        type: "post",
                        cache: false,
                        success: function (result) {
                            if (result == "Addon product add successfully.") {
                                productDatatable.fnDraw();
                                $("#drpProductName option").each(function () {
                                    if ($(this).text() == 'Select') {
                                        $(this).attr('selected', 'selected');
                                    }
                                });
                                $("#lblMessage").html('');
                                $("#lblMessage").append('<div class="alert alert-success">' + result + '</div>')
                                $("#txtPremium").val('');
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert(thrownError);
                        }
                    })
                }
                else {
                    $("li#txtPremiumAmountId").hide();
                    $("li#txtPremiumAmountId").html('');
                    $("#ValidationSummary5").show();
                    $("#ValidationSummary5").append('<li id="txtPremiumAmountId">Please enter premium amount.</li>');
                    return false;
                }
            }
            else {
                $("li#txtPremiumAmountId").hide();
                $("li#txtPremiumAmountId").html('');
                $("#ValidationSummary5").show();
                $("#ValidationSummary5").append('<li id="txtPremiumAmountId">Please select Product Name.</li>');
                return false;
            }
        });
        //#endregion

        //#region UpdatePolicyPopup
        $("#BtnUpdatePolicyPopup").click(function () {
            var UpdatePolicyPopupURl = $("#UpdatePolicyPopup").val();
            var data = {
                fkiPlanID: $("#PolicyUpdatePopupModel .modal-body #ddlPolicyPopupPolicy").val(),
                PolicyPremium: $("#PolicyUpdatePopupModel .modal-body #txtPolicyPopupPremium").val(),
                MemeberNumber: $("#PolicyUpdatePopupModel .modal-body #txtPolicyNo").val(),
                EasyPayNo: $("#PolicyUpdatePopupModel .modal-body #txtEasyToPay").val(),
                RefNumber: $("#PolicyUpdatePopupModel .modal-body #txtReferenceNumber").val(),
                MemberBranch: $("#PolicyUpdatePopupModel .modal-body #ddlMemberBranch :selected").val(),
                CustomId1: $("#PolicyUpdatePopupModel .modal-body #ddlPopupCustom1").val(),
                CustomId2: $("#PolicyUpdatePopupModel .modal-body #ddlPopupCustom2").val(),
                CustomId3: $("#PolicyUpdatePopupModel .modal-body #ddlPopupCustom3").val(),
                MemberSociety: $("#PolicyUpdatePopupModel .modal-body #ddlMemberSociety :selected").val(),
                StartDate: $("#PolicyUpdatePopupModel .modal-body #txtPolicyStartDate").val(),
                // StartDate: dateFormat($(".policystartdate1").val(), 'dd-mm-yyyy', false),
                InceptionDate: dateFormat($("#txtPolicyPopupInception").val(), 'dd-mm-yyyy', false),
                CoverDate: dateFormat($("#txtPolicyPopupCoverDate").val(), 'dd-mm-yyyy', false),
                Agent: $("#PolicyUpdatePopupModel .modal-body #ddlAgent :selected").val()
            };

            //var underWriter = $("#PolicyUpdatePopupModel .modal-body #txtUnderwriter").val()

            $.ajax({
                url: UpdatePolicyPopupURl,
                data: data,
                type: "post",
                cache: false,
                success: function (result) {
                    $("[data-dismiss=modal]").trigger({ type: "click" });
                    $('#PolicyUpdatePopupModel').modal('hide');
                    memberPolicyDatatable.fnDraw();
                    //$('#PolicyUpdatePopupModel').modal('toggle');
                    //var isSuccessful = (result['success']);
                    //if (isSuccessful != false) {

                    //    noteDatatable.fnDraw();
                    //    $("#pkiNoteId").val('');
                    //    $("#txtNote").val('');

                    //    $("#BtnAddNote").prop('disabled', false);
                    //    $("#BtnUpdateNote").prop('disabled', true);
                    //}
                    //else {
                    //    var errors = result['errors'];
                    //    displayNoteValidationErrors(errors);
                    //}
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
        });
        //#endregion

        //#region EditMember
        function EditValues(member) {
            console.log(member);
            $("#pkiMemberID").val(member.fkiMemberID);
            $("#tab-1 #txtFirstname").val(member.FullNames);
            $("#tab-1 #txtLastName").val(member.Surname);
            $("#tab-1 input[name='Gender']").val(member.Gender)
            $("#tab-1 #txtIdNumber").val(member.IDNumber);
            //$("#tab-1 #txtTotalPremium").val(member.TotalPremium);
            $("#tab-1 #txtPolicyPremium").val(member.PolicyPremium);
            $("#tab-1 #txtEasyToPay").val(member.EasyPayNo);
            $("#txtCellphone").val(member.Cellphone);
            $("#txtTelePhone").val(member.Telephone);
            $("#txtEmail").val(member.Email);

            $("#ddlCitizenship option").filter(function () {
                return this.text == member.Citizenship;
            }).attr('selected', true);
            $("#tab-3 #ddlPolicy option").each(function () {
                if ($(this).val() == member.fkiPlanID) {
                    $(this).attr('selected', 'selected');
                }
            });
            $("#ddlSelectCompany").val(member.parlourid);
            $("#tab-3 #txtPolicyPremium").val(member.PolicyPremium);
            $("#tab-3 #txtPolicyCoverAmount").val(member.CoverAmount);
            $("#txtPassport").val(member.Passport);
            $("#txtStreetPostalAddress").val(member.Address1);
            $("#txtStreetPostalAddress_Post").val(member.Address1_Post);
            $("#txtAge").val(member.Age);
            $("#txtStreetAddress").val(member.Address2);
            $("#txtStreetAddress_Post").val(member.Address2_Post);
            $("#txtTownOrCity").val(member.Address3);
            $("#txtTownOrCity_Post").val(member.Address3_Post);
            $("#txtProvince").val(member.Address4);
            $("#txtProvince_Post").val(member.Address4_Post);
            $("#txtCode").val(member.Code);
            $("#txtCode_Post").val(member.Code_Post);
            $("#ddlPolicyStatus").val(member.PolicyStatus)
            $("#tab-3 #txtPolicyNo").val(member.MemeberNumber);
            $("#tab-3 #txtEasyToPay").val(member.EasyPayNo);
            $("#tab-3 #txtReferenceNumber").val(member.RefNumber);
            $("#tab-3 #ddlMemberBranch option:selected").text(member.MemberBranch);
            $("#tab-3 #ddlPolicyBankBranch option:selected").text(member.Branch);
            $("#tab-3 #ddlCustom1").val(member.CustomId1);
            $("#tab-3 #ddlCustom2").val(member.CustomId2);
            $("#tab-3 #ddlCustom3").val(member.CustomId3);
            $("#tab-1 #ddlMemberSociety option:selected").text(member.MemberSociety);

            $("#tab-1 #ddlAgent option").each(function () {
                if ($(this).val() == member.Agent) {
                    $(this).attr('selected', 'selected');
                }
            });
            $.noConflict();
            jQuery(document).ready(function () {
                $('#tab-1 #txtBirthDay').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(member.DateOfBirth)), "dd/mm/yyyy", false));
                $('#tab-3 #txtPolicyStartDate').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(member.StartDate)), "dd/mm/yyyy", false));
                $('#tab-3 #txtInception').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(member.InceptionDate)), "dd/mm/yyyy", false));
                $('#tab-3 #txtCoverDate').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(member.CoverDate)), "dd/mm/yyyy", false));
                $('#txtDebitDate').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(member.DebitDate)), "dd/mm/yyyy", false));
            });

            $("#tab-3 #ddlAgent option:selected").text(member.Agent)
            $("#txtTelePhone").val(member.Telephone);
            $("#txtAccountholder").val(member.AccountHolder);
            $("#ddlBank option").each(function () {
                if ($(this).text() == member.Bank) {
                    $(this).attr('selected', 'selected');
                }
            });
            $("#ddlAccountType option").each(function () {
                if ($(this).text() == member.AccountType) {
                    $(this).attr('selected', 'selected');
                }
            });
            $("#txtBranchCode").val(member.BranchCode);
            $("#txtBankBranch").val(member.Branch);
            $("#txtAccountNumber").val(member.AccountNumber);
            $("#MemberType").val(member.MemberType);
            //$("#tab-3 #txtTotalPremium").val(member.TotalPremium);
        };
        //#endregion

        //#region BindDocuments
        function BindDocuments() {

            var sortOrder = @Html.Raw(Json.Encode(@Model.DocumentSearch.SortOrder));
            var sortBy =@Html.Raw(Json.Encode(@Model.DocumentSearch.SortBy));
            var totalRecord =@Html.Raw(Json.Encode(@Model.DocumentSearch.TotalRecord));
            var pageNum =@Html.Raw(Json.Encode(@Model.DocumentSearch.PageNum));
            var pageSize =@Html.Raw(Json.Encode(@Model.DocumentSearch.PageSize));
            var searchText =@Html.Raw(Json.Encode(@Model.DocumentSearch.SarchText));

            var model1 = {
                SortOrder: sortOrder,
                SortBy: sortBy,
                TotalRecord: totalRecord,
                PageNum: pageNum,
                PageSize: pageSize,
                SarchText: searchText
            };


            $(document).ready(function () {
                jQuery.noConflict();
                documentDatatable = $($('#documentsDataTable')[0])
                    .on('page.dt', function () {
                        var table = $('#documentsDataTable').DataTable();
                        var page = table.page.info();
                        model1.PageNum = page.page + 1;
                    })
                    .dataTable({
                        'bProcessing': true,
                        'bServerSide': true,
                        "bLengthChange": false,
                        'bFilter': false,
                        'ordering': false,
                        'ajax': {
                            "url": '@Url.Action("BindDocuments", "Members", null, Request.Url.Scheme)',
                            "type": "POST",
                            "contentType": "application/json",
                            "data": function (d) {
                                d['order'].forEach(function (item, index) {
                                    if (model1.SortBy != d['columns'][item.column]['data']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = "asc";
                                    }
                                    if (model1.SortBy == d['columns'][item.column]['data'] && model1.SortOrder != d['order'][index]['dir']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = d['order'][index]['dir'];
                                    }
                                    model1.SortBy = d['columns'][item.column]['data'];
                                    model1.SortOrder = d['order'][index]['dir'];
                                });
                                return JSON.stringify(model1);
                            },
                            dataFilter: function (data) {
                                var json = jQuery.parseJSON(data);
                                json.recordsTotal = json.TotalCount;
                                json.recordsFiltered = json.TotalCount;
                                json.data = json.Result;
                                return JSON.stringify(json);
                            }
                        },
                        "columns": [
                            { "data": "pkiPictureID", "name": "pkiPictureID", "autoWidth": true, "visible": false },
                            { "data": "ImageName", "name": "Document", "autoWidth": true },
                            {
                                "data": "DocType", "name": "Document Type", "autoWidth": true,
                                "render": function (data, type, full, meta) {

                                    var dom = "<div>";

                                    var documentTypeId = full.DocType;
                                    var documentType = $("input[name='supportedDocuments']").filter(function () {
                                        return parseInt(this.value) == documentTypeId;
                                    });

                                    var text = documentType.parent().text();

                                    dom = dom + $.trim(text) + "</div>";
                                    return dom;
                                }
                            },
                            {
                                "data": "CreateDate", "name": "Create Date", "autoWidth": true,
                                "render": function (data, type, full, meta) {
                                    var dom = "<div>";
                                    var date = new Date(parseInt(full.CreateDate.replace('/Date(', '')));
                                    var CreateDate = dateFormat(date, 'dd-mmm-yyyy', false);
                                    dom = dom + CreateDate + "</div>";
                                    return dom;
                                }
                            },
                            {
                                "render": function (data, type, full, meta) {
                                    var hasEditRights = '@ViewBag.HasEditRight' == "True" ? true : false;
                                    var hasDeleteRights = '@ViewBag.HasDeleteRight' == "True" ? true : false;
                                    var dom = "<div class='row'>";
                                    var data1 = JSON.stringify(full);
                                    data1 = data1.replace(/"/g, "\'");

                                    var downloadActionUrl = '@Html.ActionLink(" ", "DownloadFile", new { pkiPictureID = "pkiPictureIDValue" },new { @class = "glyphicon glyphicon-download" })';
                                    downloadActionUrl = downloadActionUrl.replace("pkiPictureIDValue", full.pkiPictureID);

                                    var downloadDocumentUrl = '<div class="col-sm-4 text-center">' + downloadActionUrl + '</div>';
                                    dom = dom + downloadDocumentUrl;

                                    var viewDocumentURl = '@string.Format("{0}://{1}{2}/{3}", Request.Url.Scheme, Request.Url.Authority, Url.Content("~").Remove(Url.Content("~").Length - 1), "/Handler/DocumentHandler.ashx?DocID=DocIdValue" )'
                                    viewDocumentURl = viewDocumentURl.replace("DocIdValue", full.pkiPictureID);
                                    var viewDocumentUrl1 = '<div class="col-sm-4 text-center"><a data-gallery="" href=\'' + viewDocumentURl + '\'><i class="fa fa-search"></i></a></div>';
                                    dom = dom + viewDocumentUrl1;

                                    //var viewDocumentUrl = '<div class="col-sm-4 text-center"><a  onclick="ViewDocument(' + data1 + ')"><i class="fa fa-search"></i></a></div>';
                                    //dom = dom + viewDocumentUrl;
                                    if (hasDeleteRights) {
                                        var deleteDocumentUrl = '<div class="col-sm-4 text-center"><a  onclick="DeleteDocument(' + data1 + ')"><i class="fa fa-trash"></i></a></div>';
                                        dom = dom + deleteDocumentUrl;
                                    }

                                    dom = dom + "</div>";
                                    return dom;
                                }
                            }
                        ]
                    });
            });
        }

             @*var datatable = $('#auditTrailDataTable')
                    .on('page.dt', function () {
                        var table = $('#auditTrailDataTable').DataTable();
                        var page = table.page.info();
                        model1.PageNum = page.page + 1;
                    })
                    .dataTable({
                        'bProcessing': true,
                        'bServerSide': true,
                        "bLengthChange": false,
                        'bFilter': false,
                        'scrollX': false,
                        "ordering": true,
                        "bSortable": false,
                        'ajax': {
                            "url": '@Url.Action("BindAudit", "Members", null, Request.Url.Scheme)',
                            "type": "POST",
                            "contentType": "application/json",
                            "data": function (d) {
                                d['order'].forEach(function (item, index) {
                                    if (model1.SortBy != d['columns'][item.column]['data']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = "asc";
                                    }
                                    if (model1.SortBy == d['columns'][item.column]['data'] && model1.SortOrder != d['order'][index]['dir']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = d['order'][index]['dir'];
                                    }
                                    model1.SortBy = d['columns'][item.column]['data'];
                                    model1.SortOrder = d['order'][index]['dir'];
                                });
                                return JSON.stringify(model1);
                            },
                            "dataSrc": function (json) {

                                json.recordsTotal = json.TotalCount;
                                json.recordsFiltered = json.TotalCount;
                                json.data = json.Result;
                                var return_data = json;
                                return return_data.data;
                            }
                        },
                        "columns": [
                            //{ "data": "pkiMemberID", "name": "MemberId", "autoWidth": true, "visible": false },
                            { "data": "UserName", "name": "UserName", "autoWidth": true },
                            { "data": "Action", "name": "Action", "autoWidth": true },
                            { "data": "ActionDescription", "name": "Action Description", "autoWidth": true },
                            { "data": "MemeberNumber", "name": "Policy No", "autoWidth": true },
                            { "data": "FullNames", "title": "Full Name", "name": "Member", "autoWidth": true },
                            //{ "data": "EasyPayNo", "name": "EasyPayNo", "autoWidth": true },
                            //{ "data": "Cellphone", "name": "Cellphone", "autoWidth": true },
                            {
                                "data": "InceptionDate", "name": "InceptionDate", "autoWidth": true,
                                "render": function (data) {
                                    var date = new Date(parseInt(data.replace('/Date(', '')));
                                    return dateFormat(date, dateFormat.masks.isoDate, true);
                                }
                            },
                            {
                                "data": "PolicyStatus", "name": "Policy Status", "autoWidth": true,
                                "render": function (data, type, full, meta) {
                                    jQuery('.btn[href^=#]').click(function () {
                                        var href = jQuery(this).attr('href');
                                        jQuery(href).modal('toggle');
                                    })
                                    var data1 = JSON.stringify(full);
                                    data1 = data1.replace(/"/g, "\'")
                                    if ('@ViewBag.AdministratorOrSuperUser' == "True")
                                        return '<a onclick = "UpdateStatus(' + data1 + ')">' + data + '</a>';
                                    else
                                        return data;

                                }
                            },
                            {
                                "render": function (data, type, full, meta) {
                                    var hasEditRights = '@ViewBag.HasEditRight' == "True" ? true : false;
                                    var hasDeleteRights = '@ViewBag.HasDeleteRight' == "True" ? true : false;
                                    //hasDeleteRights = 'True';

                                    if (hasEditRights || hasDeleteRights) {

                                        var dom = "<div class='row'>";

                                        if (hasEditRights) {
                                            var editMemberUrl = '<div class="col-sm-4 text-center"><a href="@Url.Action("ManageMembers", "Members", null, Request.Url.Scheme)?pkiMemberID=' + full.pkiMemberID + '"><i class="fa fa-edit"></i></a></div>';
                                            dom = dom + editMemberUrl;
                                        }

                                        if (hasDeleteRights) {
                                            var deleteMemberUrl = '<div class="col-sm-4 text-center"> <a href="@Url.Action("Delete", "Members", null, Request.Url.Scheme)?pkiMemberID=' + full.pkiMemberID + '" onclick="function(){model1.PageNum = 1;return confirm(\'Are you sure you want to delete?\')}"; ><i class="fa fa-trash-o"></i></a></div>';
                                            dom = dom + deleteMemberUrl;
                                        }

                                        dom = dom + "</div>";
                                        return dom;
                                    }
                                    else {
                                        //tableConfigs.table.DataTable().columns([8]).visible(false);
                                        table.DataTable().columns([7]).visible(false)
                                        return "";
                                    }
                                }
                            }
                        ]
                    });*@



		$("#drpProductName").change(function () {

            var product = $(this);
            var getProductPriceUrl = $("#GetProductPrice").val();

            jQuery.ajax({
                url: getProductPriceUrl + "?productId=" + product.val(),
                type: "Get",
                contentType: "application/json",
                datatype:"html"
            })
            .success(function (result) {
                var productPriceData;
                var productCurrency;
                var productPrice;
                if (result != undefined)
                {
                    $("#txtPremium").val(result.ProductCost.toFixed(2));
                    $("#txtSupCover").val(result.ProductCover.toFixed(2));
                }
                $("#hdnPremium").val(result.product);
            })
            .error(function (xhr, status) {
                alert(status);
            });
        })

        //#region AddDocuments
        var DocumentUploadErrors = ["Please select document.", "Please select document type."];
        var DocumentUploadValidationErrors = [];

        $("#BtnAddDocument").click(function () {
            DocumentUploadValidationErrors = [];
            var SubmitDocumentURl = $("#SubmitDocuments").val();

            var fileUpload = $("#fuSupportDocument").get(0);
            var files = fileUpload.files;

            if (files.length == 0) {
                DocumentUploadValidationErrors.push(DocumentUploadErrors[0]);
            }

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            // Adding one more key to FormData object

            var documentType = $("input[name='supportedDocuments']:checked").val();
            fileData.append('documentType', documentType);
            if (documentType == null || documentType == undefined) {
                DocumentUploadValidationErrors.push(DocumentUploadErrors[1]);
            }
            //var data = {
            //    pkiNoteID: $("#pkiNoteId").val(),
            //    fkiMemberID: pkiMemberId,
            //    Notes: $("#txtNote").val()
            //};

            if (DocumentUploadValidationErrors.length == 0) {

                var $ul = $('#AddUpdateDocumentValidationSummary > ul');
                $ul.empty();

                $.ajax({
                    url: SubmitDocumentURl,
                    type: "post",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                        documentDatatable.fnDraw();
                        $("#fuSupportDocument").val('');
                        //$("#pkiNoteId").val('');
                        //$("#txtNote").val('');

                        //$("#BtnAddNote").prop('disabled', false);
                        //$("#BtnUpdateNote").prop('disabled', true);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(thrownError);
                    }
                })
            }
            else {
                displayDocumentUploadValidationErrors(DocumentUploadValidationErrors);
            }
        });

        function ViewDocument(data) {
            //var DeleteDocumentURl = $("#ViewDocuments").val();
            //downloadActionUrl = downloadActionUrl.replace("pkiPictureIDValue", full.pkiPictureID);
            var DeleteDocumentURl = '@string.Format("{0}://{1}{2}/{3}", Request.Url.Scheme, Request.Url.Authority, Url.Content("~").Remove(Url.Content("~").Length - 1), "/Handler/DocumentHandler.ashx?DocID=DocIdValue" )'
            DeleteDocumentURl = DeleteDocumentURl.replace("DocIdValue", data.pkiPictureID);

            $.ajax({
                url: DeleteDocumentURl,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                responseType: "json"
            })
            .success(function (result) {
                documentDatatable.fnDraw();
            })
            .error(function (xhr, status) {
                alert(status);
            });
        }
        //#endregion

        // #region BindDependents

        function BindDependents() {

            var sortOrder = @Html.Raw(Json.Encode(@Model.DependancySearch.SortOrder));
            var sortBy =@Html.Raw(Json.Encode(@Model.DependancySearch.SortBy));
            var totalRecord =@Html.Raw(Json.Encode(@Model.DependancySearch.TotalRecord));
            var pageNum =@Html.Raw(Json.Encode(@Model.DependancySearch.PageNum));
            var pageSize =@Html.Raw(Json.Encode(@Model.DependancySearch.PageSize));
            var searchText =@Html.Raw(Json.Encode(@Model.DependancySearch.SarchText));

            var model1 = {
                SortOrder: sortOrder,
                SortBy: sortBy,
                TotalRecord: totalRecord,
                PageNum: pageNum,
                PageSize: pageSize,
                SarchText: searchText
            };


			$(document).ready(function () {
				var currencyData = @Html.Raw(JsonConvert.SerializeObject(this.Model));
                $("#btnSaveDependent").show();
                $("#btnUpdateDependent").hide();
                //$("#btnSaveDependent").prop('disabled', false);
                //$("#btnUpdateDependent").prop('disabled', true);

                jQuery.noConflict();
                dependancyDatatable = $($('#dependantExtendedFamilyDataTable')[0])
                    .on('page.dt', function () {
                        var table = $('#dependantExtendedFamilyDataTable').DataTable();
                        var page = table.page.info();
                        model1.PageNum = page.page + 1;
                    })
                    .dataTable({
                        'bProcessing': true,
                        'bServerSide': true,
                        "bLengthChange": false,
                        'bFilter': false,
                        'ordering': false,
                        'ajax': {
                            "url": '@Url.Action("BindDependantFamily", "Members", null, Request.Url.Scheme)',
                            "type": "POST",
                            "contentType": "application/json",
							"data": function (d) {
								d['order'].forEach(function (item, index) {
                                    if (model1.SortBy != d['columns'][item.column]['data']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = "asc";
                                    }
                                    if (model1.SortBy == d['columns'][item.column]['data'] && model1.SortOrder != d['order'][index]['dir']) {
                                        model1.PageNum = 1;
                                        model1.SortOrder = d['order'][index]['dir'];
                                    }
                                    model1.SortBy = d['columns'][item.column]['data'];
                                    model1.SortOrder = d['order'][index]['dir'];
                                });
                                return JSON.stringify(model1);
                            },
							dataFilter: function (data) {
                                var json = jQuery.parseJSON(data);
                                json.recordsTotal = json.TotalCount;
                                json.recordsFiltered = json.TotalCount;
								json.data = json.Result;
								currencySymbol = json.SearchParameters.Currency
								return JSON.stringify(json);

                            }
                        },
                        "columns": [
                            { "data": "pkiDependentID", "name": "pkiDependentID", "autoWidth": true, "visible": false },
                            { "data": "FullName", "name": "Name", "autoWidth": true,
                                "render":function(data, type, full, meta){
                                    return full.Surname+" "+ full.FullName;
                                }},
                            { "data": "IDNumber", "name": "ID Number", "autoWidth": true},
                            {
                                "data": "StartDate", "name": "Start Date", "autoWidth": true, "visible": false,
                                "render": function (data) {
                                    return dateFormat(new Date(ConvertDate(data)), "dd-mmm-yyyy", false)
                                    //var date = new Date(parseInt(data.replace('/Date(', '')));
                                    //return dateFormat(date, 'dd-mmm-yyyy', false);
                                }
                            },
                            {
                                "data": "InceptionDate", "name": "Inception Date", "autoWidth": true,
								"render": function (data) {
                                    return dateFormat(new Date(ConvertDate(data)), "dd-mmm-yyyy", false)
                                    //var date = new Date(parseInt(data.replace('/Date(', '')));
                                    //return dateFormat(date, 'dd-mmm-yyyy', false);
                                }
                            },
                            {
                                "data": "CoverDate", "name": "Cover Date", "autoWidth": true,
                                "render": function (data) {
                                    var date = new Date(parseInt(data.replace('/Date(', '')));
                                    return dateFormat(date, 'dd-mmm-yyyy', false);
                                }
                            },
                            { "data": "Premium", "name": "Premium", "autoWidth": true ,
								"render": function (data) {
									var currencyPremium = currencySymbol + data
									var premium = "<div class='pull-right'>" + currencyPremium + ".00" + "</div>";
                                    return premium;
                                }
                            },
                            {
                                "data": "Cover", "name": "Cover", "autoWidth": true,
								"render": function (data) {
									var currencyPremium = currencySymbol + data
									var premium = "<div class='pull-right'>" + currencyPremium + ".00" + "</div>";
                                    return premium;
                                }
                            },
                            { "data": "DependencyType", "name": "Dependency", "autoWidth": true },

                            { "data": "Gender", "name": "Gender", "autoWidth": true },
                            { "data": "DependentStatus", "name": "DependentStatus", "autoWidth": true },
                            {
                                "render": function (data, type, full, meta) {
                                    var hasEditRights = '@ViewBag.HasEditRight' == "True" ? true : false;
                                    var hasDeleteRights = true;
                                    var dom = "<div class='row'>";
                                    var data1 = JSON.stringify(full);
                                    data1 = data1.replace(/"/g, "\'")
                                    if (hasEditRights) {
                                        var editProductUrl = '<div class="col-sm-4 text-center"><a  onclick="EditDependency(' + data1 + ')"><i class="fa fa-edit"></i></a></div>';
                                        dom = dom + editProductUrl;
                                    }
                                    if (hasDeleteRights) {
                                        var deleteProductUrl = '<div class="col-sm-4 text-center"> <a onclick="DeleteDependency(' + data1 + ')"; ><i class="fa fa-trash-o"></i></a></div>';
                                        dom = dom + deleteProductUrl;
                                    }

                                    dom = dom + "</div>";
                                    return dom;

                                }
                            }
                        ]
                    });
            });
        }
        // #endregion

    });

    //#region ConvertDate
    function ConvertDate(date) {
        if (date != undefined && date != '' && date != null) {
            return dateFormat(new Date(parseInt(date.replace('/Date(', ''))), "yyyy/mm/dd", false)
            //return dateFormat(new Date(parseInt(date.replace('/Date(', ''))), "mm/dd/yyyy", true)
        }
        else {
            return dateFormat(new Date(0001, 00, 01), "yyyy/mm/dd", false);
        }
    }
    //#endregion

    function goToTab(idback,idnext) {
        $('#atab' + idnext).get(0).click();
        return false;
    }

    //#region EditDependency
    function EditDependency(dependant) {
        $("#hdnDependantId").val(dependant.pkiDependentID);

        $("#btnSaveDependent").hide();
        $("#btnUpdateDependent").show();
        //$("#btnSaveDependent").prop('disabled', true);
        //$("#btnUpdateDependent").prop('disabled', false);

        $("#tab-5 #txtDependentLastname").val(dependant.Surname);
        $("#tab-5 #ddl_DependentStatus").val(dependant.DependentStatus);
        $("#tab-5 #txtDependentFirstname").val(dependant.FullName);
        $("#tab-5 #txtDependentIdNumber").val(dependant.IDNumber);

        $('.dependantDOB').datepicker({ format: 'dd MM yyyy',autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(dependant.DateOfBirth)), "dd/mm/yyyy", false));
        $('.dependantStartDate').datepicker({ format: 'dd MM yyyy',autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(dependant.StartDate)), "dd/mm/yyyy", false));
        $('.dependantInceptionDate').datepicker({ format: 'dd MM yyyy',autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(dependant.InceptionDate)), "dd/mm/yyyy", false));
        $('.dependantCoverDate').datepicker({ format: 'dd MM yyyy',autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(dependant.CoverDate)), "dd/mm/yyyy", false));

        $("#tab-5 #txtDependentAge").val(dependant.Age);
        $("#tab-5 #ddlDependentDependencyType option").filter(function () {
            return this.text == dependant.DependencyType;
        }).attr('selected', true);
        //$('#ddlDependentDependencyType').find('option:selected').text(dependant.DependencyType);
        //$("input[name='dependentGender']:checked").val(dependant.Gender);
        if (dependant.Gender == "female") {
            $("#female").prop('checked', true);
        } else {
            $("#male").prop('checked', true);
        }

        $("#tab-5 #txtDependentPremium").val(dependant.Premium);
        $('#tab-5 #txtDependentCoverAmount').val(dependant.Cover);
        $('html, body').animate({
            scrollTop: $("#tab5Dependent").offset().top
        }, 100);
        $("#txtDependentInceptionDate").attr("readonly", "true");
    }
    //#endregion

    //#region SaveUpdateDelete Dependants
    function SaveDependants() {
        var SaveDependantURl = $("#SaveDependancy").val();

        var lastName = $("#tab-5 #txtDependentLastname").val();
        var DependentStatus = $("#tab-5 #ddl_DependentStatus").val();
        var firstName = $("#tab-5 #txtDependentFirstname").val();
        var birthDate = $("#tab-5 #txtDependentDateOfBirth").val();
        var startDate = $("#tab-5 #txtDependentStartDate").val();
        var premium = $("#tab-5 #txtDependentPremium").val();
        var CoverAmount = $("#tab-5 #txtDependentCoverAmount").val();
        var inceptionDate = $("#tab-5 #txtDependentInceptionDate").val();
        var allFlag = true;
        var lastNameFlag = true;
        var firstNameFlag = true;
        var birthDateFlag = true;
        var startDateFlag = true;
        var premiumFlag = false;
        var inceptionDateFlag = true;
        if(lastName == "" && firstName == "" && birthDate == "" && startDate == "" && premium == "" && inceptionDate == "")
        {
            $("#ValidationSummary4").hide();
            $("#ValidationSummary4").html('');
            $("#ValidationSummary4").show();
            $("#ValidationSummary4").append('<li id="txtLastNameId">Please enter dependency Surname.</li>');
            $("#ValidationSummary4").append('<li id="txtFirstNameId">Please enter dependency Full name.</li>');
            $("#ValidationSummary4").append('<li id="txtBirthDateId">Please enter date of birth.</li>');
            $("#ValidationSummary4").append('<li id="txtStartDateId">Please enter Start date.</li>');
            $("#ValidationSummary4").append('<li id="txtPremiumId">Please enter premium.</li>');
            $("#ValidationSummary4").append('<li id="txtInceptionDate">Please enter inception date.</li>');
            allFlag = false;
        }else{

            if(lastName != ""){
                //var regex = new RegExp("^[a-zA-Z]+$");
                 lastNameFlag = true;
                //if (regex.test(lastName)) {
                //    $("li#txtLastNameId").hide();
                //    $("li#txtLastNameId").html('');
                //    $("li#EnterLastNameid").hide();
                //    $("li#EnterLastNameid").html('');

                //}
                //else
                //{
                //    $("li#txtLastNameid").hide();
                //    $("li#txtLastNameid").html('');
                //    $("li#EnterLastNameid").hide();
                //    $("li#EnterLastNameid").html('');
                //    $("#ValidationSummary4").show();
                //    $("#ValidationSummary4").append('<li id="EnterLastNameid">Surname Enter Only characters.</li>');
                //    lastNameFlag = false;
                //}
            }else{
                $("li#txtLastNameid").hide();
                $("li#txtLastNameid").html('');
                $("li#EnterLastNameid").hide();
                $("li#EnterLastNameid").html('');
                $("#ValidationSummary4").show();
                $("#ValidationSummary4").append('<li id="EnterLastNameid">Please enter dependency Surname.</li>');
                lastNameFlag= false;
            }


            if(firstName != ""){
                //var regex = new RegExp("^[a-zA-Z]+$");
                 firstNameFlag = true;
                //if (regex.test(firstName)) {
                //    $("li#txtFirstNameId").hide();
                //    $("li#txtFirstNameId").html('');
                //    $("li#EnterFirstNameid").hide();
                //    $("li#EnterFirstNameid").html('');
                //    firstNameFlag = true;
                //}
                //else
                //{
                //    $("li#txtFirstNameId").hide();
                //    $("li#txtFirstNameId").html('');
                //    $("li#EnterFirstNameid").hide();
                //    $("li#EnterFirstNameid").html('');
                //    $("#ValidationSummary4").show();
                //    $("#ValidationSummary4").append('<li id="txtFirstNameId">Full name Enter Only Characters.</li>');
                //    firstNameFlag = false;
                //}
            }else{
                $("li#txtFirstNameId").hide();
                $("li#txtFirstNameId").html('');
                $("li#EnterFirstNameid").hide();
                $("li#EnterFirstNameid").html('');
                $("#ValidationSummary4").show();
                $("#ValidationSummary4").append('<li id="EnterFirstNameid">Please enter dependency Full name.</li>');
                firstNameFlag = false;
            }


            if(birthDate != ""){
                $("li#txtBirthDateId").hide();
                $("li#txtBirthDateId").html('');
                $("li#EnterBirthDateid").hide();
                $("li#EnterBirthDateid").html('');
                birthDateFlag = true;
            }else{
                $("li#txtBirthDateId").hide();
                $("li#txtBirthDateId").html('');
                $("li#EnterBirthDateid").hide();
                $("li#EnterBirthDateid").html('');
                $("#ValidationSummary4").show();
                $("#ValidationSummary4").append('<li id="EnterBirthDateid">Please enter date of birth.</li>');
                birthDateFlag = false;
            }

            if(inceptionDate != ""){
                $("li#txtInceptionDate").hide();
                $("li#txtInceptionDate").html('');
                $("li#EnterInceptionDateid").hide();
                $("li#EnterInceptionDateid").html('');
                inceptionDateFlag = true;
            }else{
                $("li#txtInceptionDate").hide();
                $("li#txtInceptionDate").html('');
                $("li#EnterInceptionDateid").hide();
                $("li#EnterInceptionDateid").html('');
                $("#ValidationSummary4").show();
                $("#ValidationSummary4").append('<li id="EnterInceptionDateid">Please enter inception date.</li>');
                inceptionDateFlag = false;
            }

            if(startDate != ""){
                $("li#txtStartDateId").hide();
                $("li#txtStartDateId").html('');
                $("li#EnterStartDateid").hide();
                $("li#EnterStartDateid").html('');
                startDateFlag = true;
            }else{
                $("li#txtStartDateId").hide();
                $("li#txtStartDateId").html('');
                $("li#EnterStartDateid").hide();
                $("li#EnterStartDateid").html('');
                $("#ValidationSummary4").show();
                $("#ValidationSummary4").append('<li id="EnterStartDateid">Please enter Start date.</li>');
                startDateFlag = false;
            }

            if(premium != ""){
                $("li#txtPremiumId").hide();
                $("li#txtPremiumId").html('');
                $("li#EnterPremiumid").hide();
                $("li#EnterPremiumid").html('');
                premiumFlag = true;
            }else{
                $("li#txtPremiumId").hide();
                $("li#txtPremiumId").html('');
                $("li#EnterPremiumid").hide();
                $("li#EnterPremiumid").html('');
                $("#ValidationSummary4").show();
                $("#ValidationSummary4").append('<li id="EnterPremiumid">Please enter premium.</li>');
                premiumFlag = false;
            }
        }

        if(allFlag == false || lastNameFlag == false || firstNameFlag == false || birthDateFlag == false || startDateFlag == false || premiumFlag == false || inceptionDateFlag == false)
        {
            return false;
        }else{

            var data = {
                Surname: $("#tab-5 #txtDependentLastname").val(),
                DependentStatus: $("#tab-5 #ddl_DependentStatus").val(),
                FullName: $("#tab-5 #txtDependentFirstname").val(),
                IDNumber: $("#tab-5 #txtDependentIdNumber").val(),
                DateOfBirth: dateFormat($("#tab-5 #txtDependentDateOfBirth").val(), 'dd-mm-yyyy', false),
                Age: $("#tab-5 #txtDependentAge").val(),
                Gender: $("input[name='dependentGender']:checked").val(),
                StartDate: dateFormat($("#tab-5 #txtDependentStartDate").val(), 'dd-mm-yyyy', false),
                InceptionDate: dateFormat($("#tab-5 #txtDependentInceptionDate").val(), 'dd-mm-yyyy', false),
                CoverDate: dateFormat($("#tab-5 #txtDependentCoverDate").val(), 'dd-mm-yyyy', false),
                DependencyType: $("#tab-5 #ddlDependentDependencyType :selected").text(),
                Premium: $("#tab-5 #txtDependentPremium").val(),
                pkiDependentID: 0,
                MemberId: pkiMemberId,
                Relationship: $("#tab-5 #ddlDependentDependencyType :selected").val(),
                Cover:$("#tab-5 #txtDependentCoverAmount").val()
            };

            jQuery.ajax({
                url: SaveDependantURl,
                data: JSON.stringify(data),
                type: 'post',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (result) {

                    var isSuccessful = (result['success']);
                    var maxLenghDependancy = (result['maxLenghDependancy']);
                    if (isSuccessful != false) {
                        if (maxLenghDependancy == true) {
                            dependancyDatatable.fnDraw();
                            $("#tab-5 #txtDependentLastname").val('');
                            $("#tab-5 #txtDependentFirstname").val('');
                            $("#tab-5 #txtDependentIdNumber").val('');
                            $("#tab-5 #txtDependentAge").val('');
                            $("input[name='dependentGender']:checked").val('');

                            $('.dependantInceptionDate').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", Date());
                            //$('.dependantInceptionDate').datepicker('setDate', null);
                            $('.dependantStartDate').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", Date());
                            //$('.dependantCoverDate').datepicker({ format: 'dd MM yyyy' }).datepicker("setDate", Date());
                            $('.dependantDOB').datepicker({ format: 'dd MM yyyy', autoclose: true }).datepicker("setDate", Date());

                            $("#tab-5 #ddlDependentDependencyType").val('');
                            $("#tab-5 #txtDependentPremium").val('');

                            $("#btnSaveDependent").show();
                            $("#btnUpdateDependent").hide();
                            //$("#btnSaveDependent").prop('disabled', false);
                            //$("#btnUpdateDependent").prop('disabled', true);

                            //$("#tab-5 #txtDepnduncyType").text('');
                            //$("#tab-5 #txtPremium").val('');
                        }
                        else {
                             var errors = "this member has already added 100 dependencies ";
                        displayUpdateDependantValidationErrors_directMsg(errors);
                        }
                    }
                    else {
                        var errors = result['errors'];
                        displayUpdateDependantValidationErrors(errors);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })

            return true;
        }
    }

    function displayUpdateDependantValidationErrors(errors) {
        var $ul = $('#AddUpdateDependantValidationSummary > ul');
        $ul.empty();
        if (errors != undefined && errors.length > 0) {
            $.each(errors, function (idx, errorMessage) {
                $ul.append('<li>' + errorMessage + '</li>');
            });
        }
    }
     function displayUpdateDependantValidationErrors_directMsg(errors) {
        var $ul = $('#AddUpdateDependantValidationSummary > ul');
        $ul.empty();
        $ul.append('<li>' + errors + '</li>');
    }

    function UpdateDependants() {
        var UpdateDependantURl = $("#UpdateDependancy").val();
        var data = {
            pkiDependentID: $("#hdnDependantId").val(),
            DependentStatus: $("#tab-5 #ddl_DependentStatus").val(),
            Surname: $("#tab-5 #txtDependentLastname").val(),
            FullName: $("#tab-5 #txtDependentFirstname").val(),
            IDNumber: $("#tab-5 #txtDependentIdNumber").val(),
            DateOfBirth: dateFormat($("#tab-5 #txtDependentDateOfBirth").val(), 'dd-mm-yyyy', false),
            Age: $("#tab-5 #txtDependentAge").val(),
            Gender: $("input[name='dependentGender']:checked").val(),
            StartDate: dateFormat($("#tab-5 #txtDependentStartDate").val(), 'dd-mm-yyyy', false),
            InceptionDate: dateFormat($("#tab-5 #txtDependentInceptionDate").val(), 'dd-mm-yyyy', false),
            CoverDate: dateFormat($("#tab-5 #txtDependentCoverDate").val(), 'dd-mm-yyyy', false),
            DependencyType: $("#tab-5 #ddlDependentDependencyType :selected").text(),
            Premium: $("#tab-5 #txtDependentPremium").val(),
            Cover:$("#tab-5 #txtDependentCoverAmount").val()
        };

        $.ajax({
            url: UpdateDependantURl + "?pkiDependantId=" + data.pkiDependentID,
            data: data,
            type: "post",
            cache: false,
            success: function (result) {
                var isSuccessful = (result['success']);
                if (isSuccessful != false) {

                    dependancyDatatable.fnDraw();

                    $("#tab-5 #txtDependentLastname").val('');
                    $("#tab-5 #txtDependentFirstname").val('');
                    $("#tab-5 #txtDependentIdNumber").val('');
                    $("#tab-5 #txtDependentAge").val('');
                    $("input[name='dependentGender']:checked").val();

                    $('.dependantInceptionDate').datepicker('setDate', null);
                    $('.dependantStartDate').datepicker('setDate', null);
                    $('.dependantCoverDate').datepicker('setDate', null);
                    $('.dependantDOB').datepicker('setDate', null);

                    //startDate;
                    //inceptionDate;
                    //coverDate;

                    $("#tab-5 #ddlDependentDependencyType").val("");
                    $("#tab-5 #txtDependentPremium").val('');

                    $("#btnSaveDependent").show();
                    $("#btnUpdateDependent").hide();

                    //$("#btnSaveDependent").prop('disabled', false);
                    //$("#btnUpdateDependent").prop('disabled', true);
                    //location.reload();
                    $("#txtDependentInceptionDate").attr("readonly", false);
                }
                else {
                    var errors = result['errors'];
                    displayUpdateDependantValidationErrors(errors);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert(thrownError);
            }
        })
    }

    function DeleteDependency(dependant) {
        var deleteConfirm = confirm('Are you sure you want to delete it?');
        if (deleteConfirm) {
            var DeleteDependencyURl = $("#DeleteDependancy").val();
            jQuery.ajax({
                url: DeleteDependencyURl + "?pkiDependantId=" + dependant.pkiDependentID,
                type: "Get",
                contentType: "application/html; charset=utf-8",
                dataType: 'html'
            })
                .success(function (result) {
                    dependancyDatatable.fnDraw();
                    alert("Dependency Deleted Successfully!!");
                })
                .error(function (xhr, status) {
                    alert(status);
                });
        }
    }

    function getDependencyAge(DOB1) {
        var DOB = new Date(DOB1);
        var today = new Date();
        var nowyear = today.getFullYear();
        var nowmonth = today.getMonth();
        var nowday = today.getDate();

        var birthyear = DOB.getFullYear();
        var birthmonth = DOB.getMonth();
        var birthday = DOB.getDate();

        var age = nowyear - birthyear;
        var age_month = nowmonth - birthmonth;
        var age_day = nowday - birthday;
        if (age_month < 0 || (age_month == 0 && age_day < 0)) {
            age = parseInt(age) - 1;
        }
        $("#tab-5 #txtDependentAge").val(age.toString());
        $("#txtAge").val(age.toString());
    }
    //#endregion

    //#region SaveUpdateDelete Product
    function displayAddOnProductValidationErrors(errors) {
        var $ul = $('#AddUpdateAddOnProductValidationSummary > ul');
        $ul.empty();
        if (errors != undefined && errors.length > 0) {
            $.each(errors, function (idx, errorMessage) {
                $ul.append('<li>' + errorMessage + '</li>');
            });
        }
    }

    function DeleteProduct(product) {
        var DeleteAddonProductURl = $("#DeleteAddOnProduct").val();
        var deleteConfirm = confirm('Are you sure you want to delete it?');
        if (deleteConfirm) {
            jQuery.ajax({
                url: DeleteAddonProductURl + "?pkiProductId=" + product.pkiMemberProductID,
                type: "Get",
                contentType: "application/html; charset=utf-8",
                dataType: 'html'
            })
                .success(function (result) {
                    productDatatable.fnDraw();
                    alert("Product Deleted Successfully!!");
                })
                .error(function (xhr, status) {
                    alert(status);
                });
        }
    }

    @*function SaveAddOnProduct() {
        if($("#txtPremium").val() != ""){
            $("li#txtPremiumAmountId").hide();
            $("li#txtPremiumAmountId").html('');
            if (@memberId>0) {
                var SaveAddonProductURl = $("#SaveAddOnProduct").val();
                $("#hdnPremium").val($("#txtPremium").val().split(" ")[$("#txtPremium").val().split(" ").length - 1]);
                var data = {
                    fkiMemberid: pkiMemberId,
                    ProductName: $("#drpProductName option:selected").text(),
                    ProductCost: $("#hdnPremium").val(),
                    pkiMemberProductID: $("#MemberType").val(),
                    fkiProductID: $("#drpProductName option:selected").val()
                };

                $.ajax({
                    url: SaveAddonProductURl + "?pkiMemberId=" + pkiMemberId,
                    data: data,
                    type: "post",
                    cache: false,
                    success: function (result) {
                        var isSuccessful = (result['success']);
                        if (isSuccessful != false) {
                            var $ul = $('#AddUpdateAddOnProductValidationSummary > ul');
                            $ul.empty();
                            productDatatable.fnDraw();
                            //$("#pkiMemberID").val('');
                            $("#drpProductName option").each(function () {
                                if ($(this).text() == 'Select') {
                                    $(this).attr('selected', 'selected');
                                }
                            });
                            $("#txtPremium").val('');
                            $("#hdnPremium").val('');
                            $("#pkiMemberProductID").val('');
                        }
                        else {
                            var errors = result['errors'];
                            displayAddOnProductValidationErrors(errors);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(thrownError);
                    }
                })
            }
        }else{
            $("li#txtPremiumAmountId").hide();
            $("li#txtPremiumAmountId").html('');
            $("#ValidationSummary5").show();
            $("#ValidationSummary5").append('<li id="txtPremiumAmountId">Please enter premium amount.</li>');
            return false;
        }
    }*@

    function UpdateAddOnProduct() {
        $("#hdnPremium").val($("#txtPremium").val().split(" ")[$("#txtPremium").val().split(" ").length - 1]);
        //$("#hdnSupCover").val($("#txtSupCover").val().split(" ")[$("#txtSupCover").val().split(" ").length - 1]);
        var premiumLength = $("#txtPremium").val().split(" ").length;
        var premiumVal = $("#txtPremium").val().split(" ")[premiumLength-1];

        var DependancyTypeId = $("#ddlDependentDependencyType_Product").val() == "" ? "0" : $("#ddlDependentDependencyType_Product").val();

        var UpdateAddonProductURl = $("#UpdateAddOnProduct").val();
        var data = {
            fkiMemberid: $("#pkiMemberID").val(),
            DependencyType: DependancyTypeId,
            ProductName: $("#drpProductName option:selected").text(),
            ProductCost: $("#hdnPremium").val(),
            pkiMemberProductID: $("#pkiMemberProductID").val(),
            fkiProductID: $("#drpProductName option:selected").val()
        };

        $.ajax({
            url: UpdateAddonProductURl + "?pkiMemberId=" + data.fkiMemberid,
            data: data,
            type: "post",
            cache: false,
            success: function (result) {
                var isSuccessful = (result['success']);
                if (isSuccessful != false) {
                    productDatatable.fnDraw();
                    var $ul = $('#AddUpdateAddOnProductValidationSummary > ul');
                    $ul.empty();
                    $("#drpProductName option:selected").text("Select");
                    $("#txtPremium").val('');
                    $("#hdnPremium").val('');
                    //$("#txtSupCover").val('');
                    $("#hdnSupCover").val('');
                    $("#pkiMemberProductID").val('');
                    $("#btnSaveProduct").prop('disabled', false);
                    $("#btnUpdateProduct").prop('disabled', true);

                    $("#lblMessage").html('');
                    $("#lblMessage").append('<div class="alert alert-success">Product Updated Successfully</div>')
                    $("#txtPremium").val('');
                }
                else {
                    var errors = result['errors'];
                    displayAddOnProductValidationErrors(errors);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert(thrownError);
            }
        })
    }
    //#endregion

    //#region EditProduct
    function EditProduct(product) {
        $("#drpProductName").val(product.fkiProductID);
        if (product.DependencyType != 0) {
            $("#ddlDependentDependencyType_Product").val(product.DependencyType);
        }
        else
            $("#ddlDependentDependencyType_Product").val("");
        $("#btnSaveProduct").prop('disabled', true);
		$("#btnUpdateProduct").prop('disabled', false);
        $("#hdnPremium").val(product.ProductCost);
        $("#hdnSupCover").val(product.ProductCost);
		var premiumPrice = product.ProductPrice.split(" ");
        $("#txtPremium").val(premiumPrice[1]);//product.ProductPrice
        //$("#txtSupCover").val(premiumPrice[1]);//product.ProductPrice
        $("#pkiMemberProductID").val(product.pkiMemberProductID);
        $("#fkiMemberid").val(product.fkiMemberid);
        $("#pkiMemberID").val(product.fkiMemberid);
    }
    //#endregion

    //#region EditUpdateDelete Note
    function displayNoteValidationErrors(errors) {
        var $ul = $('#AddUpdateNoteValidationSummary > ul');
        $ul.empty();
        if (errors != undefined && errors.length > 0) {
            $.each(errors, function (idx, errorMessage) {
                $ul.append('<li>' + errorMessage + '</li>');
            });
        }
    }

    function EditNote(note) {
        $("#BtnAddNote").prop('disabled', true);
        $("#BtnUpdateNote").prop('disabled', false);

        $("#pkiNoteId").val(note.pkiNoteID);
        $("#txtNote").val(note.Notes);
    }

    function DeleteNote(note) {
          var deleteConfirm = confirm('Are you sure you want to delete it?');
        if (deleteConfirm) {
            var DeleteNoteURl = $("#DeleteNote").val();
            jQuery.ajax({
                url: DeleteNoteURl + "?pkiNoteId=" + note.pkiNoteID,
                type: "Get",
                contentType: "application/html; charset=utf-8",
                dataType: 'html'
            })
                .success(function (result) {
                    noteDatatable.fnDraw();
                    alert("Note Deleted Successfully!!");
                })
                .error(function (xhr, status) {
                    alert(status);
                });
        }
    }

    function ViewNote(data) {
        jQuery(function ($) {
            $("#noteModal .modal-title").html("Note");
            $("#noteModal .modal-body").html(data.Notes);
            var options = {
                'backdrop': false,
                'show': true
            }
            $("#noteModal").modal(options);
        });
    }
    //#endregion

    //#region UpdateMemberPolicy Modal
    function UpdateMemberPolicy(data) {
        //jQuery(function ($) {
        $("#PolicyUpdatePopupModel .modal-title").html("Update Policy");
        $("#PolicyUpdatePopupModel .modal-body #ddlPolicyPopupPolicy option").each(function () {
            if ($(this).val() == data.fkiPlanID) {
                $(this).attr('selected', 'selected');
            }
        });
        $("#PolicyUpdatePopupModel .modal-body #txtPolicyPopupPremium").val(data.PolicyPremium);
        $("#PolicyUpdatePopupModel .modal-body #txtPolicyNo").val(data.MemeberNumber);
        $("#PolicyUpdatePopupModel .modal-body #txtEasyToPay").val(data.EasyPayNo);
        $("#PolicyUpdatePopupModel .modal-body #txtReferenceNumber").val(data.RefNumber);
        //$("#PolicyUpdatePopupModel .modal-body #txtUnderwriter").val(data.);

        jQuery('select#ddlPolicyBankBranch option').each(function () {
            if (jQuery(this).text() == data.MemberBranch) {
                jQuery(this).prop('selected', 'selected');
                return;
            }
        });
        jQuery('select#ddlPopupCustom1 option').each(function () {
            if (jQuery(this).val() == data.CustomId1) {
                jQuery(this).prop('selected', 'selected');
                return;
            }
        });

        //$("#PolicyUpdatePopupModel .modal-body #ddlCustom2").val(data.CustomId2);
        jQuery('select#ddlPopupCustom2 option').each(function () {
            if (jQuery(this).val() == data.CustomId2) {
                jQuery(this).prop('selected', 'selected');
                return;
            }
        });
        //$("#PolicyUpdatePopupModel .modal-body #ddlCustom3").val(data.CustomId3);
        jQuery('select#ddlPopupCustom3 option').each(function () {
            if (jQuery(this).val() == data.CustomId3) {
                jQuery(this).prop('selected', 'selected');
                return;
            }
        });

        jQuery('select#ddlAgent option').each(function () {
            if (jQuery(this).text() == data.Agent) {
                jQuery(this).prop('selected', 'selected');
                return;
            }
        });
        $("#PolicyUpdatePopupModel .modal-body #ddlMemberSociety").val(data.MemberSociety);
        $(document).ready(function () {
            $('#PolicyUpdatePopupModel .modal-body #txtPolicyStartDate').datepicker({ format: 'dd MM yyyy',autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(data.StartDate)), "dd/mm/yyyy", false));
            $('#PolicyUpdatePopupModel .modal-body #txtPolicyPopupInception').datepicker({ format: 'dd MM yyyy',autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(data.InceptionDate)), "dd/mm/yyyy", false));
            $('#PolicyUpdatePopupModel .modal-body #txtPolicyPopupCoverDate').datepicker({ format: 'dd MM yyyy',autoclose: true }).datepicker("setDate", dateFormat(new Date(ConvertDate(data.CoverDate)), "dd/mm/yyyy", false));

            //Jeenal Changes
            // $('.policyPopupDate').datepicker({ format: 'dd MM yyyy' }).datepicker("setDate", dateFormat(new Date(ConvertDate(data.StartDate)), "dd/mm/yyyy", false));
            //$('#txtPolicyPopupStartDate').datepicker({ format: 'dd MM yyyy' }).datepicker("setDate", dateFormat(new Date(ConvertDate(data.StartDate)), "dd/mm/yyyy", false));
            //$('#PolicyUpdatePopupModel .modal-body #txtInception').datepicker({ format: 'dd MM yyyy' }).datepicker("setDate", dateFormat(new Date(ConvertDate(data.InceptionDate)), "dd/mm/yyyy", false));
            //$('#PolicyUpdatePopupModel .modal-body #txtCoverDate').datepicker({ format: 'dd MM yyyy' }).datepicker("setDate", dateFormat(new Date(ConvertDate(data.CoverDate)), "dd/mm/yyyy", false));
            //Jeenal Changes End
        });
        var options = {
            'backdrop': false,
            'show': true
        }
        jQuery("#PolicyUpdatePopupModel").modal(options);
        //});

    }
    //#endregion
    $("#ddlPolicyPopupPolicy").change(function () {
        var GetPremiumForPolicyURl = $("#GetPolicyDetails").val();

        var id = $("#ddlPolicyPopupPolicy").val();
        var date = $("#PolicyUpdatePopupModel .modal-body #txtPolicyStartDate").val();
        var date = new Date(parseInt($("#PolicyUpdatePopupModel .modal-body #txtPolicyStartDate").val().replace('/Date(', '')));
        var policyStartDate = dateFormat($("#PolicyUpdatePopupModel .modal-body #txtPolicyStartDate").val(), 'mm/dd/yyyy', false);

        if ($("#ddlPolicyPopupPolicy :selected").val() != "") {
            $.ajax({
                url: GetPremiumForPolicyURl + "?id=" + id + "&date=" + policyStartDate,
                type: "get",
                cache: false,
                success: function (result) {

                    $('#txtPolicyPopupPremium').val(result[0]);
                    $('#txtPolicyPopupUnderwriter').val(result[1]);
                    $('#txtPolicyPopupCoverDate').val(result[2]);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
        } else {
            alert("Please select policy..!");
        }
    });

    //#region DeleteMemberPolicy
    function DeleteMemberPolicy(data) {
        var deleteConfirm = confirm('Are you sure you want to delete it?');
        if (deleteConfirm) {
            var DeleteMemberPolicyURl = $("#DeleteMemberPolicy").val();
            jQuery.ajax({
                url: DeleteMemberPolicyURl + "?pkiMemberID=" + data.pkiMemberID,
                type: "Get",
                contentType: "application/html; charset=utf-8",
                dataType: 'html'
            })
                .success(function (result) {
                    memberPolicyDatatable.fnDraw();
                    alert("Member Policy Deleted Successfully!!");
                })
                .error(function (xhr, status) {
                    alert(status);
                });
        }
    }


    //#endregion

    //#region Jeenal Changes
	function OnStartChangeFillPolicyModal(policyId, policyStartDate) {
        var bindPolicyCoverDateUrl = $("#BindPolicyCoverDateUrl").val();

        if (policyId != '' && policyStartDate != undefined) {
            $.ajax({
                url: bindPolicyCoverDateUrl + "?id=" + policyId + "&date=" + policyStartDate,
                type: "get",
                cache: false,
                success: function (result) {

                    //planId = result.fkiPlanID
                    $('#tab-1 #txtPolicyPremium').val(result[0]);
                    $('#tab-1 #txtUnderwriter').val(result[1]);
                    $('#PolicyUpdatePopupModel .modal-body #txtUnderwriter').val(result[1]);
                    //$('#hdCoverDate').val(result[2]);
                    //$('#txtDependencyCovertDate').val(result[2]);
                    $('#tab-1 #txtCoverDate').val(result[2]);
                   // $('#tab-1 #txtTotalPremium').val(result[0]);
                    //$("#tab-3 #txtPolicyStartDate").datepicker("hide");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
        }
    }

    function OnStartChangeFillPolicy(policyId, policyStartDate) {

        var bindPolicyCoverDateUrl = $("#BindPolicyCoverDateUrl").val();

        if (policyId != '' && policyStartDate != undefined) {
            $.ajax({
                url: bindPolicyCoverDateUrl + "?id=" + policyId + "&date=" + policyStartDate,
                type: "get",
                cache: false,
                success: function (result) {

                    $('#tab-3 #txtPolicyPremium').val(result[0]);
                    $('#tab-3 #txtUnderwriter').val(result[1]);
                    $('#hdCoverDate').val(result[2]);
                    $('#txtDependencyCovertDate').val(result[2]);
                    $('#tab-3 #txtCoverDate').val(result[2]);
                    //$('#tab-3 #txtTotalPremium').val(result[0]);
                    $('#txtUnderwriter').val(result[1])
                    //$("#tab-3 #txtPolicyStartDate").datepicker("hide");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
        }
    }

    function OnStartChangeFillDependentFamilyDetails(policyId, policyStartDate) {
        var bindPolicyCoverDateUrl = $("#BindPolicyCoverDateUrl").val();

        if (policyId != '' && policyStartDate != undefined) {
            $.ajax({
                url: bindPolicyCoverDateUrl + "?id=" + policyId + "&date=" + policyStartDate,
                type: "get",
                cache: false,
                success: function (result) {
                    $('#tab-5 #txtDependentPremium').val(result[0]|0);
                    $('#tab-5 #txtDependentCoverDate').val(result[2]);
                    $('#tab-5 #txtDependentPremium').val(result[0]|0);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
        }
    }
    //#endregion Jeenal Changes End

    function DeleteDocument(data) {
        var deleteConfirm = confirm('Are you sure you want to delete it?');
        if (deleteConfirm) {
            var DeleteDocumentURl = $("#DeleteDocuments").val();
            jQuery.ajax({
                url: DeleteDocumentURl + "?pkiPictureID=" + data.pkiPictureID,
                type: "Get",
                contentType: "application/html; charset=utf-8",
                dataType: 'html'
            })
                .success(function (result) {
                    documentDatatable.fnDraw();
                    alert("Document Deleted Successfully!!");
                })
                .error(function (xhr, status) {
                    alert(status);
                });
        }
    }

    function displayDocumentUploadValidationErrors(errors) {
        var $ul = $('#AddUpdateDocumentValidationSummary > ul');
        $ul.empty();
        if (errors != undefined && errors.length > 0) {
            $.each(errors, function (idx, errorMessage) {
                $ul.append('<li>' + errorMessage + '</li>');
            });
        }
    }

    function IdNumberBasicValidation(IdNumber) {
        if (IdNumber.value.length != 0 && IdNumber.value.length != 6 && IdNumber.value.length != 13) {
        alert("Id Number is not valid");
            IdNumber.value = "";
        }
    }

    function DateComparisionJavascriptFun() {
        var idNumber = $("#txtIdNumber").val();
        var textLength = idNumber.length;
        if (textLength == 13 || textLength == 6) {
            Validate();
        }
    }

    function DateComparisionJavascriptPopup(){
        var idNumber = $("#txtIdNumberPopup").val();
        var textLength = idNumber.length;
        if (textLength == 13 || textLength == 6) {
            ValidatePopup();
        }
    }

    function DependentExtendedIDNumberChanges() {
        var idNumber = $("#tab-5 #txtDependentIdNumber").val();
        var textLength = idNumber.length;
        if (textLength == 13 || textLength == 6) {
            ValidateDependentID();
        }
    }

    Date.prototype.monthNames = [
                "January", "February", "March",
                "April", "May", "June",
                "July", "August", "September",
                "October", "November", "December"
    ];

    Date.prototype.getMonthName = function () {
        return this.monthNames[this.getMonth()];
    };

    Date.prototype.getShortMonthName = function () {
        return this.getMonthName().substr(0, 3);
    };

    function Validate() {
        var idNumber = $("#txtIdNumber").val();
        // assume everything is correct and if it later turns out not to be, just set this to false
        var correct = true;

        //Ref: http://www.sadev.co.za/content/what-south-african-id-number-made
        // SA ID Number have to be 13 digits, so check the length
        if (idNumber.length != 13 || !isNumber(idNumber)) {
            if (idNumber.length != 6) {
                correct = false;
            }
        }

        // get first 6 digits as a valid date

        var tempDate = new Date(idNumber.substring(0, 2), idNumber.substring(2, 4) - 1, idNumber.substring(4, 6));
        var id_date = tempDate.getDate();
        var id_month = tempDate.getMonth();
        var dMonth = id_month + 1;
        var dMonthName = tempDate.getMonthName();
        //var id_year = tempDate.getFullYear();
        var id_year = idNumber.substring(0, 2);

        var cutoff = (new Date()).getFullYear() - 2000;
        var fullDate = id_date + " " + dMonthName + " " + (id_year > cutoff ? '19' : '20') + id_year;
        //var fullDate = id_date + " " + dMonthName + " " + id_year;
        if (!((tempDate.getYear() == idNumber.substring(0, 2)) && (id_month == idNumber.substring(2, 4) - 1) && (id_date == idNumber.substring(4, 6)))) {
            correct = false;
        }

        if (idNumber.length == 13) {
            // get country ID for citzenship
            var citzenship = parseInt(idNumber.substring(10, 11)) == 0 ? "Yes" : "No";

            // apply Luhn formula for check-digits
            var tempTotal = 0;
            var checkSum = 0;
            var multiplier = 1;
            for (var i = 0; i < 13; ++i) {
                tempTotal = parseInt(idNumber.charAt(i)) * multiplier;
                if (tempTotal > 9) {
                    tempTotal = parseInt(tempTotal.toString().charAt(0)) + parseInt(tempTotal.toString().charAt(1));
                }
                checkSum = checkSum + tempTotal;
                multiplier = (multiplier % 2 == 0) ? 1 : 2;
            }
            if ((checkSum % 10) != 0) {
                //    error.append('<p>ID number does not appear to be authentic - check digit is not valid</p>');
                correct = false;
            };
        }


        // if no error found, hide the error message
        if (correct) {
            $("#txtBirthDay").val(fullDate);
            $("#txtBirthDay").val(fullDate).datepicker('update');

            if (idNumber.length)
            var genderCode = idNumber.substring(6, 10);
            var gender = parseInt(genderCode) < 5000 ? "Female" : "Male";

            if (gender == "Female") {
                $("#tab-1 input[name=gender][value=1]").prop('checked', true);
            } else {
                $("#tab-1 input[name=gender][value=0]").prop('checked', true);
            } 
            CalculateAge(fullDate);
        }
        else {
            if (idNumber.length == 13) {
                alert("Id Number invalid");
                $("#txtIdNumber").val("")
                $("#txtBirthDay").val("");
                $("#tab-1 #txtAge").val("");
            }
        }
        return false;
    }

    //#region Jeenal Changes
    function ValidateDependentExtendedIDNumber() {
        var idNumber = $("#tab-5 #txtDependentIdNumber").val();
        // assume everything is correct and if it later turns out not to be, just set this to false
        var correct = true;

        //Ref: http://www.sadev.co.za/content/what-south-african-id-number-made
        // SA ID Number have to be 13 digits, so check the length
        //if (idNumber.length != 13 || !isNumber(idNumber)) {
        //    correct = false;
        //}

        // get first 6 digits as a valid date

        var tempDate = new Date(idNumber.substring(0, 2), idNumber.substring(2, 4) - 1, idNumber.substring(4, 6));
        var id_date = tempDate.getDate();
        var id_month = tempDate.getMonth();
        var dMonth = id_month + 1;
        var dMonthName = tempDate.getMonthName();
        var id_year = idNumber.substring(0, 2);
        var cutoff = (new Date()).getFullYear() - 2000;

        var fullDate = id_date + " " + dMonthName + " " + (id_year > cutoff ? '19' : '20') + id_year;
        if (!((tempDate.getYear() == idNumber.substring(0, 2)) && (id_month == idNumber.substring(2, 4) - 1) && (id_date == idNumber.substring(4, 6)))) {
            correct = false;
        }

        // get country ID for citzenship
        var citzenship = parseInt(idNumber.substring(10, 11)) == 0 ? "Yes" : "No";

        // apply Luhn formula for check-digits
        var tempTotal = 0;
        var checkSum = 0;
        var multiplier = 1;
        for (var i = 0; i < 13; ++i) {
            tempTotal = parseInt(idNumber.charAt(i)) * multiplier;
            if (tempTotal > 9) {
                tempTotal = parseInt(tempTotal.toString().charAt(0)) + parseInt(tempTotal.toString().charAt(1));
            }
            checkSum = checkSum + tempTotal;
            multiplier = (multiplier % 2 == 0) ? 1 : 2;
        }
        if ((checkSum % 10) != 0) {
            //    error.append('<p>ID number does not appear to be authentic - check digit is not valid</p>');
            correct = false;
        };


        // if no error found, hide the error message
        if (correct) {
            $("#tab-5 #txtDependentDateOfBirth").val(fullDate);
            $("#tab-5 #txtDependentDateOfBirth").val(fullDate).datepicker('update');

            var genderCode = idNumber.substring(6, 10);
            var gender = parseInt(genderCode) < 5000 ? "female" : "male";

            if (gender == "female") {
                $("#female").prop('checked', true);
            } else {
                $("#male").prop('checked', true);
            }
            CalculateDependentExtendedAge(fullDate);
        }
        else {
            if (idNumber != "") {
                alert("Id Number invalid");
                $("#tab-5 #txtDependentIdNumber").val("");
                $("#tab-5 #txtDependentDateOfBirth").val("");
                $("#tab-5 #txtDependentAge").val("");
            }
        }
        return false;
    }
    //#endregion Jeenal Changes End

    function ValidateDependentID() {
        var idNumber = $("#tab-5 #txtDependentIdNumber").val();
        // assume everything is correct and if it later turns out not to be, just set this to false
        var correct = true;

        //Ref: http://www.sadev.co.za/content/what-south-african-id-number-made
        // SA ID Number have to be 13 digits, so check the length
        if (idNumber.length != 13 || !isNumber(idNumber)) {
            if (idNumber.length != 6) {
                correct = false;
            }
        }

        // get first 6 digits as a valid date

        var tempDate = new Date(idNumber.substring(0, 2), idNumber.substring(2, 4) - 1, idNumber.substring(4, 6));
        var id_date = tempDate.getDate();
        var id_month = tempDate.getMonth();
        var dMonth = id_month + 1;
        var dMonthName = tempDate.getMonthName();
        //var id_year = tempDate.getFullYear();
        var id_year = idNumber.substring(0, 2);

        var cutoff = (new Date()).getFullYear() - 2000;
        var fullDate = id_date + " " + dMonthName + " " + (id_year > cutoff ? '19' : '20') + id_year;
        //var fullDate = id_date + " " + dMonthName + " " + id_year;
        if (!((tempDate.getYear() == idNumber.substring(0, 2)) && (id_month == idNumber.substring(2, 4) - 1) && (id_date == idNumber.substring(4, 6)))) {
            correct = false;
        }

        if (idNumber.length == 13) {
            // get country ID for citzenship
            var citzenship = parseInt(idNumber.substring(10, 11)) == 0 ? "Yes" : "No";

            // apply Luhn formula for check-digits
            var tempTotal = 0;
            var checkSum = 0;
            var multiplier = 1;
            for (var i = 0; i < 13; ++i) {
                tempTotal = parseInt(idNumber.charAt(i)) * multiplier;
                if (tempTotal > 9) {
                    tempTotal = parseInt(tempTotal.toString().charAt(0)) + parseInt(tempTotal.toString().charAt(1));
                }
                checkSum = checkSum + tempTotal;
                multiplier = (multiplier % 2 == 0) ? 1 : 2;
            }
            if ((checkSum % 10) != 0) {
                //    error.append('<p>ID number does not appear to be authentic - check digit is not valid</p>');
                correct = false;
            };
        }


        // if no error found, hide the error message
        if (correct) {
            $("#tab-5 #txtDependentDateOfBirth").val(fullDate);
            $("#tab-5 #txtDependentDateOfBirth").val(fullDate).datepicker('update');

            var genderCode = idNumber.substring(6, 10);
            var gender = parseInt(genderCode) < 5000 ? "female" : "male";

            if (gender == "female") {
                $("#female").prop('checked', true);
            } else {
                $("#male").prop('checked', true);
            }
            CalculateDependentExtendedAge(fullDate);
        }
        else {
            if (idNumber.length == 13) {
                alert("Id Number invalid");
                $("#tab-5 #txtDependentIdNumber").val("");
                $("#tab-5 #txtDependentDateOfBirth").val("");
                $("#tab-5 #txtDependentAge").val("");
            }
        }
        return false;
    }

    function ValidatePopup() {
        var idNumber = $("#txtIdNumberPopup").val();
        // assume everything is correct and if it later turns out not to be, just set this to false
        var correct = true;

        //Ref: http://www.sadev.co.za/content/what-south-african-id-number-made
        // SA ID Number have to be 13 digits, so check the length
        if (!idNumber.length == 13 || !isNumber(idNumber)) {
            if (!idNumber.length == 6) {
                correct = false;
            }
        }

        // get first 6 digits as a valid date

        var tempDate = new Date(idNumber.substring(0, 2), idNumber.substring(2, 4) - 1, idNumber.substring(4, 6));
        var id_date = tempDate.getDate();
        var id_month = tempDate.getMonth();
        var dMonth = id_month + 1;
        var dMonthName = tempDate.getMonthName();
        var id_year = tempDate.getFullYear();

        var fullDate = id_date + " " + dMonthName + " " + id_year;
        if (!((tempDate.getYear() == idNumber.substring(0, 2)) && (id_month == idNumber.substring(2, 4) - 1) && (id_date == idNumber.substring(4, 6)))) {
            correct = false;
        }
        if (idNumber.length == 13){
            // get country ID for citzenship
            var citzenship = parseInt(idNumber.substring(10, 11)) == 0 ? "Yes" : "No";

            // apply Luhn formula for check-digits
            var tempTotal = 0;
            var checkSum = 0;
            var multiplier = 1;
            for (var i = 0; i < 13; ++i) {
                tempTotal = parseInt(idNumber.charAt(i)) * multiplier;
                if (tempTotal > 9) {
                    tempTotal = parseInt(tempTotal.toString().charAt(0)) + parseInt(tempTotal.toString().charAt(1));
                }
                checkSum = checkSum + tempTotal;
                multiplier = (multiplier % 2 == 0) ? 1 : 2;
            }
            if ((checkSum % 10) != 0) {
                //    error.append('<p>ID number does not appear to be authentic - check digit is not valid</p>');
                correct = false;
            };


            // if no error found, hide the error message
            if (correct) {
                $("#txtDateOfBirthPopup").val(fullDate);
                $("#txtDateOfBirthPopup").val(fullDate).datepicker('update');

                var genderCode = idNumber.substring(6, 10);
                var gender = parseInt(genderCode) < 5000 ? "Female" : "Male";

                if (gender == "Female") {
                    $("input[name=genderPopup][value=female]").prop('checked', true)

                } else {
                    $("input[name=genderPopup][value=male]").prop('checked', true)
                }
                CalculateAgePopup(fullDate);
            }

            else {
                if (idNumber.length == 13) {
                    alert("Id Number invalid");
                    $("#txtIdNumberPopup").val("");
                    $("#txtDateOfBirthPopup").val("");
                    $("#txtAgePopup").val("");
                }
                return false;
            }
        }
        return false;
    }

    function CalculateAge(fullDate) {
        var mdate = dateFormat(fullDate, 'mm-dd-yyyy', false)
        var yearThen = parseInt(mdate.substring(6, 10), 10);
        var monthThen = parseInt(mdate.substring(0, 2), 10);
        var dayThen = parseInt(mdate.substring(3, 5), 10);

        var today = new Date();
        var birthday = new Date(yearThen, monthThen - 1, dayThen);

        var differenceInMilisecond = today.valueOf() - birthday.valueOf();

        var year_age = Math.floor(differenceInMilisecond / 31536000000);
        if (isNaN(year_age)) {
            alert("Invalid birthday - Please try again!");
        }
        else {
            $("#tab-1 #txtAge").val(year_age);
        }
    }

    function CalculateAgePopup(fullDate) {
        var mdate = dateFormat(fullDate, 'mm-dd-yyyy', false)
        var yearThen = parseInt(mdate.substring(6, 10), 10);
        var monthThen = parseInt(mdate.substring(0, 2), 10);
        var dayThen = parseInt(mdate.substring(3, 5), 10);

        var today = new Date();
        var birthday = new Date(yearThen, monthThen - 1, dayThen);

        var differenceInMilisecond = today.valueOf() - birthday.valueOf();

        var year_age = Math.floor(differenceInMilisecond / 31536000000);
        if (isNaN(year_age)) {
            alert("Invalid birthday - Please try again!");
        }
        else {
            $("#txtAgePopup").val(year_age);
        }
    }

    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    $("#btnCopy").click(function(){
        var btnCopyPolicyURl = $("#btnCopyPolicyUrl").val();
        var data = {
            PKiD : $("#pkiMemberID").val()
        };

        $.ajax({
            url: btnCopyPolicyURl,
            data: data,
            type: "post",
            cache: false,
            success: function (result) {
                if(result > 0){
                    $("#lblMessage").html('');
                    $("#lblMessage").append('<div class="alert alert-success">Record Copy successfully</div>')
                }else{
                    $("#lblMessage").html('');
                    $("#lblMessage").append('<div class="alert alert-success">Record Copy UnSuccessfully</div>')
                }

                var txtPremiume = $("#tab-3 #txtPolicyPremium").val();
                jQuery("#TaskCopyPopupModel").modal({
                    show: 'true'
                });
                $("#popupTxtPremium").val(txtPremiume);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert(thrownError);
            }
        })
    })

    //$("#PolicyDoc").click(function(){
    //    var btnPolicyDocUrl = $("#btnPolicyDocUrl").val();
    //    var data = {
    //        PKiD : $("#pkiMemberID").val()
    //    };

    //    $.ajax({
    //        url: btnPolicyDocUrl,
    //        data: data,
    //        type: "post",
    //        cache: false,
    //        success: function (result) {
    //            if(result != "true")
    //            {
    //                $("#lblMessage").html('');
    //                $("#lblMessage").append('<div class="alert alert-success">Download Successful</div>');
    //            }

    //            jQuery("#TaskCopyPopupModel").modal({
    //                show: 'true'
    //            });
    //        },
    //        error: function (xhr, ajaxOptions, thrownError) {
    //            alert(thrownError);
    //        }
    //    })
    //})

    $("#btnPremiumSubmit").click(function(){
        jQuery("#TaskCopyPopupModel").modal('toggle');
        var premium = $("#popupTxtPremium").val();
        jQuery("#DependencyCopiedPolicyPopupModel").modal({
            show: 'true'
        });
        $("#txtPremiumPopup").val(premium);

    })


    $("#btnDependencyCopiedPolicy").click(function(){
        var lastNamePop = $("#txtLastnamePopup").val();
        var firstNamePop = $("#txtFirstnamePopup").val();
        var birthDatePop = $("#txtDateOfBirthPopup").val();
        var startDatePop = $("#txtStartDatePopup").val();
        var premiumPop = $("#txtPremiumPopup").val();
        var inceptionDatePop = $("#txtInceptionDatePopup").val();
        var allFlagPop = true;
        var lastNameFlagPop = true;
        var firstNameFlagPop = true;
        var birthDateFlagPop = true;
        var startDateFlagPop = true;
        var premiumFlagPop = true;
        var inceptionDateFlagPop = true;
        if(lastNamePop == "" && firstNamePop == "" && birthDatePop == "" && startDatePop == "" && premiumPop == "" && inceptionDatePop == "")
        {
            $("#ValidationSummary3").hide();
            $("#ValidationSummary3").html('');
            $("#ValidationSummary3").show();
            $("#ValidationSummary3").append('<li id="txtLastNameIdPop">Please enter dependency Surname.</li>');
            $("#ValidationSummary3").append('<li id="txtFirstNameIdPop">Please enter dependency Full name.</li>');
            $("#ValidationSummary3").append('<li id="txtBirthDateIdPop">Please enter date of birth.</li>');
            $("#ValidationSummary3").append('<li id="txtStartDateIdPop">Please enter Start date.</li>');
            $("#ValidationSummary3").append('<li id="txtPremiumIdPop">Please enter premium.</li>');
            $("#ValidationSummary3").append('<li id="txtInceptionDatePop">Please enter inception date.</li>');
            allFlagPop = false;
        }else{

            if(lastNamePop != ""){
                var regex = new RegExp("^[a-zA-Z]+$");
                if (regex.test(lastNamePop)) {
                    $("li#txtLastNameIdPop").hide();
                    $("li#txtLastNameIdPop").html('');
                    $("li#EnterLastNameIdPop").hide();
                    $("li#EnterLastNameIdPop").html('');
                    lastNameFlagPop = true;
                }
                else
                {
                    $("li#txtLastNameIdPop").hide();
                    $("li#txtLastNameIdPop").html('');
                    $("li#EnterLastNameIdPop").hide();
                    $("li#EnterLastNameIdPop").html('');
                    $("#ValidationSummary3").show();
                    $("#ValidationSummary3").append('<li id="EnterLastNameIdPop">Surname Enter Only characters.</li>');
                    lastNameFlagPop = false;
                }
            }else{
                $("li#txtLastNameIdPop").hide();
                $("li#txtLastNameIdPop").html('');
                $("li#EnterLastNameIdPop").hide();
                $("li#EnterLastNameIdPop").html('');
                $("#ValidationSummary3").show();
                $("#ValidationSummary3").append('<li id="EnterLastNameIdPop">Please enter dependency Surname.</li>');
                lastNameFlagPop = false;
            }


            if(firstNamePop != ""){
                var regex = new RegExp("^[a-zA-Z]+$");
                if (regex.test(firstNamePop)) {
                    $("li#txtFirstNameIdPop").hide();
                    $("li#txtFirstNameIdPop").html('');
                    $("li#EnterFirstNameIdPop").hide();
                    $("li#EnterFirstNameIdPop").html('');
                    firstNameFlagPop = true;
                }
                else
                {
                    $("li#txtFirstNameIdPop").hide();
                    $("li#txtFirstNameIdPop").html('');
                    $("li#EnterFirstNameIdPop").hide();
                    $("li#EnterFirstNameIdPop").html('');
                    $("#ValidationSummary3").show();
                    $("#ValidationSummary3").append('<li id="txtFirstNameIdPop">Full name Enter Only Characters.</li>');
                    firstNameFlagPop = false;
                }
            }else{
                $("li#txtFirstNameIdPop").hide();
                $("li#txtFirstNameIdPop").html('');
                $("li#EnterFirstNameIdPop").hide();
                $("li#EnterFirstNameIdPop").html('');
                $("#ValidationSummary3").show();
                $("#ValidationSummary3").append('<li id="EnterFirstNameIdPop">Please enter dependency Full name.</li>');
                firstNameFlagPop = false;
            }

            if(birthDatePop != ""){
                $("li#txtBirthDateIdPop").hide();
                $("li#txtBirthDateIdPop").html('');
                $("li#EnterBirthDateIdPop").hide();
                $("li#EnterBirthDateIdPop").html('');
                birthDateFlagPop = true;
            }else{
                $("li#txtBirthDateIdPop").hide();
                $("li#txtBirthDateIdPop").html('');
                $("li#EnterBirthDateIdPop").hide();
                $("li#EnterBirthDateIdPop").html('');
                $("#ValidationSummary3").show();
                $("#ValidationSummary3").append('<li id="EnterBirthDateIdPop">Please enter date of birth.</li>');
                birthDateFlagPop = false;
            }

            if(inceptionDatePop != ""){
                $("li#txtInceptionDatePop").hide();
                $("li#txtInceptionDatePop").html('');
                $("li#EnterInceptionDateIdPop").hide();
                $("li#EnterInceptionDateIdPop").html('');
                inceptionDateFlagPop = true;
            }else{
                $("li#txtInceptionDatePop").hide();
                $("li#txtInceptionDatePop").html('');
                $("li#EnterInceptionDateIdPop").hide();
                $("li#EnterInceptionDateIdPop").html('');
                $("#ValidationSummary3").show();
                $("#ValidationSummary3").append('<li id="EnterInceptionDateIdPop">Please enter inception date.</li>');
                inceptionDateFlagPop = false;
            }

            if(startDatePop != ""){
                $("li#txtStartDateIdPop").hide();
                $("li#txtStartDateIdPop").html('');
                $("li#EnterStartDateIdPop").hide();
                $("li#EnterStartDateIdPop").html('');
                startDateFlagPop = true;
            }else{
                $("li#txtStartDateIdPop").hide();
                $("li#txtStartDateIdPop").html('');
                $("li#EnterStartDateIdPop").hide();
                $("li#EnterStartDateIdPop").html('');
                $("#ValidationSummary3").show();
                $("#ValidationSummary3").append('<li id="EnterStartDateIdPop">Please enter Start date.</li>');
                startDateFlagPop = false;
            }

            if(premiumPop != ""){
                $("li#txtPremiumIdPop").hide();
                $("li#txtPremiumIdPop").html('');
                $("li#EnterPremiumIdPop").hide();
                $("li#EnterPremiumIdPop").html('');
                premiumFlagPop = true;
            }else{
                $("li#txtPremiumIdPop").hide();
                $("li#txtPremiumIdPop").html('');
                $("li#EnterPremiumIdPop").hide();
                $("li#EnterPremiumIdPop").html('');
                $("#ValidationSummary3").show();
                $("#ValidationSummary3").append('<li id="EnterPremiumIdPop">Please enter premium.</li>');
                premiumFlagPop = false;
            }
        }

        if(allFlagPop == false || lastNameFlagPop == false || firstNameFlagPop == false || birthDateFlagPop == false || startDateFlagPop == false || premiumFlagPop == false || inceptionDateFlagPop == false)
        {
            return false;
        }else{

            var DependentForDuplicatePolicyUrl = $("#DependentForDuplicatePolicyUrl").val();
            var dependency = {
                Surname: $("#txtLastnamePopup").val(),
                FullName: $("#txtFirstnamePopup").val(),
                IDNumber: $("#txtIdNumberPopup").val(),
                DateOfBirth: dateFormat($("#txtDateOfBirthPopup").val(), 'dd-mm-yyyy', false),
                Age: $("#txtAgePopup").val(),
                Gender: $("#txtIdNumberPopup input[name='genderPopup']:checked").val(),
                StartDate: dateFormat($("#txtStartDatePopup").val(), 'dd-mm-yyyy', false),
                InceptionDate: dateFormat($("#txtInceptionDatePopup").val(), 'dd-mm-yyyy', false),
                CoverDate: dateFormat($("#txtCoverDatePopup").val(), 'dd-mm-yyyy', false),
                DependencyType: $("#ddlDependencyTypePopup :selected").text(),
                Premium: parseInt($("#txtPremiumPopup").val()).toFixed(2),
                pkiDependentID: 0,
                MemberId: $("#pkiMemberID").val(),
                Relationship: 0,
                Cover:0
            };

            $.ajax({
                url: DependentForDuplicatePolicyUrl,
                data: dependency,
                type: "post",
                cache: false,
                success: function (result) {
                    if(result.pkiDependentID == 0)
                    {
                        $("#lblMessage").html('');
                        $("#lblMessage").append('<div class="alert alert-success">Dependents For a Copiedpolicy saved successfully.</div>')
                        jQuery("#DependencyCopiedPolicyPopupModel").modal('toggle');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            })
            return true;
        }

    })
    $('#ddlSelectCompany').change(function () {
        var memberId = $("#pkiMemberID").val();
        memberId = memberId == null && memberId == "" ? 0 : memberId;
        jQuery.ajax({
            url: '@Url.Action("ManageMembers", "Members", null, Request.Url.Scheme)',
            data: { pkiMemberID: memberId, parlourId: $(this).val() },
            type: "post",
            cache: false,
            success: function (result) {

            }
        });
        //location.reload();
        BindGroupDropdown($('#ddlSelectCompany').val());
        BindPlanDropdown($('#ddlSelectCompany').val());
        BindBranchDropdown($('#ddlSelectCompany').val());
    });
    $("#txtStartDatePopup").change(function () {
        var DependencyStartdateChangeUrl = $("#DependencyStartdateChangeUrl").val();
        if ($("#txtStartDatePopup").val() != "") {
            var data =
            {
                id: $("#tab-3 #ddlPolicy").val(),
                date: $("#txtStartDatePopup").val()
            }

            if ($("#tab-3 #ddlPolicy").val() != "") {
                $.ajax({
                    url: DependencyStartdateChangeUrl,
                    data: data,
                    type: "Get",
                    cache: false,
                    success: function (result) {
                        $("#txtCoverDatePopup").val(result);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(thrownError);
                    }
                })
            }

        }


    });

    function gototab(reload) {
        window.location.hash = '#tab-3';
        window.location.reload(true);
    }

    //$("#txtStreetPostalAddress").on('keyup', function () {
    //    $("#txtStreetAddress").val($(this).val())
    //});


    function BindGroupDropdown(ParlourId) {
        var ddlCustomers = jQuery("#tab-1 #ddlMemberSociety");
        ddlCustomers.empty().append('<option selected="selected" value="0" disabled = "disabled">Please select.....</option>');
        jQuery.ajax({
            url: '@Url.Action("BindGroupByCompanyId","Members")',
            data: { CompanyId: ParlourId },
            type: "post",
            success: function (response) {
                ddlCustomers.empty().append('<option selected="selected" value="0">Please select</option>');
                jQuery.each(response, function () {
                    ddlCustomers.append($("<option></option>").val(this['Value']).html(this['Text']));
                });
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }

    function BindPlanDropdown(ParlourId) {
        var ddlCustomers = jQuery("#tab-3 #ddlPolicy");
        ddlCustomers.empty().append('<option selected="selected" value="0" disabled = "disabled">Please select.....</option>');
        jQuery.ajax({
            url: '@Url.Action("BindPlanByCompanyId","Members")',
            data: { CompanyId: ParlourId },
            type: "post",
            success: function (response) {
                ddlCustomers.empty().append('<option selected="selected" value="0">Please select</option>');
                jQuery.each(response, function () {
                    ddlCustomers.append($("<option></option>").val(this['Value']).html(this['Text']));
                });
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }

            function BindBranchDropdown(ParlourId) {
        var ddlCustomers = jQuery("#tab-3 #ddlMemberBranch");
        ddlCustomers.empty().append('<option selected="selected" value="0" disabled = "disabled">Please select.....</option>');
        jQuery.ajax({
            url: '@Url.Action("BindBranchByCompanyId","Members")',
            data: { CompanyId: ParlourId },
            type: "post",
            success: function (response) {
                ddlCustomers.empty().append('<option selected="selected" value="0">Please select</option>');
                jQuery.each(response, function () {
                    ddlCustomers.append($("<option></option>").val(this['Value']).html(this['Text']));
                });
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }

    //#region Jeenal Changes
    function CalculateDependentExtendedAge(fullDate) {
        var mdate = dateFormat(fullDate, 'mm-dd-yyyy', false)
        var yearThen = parseInt(mdate.substring(6, 10), 10);
        var monthThen = parseInt(mdate.substring(0, 2), 10);
        var dayThen = parseInt(mdate.substring(3, 5), 10);

        var today = new Date();
        var birthday = new Date(yearThen, monthThen - 1, dayThen);

        var differenceInMilisecond = today.valueOf() - birthday.valueOf();

        var year_age = Math.floor(differenceInMilisecond / 31536000000);
        if (isNaN(year_age)) {
            alert("Invalid birthday - Please try again!");
        }
        else {
            $("#tab-5 #txtDependentAge").val(year_age);
        }
    }
    //endregion Jeenal Changes End


    $("#txtFirstname").focusout(function(){
        if($("#txtFirstname").val() != ""){
            $('#tab1NextButton').removeClass('disabled');
        }else{
            $('#tab1NextButton').addClass('disabled');
        }
    })


    var count = 0;
    function isDecimalNumber(evt, c) {
        count = count + 1;
        var charCode = (evt.which) ? evt.which : event.keyCode;
        var dot1 = c.value.indexOf('.');
        var dot2 = c.value.lastIndexOf('.');
        if (count > 25) {
            c.value = "";
            count = 0;
        }
        if (dot1 > 2) {
            c.value = "";
        }
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        else if (charCode == 46 && (dot1 == dot2) && dot1 != -1 && dot2 != -1)
            return false;

        return true;
    }

    $(document).ready(function () {
        $("#CopyValues").on("click", function (e) {
            e.preventDefault();
            var leftside = $("#Physical input[type='text']");
            var rightside = $("#Postal input[type='text']");
            //$("#txtProvince").val()= $("#txtProvince option:selected").text();
            $("#txtProvince_Post").val($("#txtProvince").val())

            for (var i = 0; i < leftside.length; i++) {
                var leftValue = leftside.eq(i).val();
                var rightFieldId = $("#Postal input[type='text']")[i].id;
                $("#" + rightFieldId).val(leftValue);
            }
        });
    });
</script>
