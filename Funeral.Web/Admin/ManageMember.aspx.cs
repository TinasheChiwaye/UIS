using Funeral.BAL;
using Funeral.DAL;
using Funeral.Model;
using Funeral.Web.App_Start;
using Funeral.Web.Common;
using Funeral.Web.FuneralServiceReference;
using Microsoft.Reporting.WebForms;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Funeral.Web.Admin
{
    public partial class ManageMember : AdminBasePage

    {
        private readonly ISiteSettings _siteConfig = new SiteSettings();
        #region Fields
        public int MemberId
        {
            get
            {
                if (ViewState["_memberId"] == null)
                    return 0;
                else
                    return Convert.ToInt32(ViewState["_memberId"]);
            }
            set
            {
                ViewState["_memberId"] = value;
            }
        }
        public string MemburNumber
        {
            get
            {
                if (ViewState["_MemburNumber"] == null)
                    return string.Empty;
                else
                    return ViewState["_MemburNumber"].ToString();
            }
            set
            {
                ViewState["_MemburNumber"] = value;
            }
        }
        public DataTable LocalQoute
        {
            get
            {
                if (Session["LocalQoute"] != null)
                {
                    return Session["LocalQoute"] as DataTable;
                }
                else
                {
                    return null;
                }
            }
            set { Session["LocalQoute"] = value; }
        }
        #endregion

        #region Page PreInit
        protected void Page_PreInit(object sender, EventArgs e)
        {
            this.dbPageId = 3;
        }
        #endregion

        //#region PageInit
        //protected void Page_Init(object sender, EventArgs e)
        //{
        //    this.dbPageId = 3;
        //    SecureUserGroupsModel[] obj = client.EditSecurUserbyID(UserID);
        //    List<int> list = new List<int>();
        //    list.Add(5);
        //    list.Add(4);
        //    list.Add(12);
        //    var result = obj.Where(x => list.Contains(x.fkiSecureGroupID));
        //    if (result.FirstOrDefault() == null)
        //    {
        //        Response.Redirect("~/Admin/403Error.aspx", false);
        //    }
        //}
        //#endregion

        int PkID;
        public static string GetdataPremium;
        #region PageLoad
        protected void Page_Load(object sender, EventArgs e)
        {
            var newData = Request.QueryString["Id"];
            int MemberIdNumber = Convert.ToInt32(newData);

            if (MemberIdNumber == 0)
            {
                btnCopy.Enabled = false;
            }

            hdnId.Value = MemberId.ToString();
            if (!Page.IsPostBack)
            {
                ViewState["ID"] = Convert.ToInt32(Request.QueryString["ID"]);
                PkID = Convert.ToInt32(ViewState["ID"]);
                SecureUserGroupsModel model;
                model = ToolsSetingBAL.GetUserAccessByID(UserID, ParlourId);
                if (model != null)
                    txtInception.Enabled = true;
                else
                {
                    txtInception.Enabled = false;
                }
                BindBank();
                BindBankMemberNumber();
                BindAllAgent();
                BindCountry();
                bindPolicy();
                BindSociety();
                BindBranches();
                BindNotesList();
                AddonProduct();
                bindDependencyType();
                bindRelationshipType();
                BindCustomDetails();
                // BindReportData();
                PolicyDoc.Enabled = false;
                rfvPassport.Enabled = false;
                ApplicationSettingsModel app;
                app = ToolsSetingBAL.GetApplictionByParlourID(ParlourId);
                if (app != null)
                {
                    if (app.IsAutoGeneratedPolicyNo == true) { txtPolicyNo.Enabled = false; rfvPolicyNo.Enabled = false; }
                    else { txtPolicyNo.Enabled = true; }
                }
                LocalQoute = applictionLogo();
                if (Request.QueryString["ID"] != null)
                {
                    PolicyDoc.Enabled = true;
                    BindMemberToUpdate();
                }
                else
                {
                    bindInceptiondate();
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "DisableControl", "$(\"#tab5\").hide();$(\"#tab6\").hide();$(\"#tab7\").hide();$(\"#tab8\").hide();", true);

                }
                //MembersModel objmem = client.GetMemberByID(MemberId, ParlourId); // Commented by Hemant on 9th August 2018 it's meaning less call of function
                //if (objmem == null)
                //{
                //    // btnAdd.Enabled = false;
                //}                
                bindTotalPremium();
                SuperUserRoles();
                LoadUserRights();
                BindMember();
            }
        }
        #endregion

        #region Events
        protected void PolicyDocPrint_Click(object sender, EventArgs e)
        {
            //    ServerReport ap =Convert.ToUInt32(ReportViewer1.LocalReport);
            //ReportPrintDocument rp = new ReportPrintDocument(ReportViewer1.LocalReport);
            //rp.Print(); 
        }
        protected void ddlDependency_SelectedIndexChanged(object sender, EventArgs e)
        {
            bindDependency();
        }
        protected void btnResetTab_Click(object sender, EventArgs e)
        {
            txtStreetPostalAddress.Text = string.Empty;
            txtStreetAddress.Text = string.Empty;
            txtTown.Text = string.Empty;
            txtProvince.Text = string.Empty;
            txtCode.Text = string.Empty;
            //Response.Redirect("Members.aspx");
        }
        protected void IdorPass_chkEvent(object sender, EventArgs e)
        {
            if (chkIdORPass.Checked == true)
            {
                txtPassport.ReadOnly = false;
                txtIdNumber.ReadOnly = true;
                rfvIdnumber.Enabled = false;
                rfvPassport.Enabled = true;
                txtIdNumber.Text = string.Empty;
            }
            if (chkIdORPass.Checked == false)
            {
                txtIdNumber.ReadOnly = false;
                txtPassport.ReadOnly = true;
                txtPassport.Text = string.Empty;
                rfvIdnumber.Enabled = true;
                rfvPassport.Enabled = false;
            }
        }

        #endregion

        #region Methods
        public void LoadUserRights()
        {
            btnSave.Enabled = this.HasCreateRight;
        }
        public void bindInceptiondate()
        {
            txtInception.Text = (System.DateTime.Now).ToString("dd MMM yyyy");
        }
        private void BindBankMemberNumber()
        {
            //Guid ParlourId1 = new Guid("6dcba090-f363-47e6-93f5-6def8f80702e");
            MemburNumber = CommonBAL.GetMemberNumber(ParlourId);
            if (MemburNumber != string.Empty || MemburNumber != "")
            {
                txtPolicyNo.Enabled = false;
                rfvPolicyNo.Enabled = false;
                ltrPolicyNumber.Visible = false;
                //txtPolicyNo.Text = MemburNumber;
            }
            else
            {
                ltrPolicyNumber.Visible = true;
                rfvPolicyNo.Enabled = true;
                txtPolicyNo.Enabled = true;
            }
            //txtEasyToPay.Enabled = false;
        }
        private void ClearDependencyControl()
        {
            ddlDependencyType.SelectedIndex = -1;
            txtDependencyDOB.Text = string.Empty;
            txtDependencyIdNumber.Text = string.Empty;
            txtDependencyFirstName.Text = string.Empty;
            txtDependencyLastName.Text = string.Empty;
            txtDependencyDOB.Text = string.Empty;
            txtDependencyInceptionDate.Text = string.Empty;
            txtDependencyPremium.Text = string.Empty;
            txtDependencyCovertDate.Text = string.Empty;
            //ddlDependencyRelationship.SelectedIndex = -1;
            hfDependentId.Value = string.Empty;

        }

        private void ClearDependencyCopiedPolicyControl()
        {
            txtDependencyCopiedPolicyLastName.Text = string.Empty;
            txtDependencyCopiedPolicyFirstName.Text = string.Empty;
            txtDependencyCopiedPolicyIdNumber.Text = string.Empty;
            txtDependencyCopiedPolicyDOB.Text = string.Empty;
            txtDependencyCopiedPolicyAge.Text = "Will be Calculated From Date Of Birth";
            nbtnDependencyCopiedPolicyMale.Checked = false;
            nbtnDependencyCopiedPolicyFemale.Checked = false;
            txtDependencyCopiedPolicyStartDate.Text = string.Empty;
            txtDependencyCopiedPolicyInceptionDate.Text = string.Empty;
            txtDependencyCopiedPolicyCoverDate.Text = string.Empty;
            ddlCopiedPolicyDependencyType.SelectedIndex = -1;
            txtDependencyCopiedPolicyPremium.Text = string.Empty;

        }
        public void BindAllAgent()
        {
            var agentList = MembersBAL.SelectAllAgent(ParlourId);
            ddlAgent.DataSource = agentList;
            ddlAgent.SelectedValue = null;
            ddlAgent.DataBind();
            ddlAgent.Items.Insert(0, new ListItem("Select Agent", "0"));

            DDe_pagent.DataSource = agentList;
            DDe_pagent.SelectedValue = null;
            DDe_pagent.DataBind();
            DDe_pagent.Items.Insert(0, new ListItem("Select Agent", "0"));

        }
        private void BindBank()
        {
            ddlBank.DataSource = BanksBAL.SelectAll();
            ddlBank.DataBind();
            ddlBank.Items.Insert(0, new ListItem("Select Bank", "0"));

            ddlAccountType.DataSource = BanksBAL.AccountTypeSelectAll();
            ddlAccountType.DataBind();
            ddlAccountType.Items.Insert(0, new ListItem("Select account type", "0"));
        }
        private void BindCountry()
        {
            ddlCitizenship.DataSource = MembersBAL.GetCountry();
            ddlCitizenship.DataBind();
            ddlCitizenship.ClearSelection(); //making sure the previous selection has been cleared
            ddlCitizenship.Items.FindByValue("ZA").Selected = true;
        }
        public DataTable applictionLogo()
        {
            SqlCommand com1 = new SqlCommand();
            com1.CommandType = CommandType.StoredProcedure;
            com1.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString);
            com1.CommandText = "ApplicationSelectByParlourId";
            com1.Parameters.Add(new SqlParameter("@ParlourId", ParlourId));
            SqlDataAdapter adp1 = new SqlDataAdapter(com1);
            DataTable dt1 = new DataTable();
            adp1.Fill(dt1);
            return dt1;
        }

        public DateTime MaxIfEmpty(string strValue)
        {
            if (strValue == "" || strValue == string.Empty)
                return DateTime.MaxValue;
            else
                return Convert.ToDateTime(strValue);
        }
        public void bindPolicy()
        {
            var newData = Request.QueryString["Id"];
            int MemberIdNumber = Convert.ToInt32(newData);
            List<PolicyModel> objPolicyModel = CommonBAL.GetPolicyByParlourId(ParlourId);
            foreach (PolicyModel policy in objPolicyModel)
            {
                ListItem li = new ListItem();
                li.Text = policy.PlanName;
                li.Value = policy.pkiPlanID.ToString();
                ddlPolicy.Items.Add(li);
                DDe_Pname.Items.Add(li);
            }
            bindTotalPremium();
        }

        public void bindDependency()
        {
            List<FamilyDependencyModel> objFamilyDependencyModel = MembersBAL.GetFamilyDependencyByMemberID(ParlourId, MemberId);
            gvFamilyDependency.DataSource = objFamilyDependencyModel;
            gvFamilyDependency.DataBind();

        }
        public void bindTotalPremium()
        {

            int ID = Convert.ToInt32(Request.QueryString["ID"]);
            if (Convert.ToInt32(Request.QueryString["ID"]) == 0)
                ID = Convert.ToInt32(hdnId.Value);
            txtTotalPremium.Text = MembersBAL.SumOfPremium(ID, ParlourId).ToString(Currency.Trim() + " 0.00");
        }
        public void bindInvoices()
        {
            StringBuilder sb = new StringBuilder();
            List<MemberInvoiceModel> objMemberInvoiceModel = MembersBAL.GetInvoicesByMemberID(ParlourId, MemberId);
            gvInvoices.DataSource = objMemberInvoiceModel;
            gvInvoices.DataBind();
        }
        public void bindDependencyType()
        {
            StringBuilder sb = new StringBuilder();
            List<FamilyDependencyTypeModel> objFamilyDependencyModel = MembersBAL.GetAllFamilyDependencyTypes();
            ddlDependencyType.DataTextField = "DepStatus_Code";
            ddlDependencyType.DataValueField = "DepStatus_ID";
            ddlDependencyType.DataSource = objFamilyDependencyModel;
            ddlDependencyType.DataBind();
            ddlDependencyType.Items.Insert(0, new ListItem("Select", "0"));

            ddlCopiedPolicyDependencyType.DataTextField = "DepStatus_Code";
            ddlCopiedPolicyDependencyType.DataValueField = "DepStatus_ID";
            ddlCopiedPolicyDependencyType.DataSource = objFamilyDependencyModel;
            ddlCopiedPolicyDependencyType.DataBind();
            ddlCopiedPolicyDependencyType.Items.Insert(0, new ListItem("Select", "0"));


        }
        public void bindRelationshipType()
        {

            //RelationShipModel[] objRelationShipModel = client.SelectRelationship();
            //ddlDependencyRelationship.DataTextField = "Type";
            //ddlDependencyRelationship.DataValueField = "ID";
            //ddlDependencyRelationship.DataSource = objRelationShipModel;
            //ddlDependencyRelationship.DataBind();
            //ddlDependencyRelationship.Items.Insert(0, new ListItem("Select", "0"));
        }
        public void BindSociety()
        {
            List<SocietyModel> objSocietyModel = CommonBAL.GetSocietyByParlourId(ParlourId);
            foreach (SocietyModel society in objSocietyModel)
            {
                ListItem li = new ListItem();
                li.Text = society.SocietyName;
                li.Value = society.pkiSocietyID.ToString();
                ddlMemberSociety.Items.Add(li);
                DDe_society.Items.Add(li);
            }
        }
        public void BindBranches()
        {
            List<BranchModel> objBranchModel = CommonBAL.BranchByparlourId(ParlourId);
            foreach (BranchModel branch in objBranchModel)
            {
                ListItem li = new ListItem();
                li.Text = branch.BranchName;
                li.Value = branch.BranchName;//branch.Brancheid.ToString();
                ddlBankBranch.Items.Add(li);
                DDe_branch.Items.Add(li);
            }
        }
        public int AgeFromDOB(DateTime bday)
        {
            DateTime today = DateTime.Today;
            int age = today.Year - bday.Year;
            if (bday > today.AddYears(-age))
                age--;
            return age;
        }
        public string FormatDateTime(string date)
        {
            return string.IsNullOrEmpty(date) ? string.Empty : Convert.ToDateTime(date).ToString("dd MMM yyyy");
        }
        public void bindSupportedDocuments()
        {
            List<SupportedDocumentModel> objSupportedDocumentModel = MembersBAL.SelectSupportDocumentsByMemberId(MemberId);
            gvSupportedDocument.DataSource = objSupportedDocumentModel;
            gvSupportedDocument.DataBind();

        }
        private void BindMemberToUpdate()
        {

            MembersModel model = MembersBAL.GetMemberByID(Convert.ToInt32(Request.QueryString["ID"]), ParlourId);

            if ((model == null) || (model.parlourid != ParlourId && model.Administratorparlourid != ParlourId))
            {
                Response.Write("<script>alert('Sorry!you are not authorized to perform edit on this Member.');</script>");
            }
            else
            {
                PolicyModel objPolicyModel = CommonBAL.GetPlanSubscriptionByPlanId(model.fkiPlanID, ParlourId).ToList().FirstOrDefault();
                hdnId.Value = model.pkiMemberID.ToString();
                hdnParlourid.Value = model.parlourid.ToString();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "DisableControl", "EnableTab();", true);
                MemberId = model.pkiMemberID;
                txtFirstname.Text = model.FullNames;
                txtLastName.Text = model.Surname;
                txtIdNumber.Text = model.IDNumber;
                txtBirthDay.Text = FormatDateTime(model.DateOfBirth.ToString());
                if (model.Gender == "Female")
                    rbtnlGender.SelectedIndex = 1;
                else if (model.Gender == "1")
                    rbtnlGender.SelectedIndex = 1;
                else
                    rbtnlGender.SelectedIndex = 0;

                txtCellphone.Text = model.Cellphone;
                txtTelePhone.Text = model.Telephone;
                txtEmail.Text = model.Email;
                txtDebitdate.Text = FormatDateTime(model.DebitDate.ToString());
                txtStreetAddress.Text = model.Address1;
                txtTown.Text = model.Address2;
                txtProvince.Text = model.Address3;
                txtStreetPostalAddress.Text = model.Address4;
                txtCode.Text = model.Code;
                //New Data
                //txtStreetAddress_Post.Text = model.Address1_Post;
                //txtTown_Post.Text = model.Address2_Post;
                //txtProvince_Post.Text = model.Address3_Post;
                //txtStreetPostalAddress_Post.Text = model.Address4_Post;
                //txtCode_Post.Text = model.Code_Post;
                //end
                ddlBankBranch.SelectedValue = model.MemberBranch;

                //ddlAgent.SelectedItem.Text = model.Agent;
                ListItem liAgent = ddlAgent.Items.FindByText(model.Agent);
                if (liAgent != null)
                    liAgent.Selected = true;

                txtAccountholder.Text = model.AccountHolder;

                //txtbank.Text = model.Bank;
                ListItem li = ddlBank.Items.FindByText(model.Bank);
                if (li != null)
                    li.Selected = true;

                txtBranch.Text = model.Branch;
                txtBranchcode.Text = model.BranchCode;
                txtAccountno.Text = model.AccountNumber;

                ListItem liAccount = ddlAccountType.Items.FindByText(model.AccountType);
                if (liAccount != null)
                {
                    liAccount.Selected = true;
                }
                ddlMemberSociety.SelectedValue = model.MemberSociety;
                txtInception.Text = FormatDateTime(model.InceptionDate.ToString());
                hdnDepedencyCoverDate.Value = FormatDateTime(model.CoverDate.ToString());
                txtCoverDate.Text = FormatDateTime(model.CoverDate.ToString());
                txtUnderwriter.Text = CommonBAL.GetPlanUnderwriterByPlanId(model.fkiPlanID);
                txtDebitdate.Text = FormatDateTime(model.DebitDate.ToString());
                ddlPolicy.SelectedIndex = ddlPolicy.Items.IndexOf(ddlPolicy.Items.FindByValue(model.fkiPlanID.ToString()));
                txtPolicyPremium.Text = objPolicyModel != null ? objPolicyModel.PlanSubscription : string.Empty;
                txtPolicyNo.Text = model.MemeberNumber;
                txtEasyToPay.Text = model.EasyPayNo;
                txtAge.Text = AgeFromDOB(Convert.ToDateTime(model.DateOfBirth.ToString())).ToString();
                //txtCitizenship.Text = model.Citizenship;

                ddlCitizenship.ClearSelection(); //making sure the previous selection has been cleared
                try
                {
                    ddlCitizenship.Items.FindByText(model.Citizenship).Selected = true;
                }
                catch { ddlCitizenship.Items.FindByValue("ZA").Selected = true; }

                txtPassport.Text = model.Passport;
                txtPolicyStartDate.Text = FormatDateTime(model.StartDate.ToString());
                //*****************
                txtIdNumber.ReadOnly = true;
                txtPassport.ReadOnly = true;
                rfvIdnumber.Enabled = false;
                rfvPassport.Enabled = false;
                chkIdORPass.Enabled = false;
                //****************
                /* changes for custom field implemented on 10th April 2017*/
                ddlCustom1.SelectedValue = model.CustomId1 != null ? model.CustomId1.ToString() : string.Empty;
                ddlCustom2.SelectedValue = model.CustomId2 != null ? model.CustomId2.ToString() : string.Empty;
                ddlCustom3.SelectedValue = model.CustomId3 != null ? model.CustomId3.ToString() : string.Empty;
                /* changes for custom field implemented on 10th April 2017  completed*/

                BindNotesList();
                bindInvoices();
                bindDependency();
                BindAddonProducts();
                Response.Write("<script>window.onload=function(){FillAjaxdata();}</script>");
                //   BindAddonProducts();
                bindSupportedDocuments();
            }
        }
        public void BindNotesList()
        {
            List<MemberNotesModel> objMemberNotesModel = MembersBAL.GetMemberNoteByMemberID(MemberId);
            gvNotes.DataSource = objMemberNotesModel;
            gvNotes.DataBind();

        }
        public void saveAddproduct(int id)
        {
            MemberAddonProductsModel profile = (MemberAddonProductsModel)Session["Product"];
            if (profile != null)
            {
                profile.fkiMemberid = id;
                int AddonProductID = MembersBAL.SaveAddonProducts(profile);
                Session["Product"] = null;
            }
        }
        public void BindAddonProducts()
        {
            List<MemberAddonProductsModel> objAddonProducts = MembersBAL.SelectMemberAddonProducts(MemberId);
            gvProduct.DataSource = objAddonProducts;
            gvProduct.DataBind();

        }
        private void SelectFamilyDependency(int DependencyId)
        {
            DateTime dt = new DateTime(1900, 01, 01);
            FamilyDependencyModel ObjFamilyDependencyModel = new FamilyDependencyModel();
            ObjFamilyDependencyModel = MembersBAL.SelectFamilyDependencyById(DependencyId);
            ddlDependencyType.ClearSelection();
            ListItem dtype = ddlDependencyType.Items.FindByText(ObjFamilyDependencyModel.DependencyType);
            if (dtype != null)
            {
                dtype.Selected = true;
            }
            string Gender = (ObjFamilyDependencyModel.Gender).ToString();
            if (Gender == "Male") { rdbtnMale.Checked = true; } else if (Gender == "Female") { rdbtnFemale.Checked = true; }
            txtDependencyAge.Text = AgeFromDOB(ObjFamilyDependencyModel.DateOfBirth).ToString();// ObjFamilyDependencyModel.Age.ToString();
            txtDependencyIdNumber.Text = ObjFamilyDependencyModel.IDNumber;
            txtDependencyFirstName.Text = ObjFamilyDependencyModel.FullName;
            txtDependencyLastName.Text = ObjFamilyDependencyModel.Surname;
            txtDependencyDOB.Text = FormatDateTime(ObjFamilyDependencyModel.DateOfBirth.ToString()); //< dt ? string.Empty : ObjFamilyDependencyModel.DateOfBirth.ToShortDateString();
            txtDependencyAge.Text = AgeFromDOB(Convert.ToDateTime(ObjFamilyDependencyModel.DateOfBirth.ToString())).ToString();
            txtDependencyInceptionDate.Text = FormatDateTime(ObjFamilyDependencyModel.InceptionDate.ToString());// < dt ? string.Empty : ObjFamilyDependencyModel.InceptionDate.ToShortDateString();
            txtDependencyPremium.Text = ObjFamilyDependencyModel.Premium.ToString("n2");
            txtDependencyCovertDate.Text = FormatDateTime(ObjFamilyDependencyModel.CoverDate.ToString());// < dt ? string.Empty : ObjFamilyDependencyModel.CoverDate.ToShortDateString();
            //ddlDependencyRelationship.SelectedValue = ObjFamilyDependencyModel.Relationship.ToString();
            hfDependentId.Value = ObjFamilyDependencyModel.pkiDependentID.ToString();
            if (ObjFamilyDependencyModel.StartDate != null) { txtDependencyStartDate.Text = FormatDateTime((ObjFamilyDependencyModel.StartDate).ToString()); }
            btnDependecySubmit.Visible = false;
            btnDependecyUpdate.Visible = true;
        }
        #endregion

        #region WebMethods
        [WebMethod]
        public static List<string> ddlPolicy_SelectedIndexChanged(int id, string date, string parlorId)
        {
            PolicyModel objPolicyModel = CommonBAL.GetPlanSubscriptionByPlanId(id, new Guid(parlorId)).FirstOrDefault();
            List<string> Response = new List<string>();
            try
            {
                GetdataPremium = objPolicyModel.PlanSubscription;

                if (objPolicyModel != null)
                    Response.Add(objPolicyModel.PlanSubscription);
                else
                    Response.Add(string.Empty);
                Response.Add(string.IsNullOrEmpty(CommonBAL.GetPlanUnderwriterByPlanId(id)) ? string.Empty : CommonBAL.GetPlanUnderwriterByPlanId(id));
                //  int WaitingPeriod = client.GetWaitingPeriodByPlanId(id);

                if (objPolicyModel.WaitingPeriod != 0 && objPolicyModel.WaitingPeriod == null)
                {
                    Response.Add(DateTime.Now.AddMonths(CommonBAL.GetWaitingPeriodByPlanId(id)).ToString("dd MMM yyyy"));
                }
                else if (date != "" || date != string.Empty)
                {
                    DateTime PolicystartDate = Convert.ToDateTime(date);
                    Response.Add(PolicystartDate.AddMonths(CommonBAL.GetWaitingPeriodByPlanId(id)).ToString("dd MMM yyyy"));
                }
                //if (objPolicyModel != null)
                //    Response.Add(objPolicyModel.totalPremium);
                //else
                //    Response.Add(string.Empty);
            }
            catch (Exception e) { }

            return Response;
        }
        [WebMethod]
        public static List<string> ddlPolicy_SelectedIndexChanged1(int id, string date)
        {
            PolicyModel objPolicyModel = CommonBAL.GetPlanSubscriptionByPlanIdNewMember(id).ToList().FirstOrDefault();
            List<string> Response = new List<string>();
            try
            {
                if (objPolicyModel != null)
                {
                    GetdataPremium = objPolicyModel.PlanSubscription;
                    Response.Add(objPolicyModel.PlanSubscription);
                }
                else
                    Response.Add(string.Empty);
                Response.Add(string.IsNullOrEmpty(CommonBAL.GetPlanUnderwriterByPlanId(id)) ? string.Empty : CommonBAL.GetPlanUnderwriterByPlanId(id));
                int WaitingPeriod = CommonBAL.GetWaitingPeriodByPlanId(id);

                if (objPolicyModel != null)
                {
                    if (objPolicyModel.WaitingPeriod != 0 && objPolicyModel.WaitingPeriod == null)
                    {
                        Response.Add(DateTime.Now.AddMonths(CommonBAL.GetWaitingPeriodByPlanId(id)).ToString("dd MMM yyyy"));
                    }
                    else if (date != "" || date != string.Empty)
                    {
                        DateTime PolicystartDate = Convert.ToDateTime(date);
                        Response.Add(PolicystartDate.AddMonths(CommonBAL.GetWaitingPeriodByPlanId(id)).ToString("dd MMM yyyy"));
                    }
                }
                if (objPolicyModel != null)
                    Response.Add(objPolicyModel.totalPremium);
                else
                    Response.Add(string.Empty);
            }
            catch (Exception e)
            {
                throw e;
            }

            return Response;
        }
        [WebMethod]
        public static List<string> DependencyStartdateChange(int id, string date)
        {
            List<string> Response = new List<string>();
            if (date != "" || date != string.Empty)
            {
                DateTime PolicystartDate = Convert.ToDateTime(date);
                Response.Add(PolicystartDate.AddMonths(CommonBAL.GetWaitingPeriodByPlanId(id)).ToString("dd MMM yyyy"));
            }
            else
            {
                Response.Add(DateTime.Now.AddMonths(CommonBAL.GetWaitingPeriodByPlanId(id)).ToString("dd MMM yyyy"));
            }
            return Response;

        }

        [WebMethod]
        public static string ddlProductNameChanged(string id)
        {
            Guid strProductName = Guid.Parse(id);
            List<AddonProductsModal> k = MembersBAL.MemberListBindAddonProduct(strProductName);
            string Product = string.Empty;
            if (k.Count != 0)
                Product = "R " + (Math.Round(Convert.ToDecimal(k.FirstOrDefault().ProductCost), 2)).ToString();

            return Product;
        }
        [WebMethod]
        public static string ViewNoteDetails(string id)
        {
            var k = MembersBAL.MemberNotesBypkiNoteIDdt(Convert.ToInt32(id));
            return (FuneralHelper.DataTableMapToList<MemberNotesModel>(k)).FirstOrDefault().Notes.ToString();
        }
        #endregion

        #region Other function and control event
        public void BindReportData()
        {
            LocalReport Rpt = ReportViewer1.LocalReport;
            Rpt.DataSources.Clear();
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString);
            com.CommandText = "MemberSelectList";
            com.Parameters.Add(new SqlParameter("@ID", MemberId));
            com.Parameters.Add(new SqlParameter("@ParlourId", ParlourId));
            SqlDataAdapter adp = new SqlDataAdapter(com);
            DataTable dt = new DataTable();
            adp.Fill(dt);
            SqlCommand com2 = new SqlCommand();
            com2.CommandType = CommandType.StoredProcedure;
            com2.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString);
            com2.CommandText = "GET_Dependent_And_Extended_Family";
            com2.Parameters.Add(new SqlParameter("@MemberId", MemberId));
            com2.Parameters.Add(new SqlParameter("@parlourId", ParlourId));
            SqlDataAdapter adp2 = new SqlDataAdapter(com2);
            DataTable dt2 = new DataTable();
            adp2.Fill(dt2);
            SqlCommand com1 = new SqlCommand();
            com1.CommandType = CommandType.StoredProcedure;
            com1.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString);
            com1.CommandText = "SelectApplicationTnCByParlourId";
            com1.Parameters.Add(new SqlParameter("@ParlourId", ParlourId));
            SqlDataAdapter adp1 = new SqlDataAdapter(com1);
            DataTable dtTnC = new DataTable();
            adp1.Fill(dtTnC);
            SqlCommand com3 = new SqlCommand();
            com3.CommandType = CommandType.StoredProcedure;
            com3.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString);
            com3.CommandText = "BankingSelectById";
            com3.Parameters.Add(new SqlParameter("@ID", ParlourId));
            SqlDataAdapter adp3 = new SqlDataAdapter(com3);
            DataTable BankDT = new DataTable();
            adp3.Fill(BankDT);
            SqlCommand com4 = new SqlCommand();
            com4.CommandType = CommandType.StoredProcedure;
            com4.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString);
            com4.CommandText = "PolicyDocTotalPremium";
            com4.Parameters.Add(new SqlParameter("@ID", MemberId));
            SqlDataAdapter adp4 = new SqlDataAdapter(com4);
            DataTable PoliDocTotPremium = new DataTable();
            adp4.Fill(PoliDocTotPremium);

            ReportViewer1.Visible = true;
            ReportViewer1.LocalReport.EnableExternalImages = true;
            ReportViewer1.LocalReport.ReportPath = "admin/Reports/ReportLayouts/PolicyDocReport.rdlc";
            ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("dsMemberSelectList", dt));
            ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("dsGET_Dependent_And_Extended_Family", dt2));
            ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("DtApplicationSetting", LocalQoute));
            ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("dsTermsAndConditionOfApplication", dtTnC));
            ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("dsBankDetails", BankDT));
            ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("dsPolicyDocTotalPremium", PoliDocTotPremium));

            ReportViewer1.DataBind();


            ReportParameterCollection reportParameters = new ReportParameterCollection();

            reportParameters.Add(new ReportParameter("txtApplicantName", ApplicationName));
            ReportViewer1.LocalReport.SetParameters(reportParameters);
            ReportViewer1.LocalReport.Refresh();

        }
        protected void PolicyDoc_Click(object sender, EventArgs e)
        {

            //BindReportData();
            // ifrm.Attributes.Add("style", "display:inline");
            ///ClientScript.RegisterStartupScript(GetType(), "hwa", "selectFollowUpPopUp(\'Report\');", true);
            ///

            Warning[] warnings;
            string[] streamids;
            string mimeType;
            string encoding;
            //string filenameExtension;
            string filename;

            try
            {
                ReportViewer rpw = new ReportViewer();
                rpw.ProcessingMode = ProcessingMode.Remote;
                IReportServerCredentials irsc = new MyReportServerCredentials();
                rpw.ServerReport.ReportServerCredentials = irsc;

                rpw.ProcessingMode = ProcessingMode.Remote;
                rpw.ServerReport.ReportServerUrl = new Uri(_siteConfig.SSRSUrl);
                rpw.ServerReport.ReportPath = "/" + _siteConfig.SSRSFolderName + "/Policy Doc";
                ReportParameterCollection reportParameters = new ReportParameterCollection();

                reportParameters.Add(new ReportParameter("MemberID", txtPolicyNo.Text));
                reportParameters.Add(new ReportParameter("Parlourid", this.ParlourId.ToString()));
                rpw.ServerReport.SetParameters(reportParameters);
                string ExportTypeExtensions = "pdf";
                byte[] bytes = rpw.ServerReport.Render(ExportTypeExtensions, null, out mimeType, out encoding, out ExportTypeExtensions, out streamids, out warnings);
                filename = string.Format("{0}.{1}", "Policy Doc", ExportTypeExtensions);

                Response.ClearHeaders();
                Response.Clear();
                Response.AddHeader("Content-Disposition", "attachment;filename=" + filename);
                Response.ContentType = mimeType;
                Response.BinaryWrite(bytes);
                Response.Flush();
                Response.End();


            }
            catch (Exception exc)
            {
                ShowMessage(ref lblMessage, MessageType.Danger, exc.Message);
            }
        }

        public void BindReportCopyData()
        {
            PkID = Convert.ToInt32(ViewState["ID"]);
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString);
            com.Connection.Open();
            com.CommandText = "CopyPolicyOfMember";
            com.Parameters.Add(new SqlParameter("@id", PkID));
            com.Parameters.Add(new SqlParameter("@parlourid", ParlourId));

            int SendOpration = Convert.ToInt32(com.ExecuteScalar());
            com.Connection.Close();
            if (SendOpration > 0)
            {
                ShowMessage(ref lblMessage, MessageType.Success, "Record Copy successfully");

            }
            else
            {
                ShowMessage(ref lblMessage, MessageType.Success, "Record Copy UnSuccessfully");
            }

        }
        protected void btnCopy_Click(object sender, EventArgs e)
        {
            BindReportCopyData();
            txtPremiumPolicy.Text = GetdataPremium;
            ClientScript.RegisterStartupScript(GetType(), "hwa", "GetForCopyDataPopUp(\'Report\');", true);

        }
        protected void BtnAddNote_Click(object sender, EventArgs e)
        {
            try
            {
                MemberNotesModel objnotes = new MemberNotesModel();
                objnotes.Notes = txtArea.Text.Trim();
                objnotes.fkiMemberID = MemberId;
                objnotes.NoteDate = DateTime.Now;
                objnotes.ModifiedUser = this.User.Identity.Name;
                int noteID = MembersBAL.NotesSaveMember(objnotes);
                txtArea.Text = string.Empty;
                ShowMessage(ref lblMessage, MessageType.Success, "Notes saved successfully");
                BindNotesList();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab71", "goToTab(7);", true);

            }
            catch (Exception ex)
            {

                ShowMessage(ref lblMessage, MessageType.Danger, "Error in SaveNote: " + ex.Message);
            }
        }

        protected void gridNoteList_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            int pkiNoteID = Convert.ToInt32(e.CommandArgument);
            if (e.CommandName == "EditNote")
            {
                BtnAddNote.Visible = false;
                btnUpdateNotes.Visible = true;
                MemberNotesModel objnotes = new MemberNotesModel();
                DataTable dr = MembersBAL.MemberNotesBypkiNoteIDdt(pkiNoteID);
                if (dr.Rows.Count > 0)
                {
                    txtArea.Text = dr.Rows[0]["Notes"].ToString();
                    hdnNoteId.Value = dr.Rows[0]["pkiNoteID"].ToString();
                    //FKMemberId = Convert.ToInt32(dr["fkiMemberID"]);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab7", "goToTab(7);", true);
                }
            }
            else
            {
                MembersBAL.DeleteMemberNote(Convert.ToInt32(e.CommandArgument));
                BindNotesList();
                ShowMessage(ref lblMessage, MessageType.Success, "Record deleted successfully.");
                lblMessage.Visible = true;
            }
        }

        protected void lnkClose_Click(object sender, EventArgs e)
        {
            Panel2.Visible = false;
            pnlWrapper.Visible = false;
            BindNotesList();
        }

        protected void btnUpdateNotes_Click(object sender, EventArgs e)
        {
            try
            {
                MemberNotesModel objnotes = new MemberNotesModel();
                objnotes.Notes = txtArea.Text.Trim();
                objnotes.fkiMemberID = MemberId;
                objnotes.LastModified = DateTime.Now;
                objnotes.ModifiedUser = this.User.Identity.Name;
                objnotes.pkiNoteID = Convert.ToInt32(hdnNoteId.Value);
                int noteID = MembersBAL.UpdateNotesMember(objnotes);
                // int NoteID=client.SaveMemberNote(o)
                txtArea.Text = string.Empty;
                hdnNoteId.Value = string.Empty;
                BtnAddNote.Visible = true;
                btnUpdateNotes.Visible = false;

                ShowMessage(ref lblMessage, MessageType.Success, "Notes update successfully");
                BindNotesList();
                //Response.Redirect("ManageMember.aspx?ID=" + objnotes.fkiMemberID);
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab7", "goToTab(7);", true);

            }
            catch (Exception ex)
            {

                ShowMessage(ref lblMessage, MessageType.Danger, "Error in UpdateNote:" + ex.Message);
            }
            //  BindNotesList();
        }

        protected void btnAdd_Click(object sender, EventArgs e)
        {
            try
            {
                if (Page.IsValid)
                {
                    MemberAddonProductsModel objProductModel = new MemberAddonProductsModel();

                    objProductModel.DateCreated = DateTime.Now;
                    int index = txtPremium.Text.IndexOf("R ");
                    string cleanPath = (index < 0)
                        ? txtPremium.Text
                        : txtPremium.Text.Remove(index, "R ".Length);
                    objProductModel.ProductCost = Convert.ToDecimal(cleanPath);
                    objProductModel.fkiMemberid = Convert.ToInt32(MemberId);
                    objProductModel.LastModified = DateTime.Now;
                    objProductModel.UserID = Request.LogonUserIdentity.User.ToString();
                    objProductModel.ModifiedUser = this.User.Identity.Name;
                    objProductModel.Deleted = 0;
                    objProductModel.fkiProductID = new Guid(drpProductName.SelectedValue);

                    // objProductModel.UserID = drpUsername.SelectedItem.ToString();
                    //   objProductModel.ProductName = drpProductName.SelectedItem.ToString();
                    objProductModel.parlourid = this.ParlourId;
                    // Guid pkiMemberProductID = Guid.NewGuid();
                    objProductModel.pkiMemberProductID = Guid.NewGuid();
                    if (objProductModel.fkiMemberid != 0)
                    { var AddonProductID = MembersBAL.SaveAddonProducts(objProductModel); }
                    if (objProductModel.fkiMemberid == 0)
                    { Session["Product"] = objProductModel; }
                    //drpProductName.SelectedIndex = 0;
                    txtPremium.Text = string.Empty;
                    //if (AddonProductID > 0)
                    //{

                    //    ShowMessage(ref lblMessage, MessageType.Success, "Addon product add successfully");
                    //    bindTotalPremium();
                    //    BindAddonProducts();
                    //}
                    ShowMessage(ref lblMessage, MessageType.Success, "Addon product add successfully");
                    if (objProductModel.fkiMemberid != 0)
                    {
                        BindAddonProducts();
                        bindTotalPremium();
                    }
                    //Response.Redirect("~/Admin/ManageMember.aspx?tabId=9&ID=" + MemberId.ToString());
                    ShowMessage(ref lblMessage, MessageType.Success, "Addon product add successfully");
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab9", "goToTab(9);", true);
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab91", "goToTab(9);", true);
                }
            }
            catch (Exception ex)
            {

                ShowMessage(ref lblMessage, MessageType.Danger, "Error in add product: " + ex.Message);
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab91", "goToTab(9);", true);
                //lblMessage.Text = "Error in AddProduct:" + ex.Message;
            }
        }

        protected void drpProductName_SelectedIndexChanged(object sender, EventArgs e)
        {
            Guid strProductName = Guid.Parse(drpProductName.SelectedValue);
            var k = MembersBAL.MemberListBindAddonProduct(strProductName);
            txtPremium.Text = Currency.Trim() + " " + k.FirstOrDefault().ProductCost.ToString();

            // SqlDataReader dr = MembersBAL.MemberListBindAddonProduct(strProductName);
        }

        protected void btnUpdateProduct_Click(object sender, EventArgs e)
        {
            try
            {
                if (Page.IsValid)
                {
                    btnAdd.Visible = true;
                    btnUpdateProduct.Visible = false;
                    MemberAddonProductsModel objProductModel = new MemberAddonProductsModel();
                    objProductModel.pkiMemberProductID = Guid.Parse(hdnProductId.Value);
                    int index = txtPremium.Text.IndexOf("R ");
                    string cleanPath = (index < 0)
                        ? txtPremium.Text
                        : txtPremium.Text.Remove(index, "R ".Length);
                    objProductModel.ProductCost = Convert.ToDecimal(cleanPath);
                    objProductModel.LastModified = DateTime.Now;
                    objProductModel.ModifiedUser = this.User.Identity.Name;
                    objProductModel.fkiProductID = new Guid(drpProductName.SelectedValue);
                    int AddonProductID = MembersBAL.AddonProductUpdateMember(objProductModel);
                    BindAddonProducts();
                    txtPremium.Text = string.Empty;
                    hdnProductId.Value = string.Empty;
                    drpProductName.SelectedIndex = -1;
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab91", "goToTab(9);", true);
                    ShowMessage(ref lblMessage, MessageType.Success, "Product updated successfully.");
                    bindTotalPremium();
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab91", "goToTab(9);", true);
                }
            }
            catch (Exception ex)
            {

                ShowMessage(ref lblMessage, MessageType.Danger, "Error in add product: " + ex.Message);
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab91", "goToTab(9);", true);
            }
        }


        protected void gvProduct_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "EditProduct")
            {

                btnAdd.Visible = false;
                btnUpdateProduct.Visible = true;
                Guid id = Guid.Parse(e.CommandArgument.ToString());
                var k = MembersBAL.SelectMembarAddonProductBypkiMemberProductID(id).FirstOrDefault();
                //ListItem li = drpProductName.Items.FindByValue(k.fkiProductID.ToString());
                //if (li != null)
                //    li.Selected = true;
                drpProductName.SelectedValue = k.fkiProductID.ToString();
                txtPremium.Text = Convert.ToDecimal(k.ProductCost).ToString();
                hdnProductId.Value = k.pkiMemberProductID.ToString();
            }
            else if (e.CommandName == "DeleteProduct")
            {
                Guid pkProductId = Guid.Parse(e.CommandArgument.ToString());
                MembersBAL.MemberAddonProductsRemove(pkProductId);
                BindAddonProducts();
                ShowMessage(ref lblMessage, MessageType.Success, "Product deleted successfully");
                bindTotalPremium();
            }
            ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab95", "goToTab(9);", true);
        }


        #region SupportDocument
        protected void BtnDocumentSubmit_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                if (fuSupportDocument.HasFile)
                {
                    string filename = Path.GetFileName(fuSupportDocument.PostedFile.FileName);
                    string contentType = fuSupportDocument.PostedFile.ContentType;
                    using (Stream fs = fuSupportDocument.PostedFile.InputStream)
                    {
                        using (BinaryReader br = new BinaryReader(fs))
                        {
                            byte[] bytes = br.ReadBytes((Int32)fs.Length);
                            SupportedDocumentModel ObjSupportedDocumentModel = new SupportedDocumentModel();
                            ObjSupportedDocumentModel.DocContentType = contentType;
                            ObjSupportedDocumentModel.ImageName = filename;
                            ObjSupportedDocumentModel.ImageFile = bytes;
                            ObjSupportedDocumentModel.fkiMemberID = MemberId;
                            ObjSupportedDocumentModel.CreateDate = System.DateTime.Now;
                            ObjSupportedDocumentModel.parlourid = this.ParlourId;
                            ObjSupportedDocumentModel.LastModified = DateTime.Now;
                            ObjSupportedDocumentModel.ModifiedUser = this.User.Identity.Name;
                            ObjSupportedDocumentModel.DocType = Convert.ToInt32(rdbdocument.SelectedValue.ToString());
                            //int documentId = client.SaveSupportDocument(ObjSupportedDocumentModel);
                            int documentId = MembersBAL.SaveSupportDocument(ObjSupportedDocumentModel);
                            if (documentId > 0)
                            {

                                ShowMessage(ref lblMessage, MessageType.Success, "Supporting document uploaded successfully");
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab8", "goToTab(8);", true);
                            }
                            bindSupportedDocuments();

                        }
                    }
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab8", "goToTab(8);", true);
            }
        }
        protected void gvSupportedDocument_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "DeleteDocument")
            {
                MembersBAL.DeleteSUpportdocumentById(Convert.ToInt32(e.CommandArgument));
                bindSupportedDocuments();
            }
            ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab8", "goToTab(8);", true);
        }
        #endregion

        #region Dependency
        protected void btnDependecySubmit_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                try
                {
                    string DependencyIdNumber = txtDependencyIdNumber.Text;
                    if (DependencyIdNumber == "" || DependencyIdNumber == string.Empty)
                        DependencyIdNumber = "0";
                    else
                        DependencyIdNumber = txtDependencyIdNumber.Text;
                    FamilyDependencyModel ObjFamilyDependencyModel;
                    ObjFamilyDependencyModel = MembersBAL.GetDependencByIDNum(DependencyIdNumber, ParlourId, MemberId);
                    if (ObjFamilyDependencyModel != null)
                    {
                        ShowMessage(ref lblMessage, MessageType.Danger, "Member Dependenc  Already Exists.");
                    }
                    else
                    {

                        ObjFamilyDependencyModel = new FamilyDependencyModel();
                        //hdnDepedencyCoverDate.Value = txtDependencyCovertDate.Text;
                        ObjFamilyDependencyModel.DependencyType = ddlDependencyType.SelectedItem.Text;
                        ObjFamilyDependencyModel.Age = AgeFromDOB(Convert.ToDateTime(txtDependencyDOB.Text));// Convert.ToInt32(txtDependencyAge.Text);
                        ObjFamilyDependencyModel.IDNumber = txtDependencyIdNumber.Text;
                        ObjFamilyDependencyModel.FullName = txtDependencyFirstName.Text;
                        ObjFamilyDependencyModel.Surname = txtDependencyLastName.Text;
                        ObjFamilyDependencyModel.parlourid = this.ParlourId;
                        ObjFamilyDependencyModel.MemberId = this.MemberId;

                        ObjFamilyDependencyModel.DateOfBirth = Convert.ToDateTime(txtDependencyDOB.Text);
                        ObjFamilyDependencyModel.InceptionDate = Convert.ToDateTime(txtDependencyInceptionDate.Text);//System.DateTime.Now;
                        ObjFamilyDependencyModel.Premium = Convert.ToDecimal(txtDependencyPremium.Text);
                        if (string.IsNullOrEmpty(txtDependencyStartDate.Text))
                            ObjFamilyDependencyModel.StartDate = System.DateTime.Now;
                        else
                            ObjFamilyDependencyModel.StartDate = Convert.ToDateTime(txtDependencyStartDate.Text);

                        //ObjFamilyDependencyModel.StartDate = Convert.ToDateTime(txtDependencyStartDate.Text);
                        //ObjFamilyDependencyModel.StartDate = Convert.ToDateTime(txtDependencyStartDate.Text);
                        if (string.IsNullOrEmpty(txtDependencyCovertDate.Text))
                            ObjFamilyDependencyModel.CoverDate = Convert.ToDateTime(hdnDepedencyCoverDate.Value);
                        else
                            ObjFamilyDependencyModel.CoverDate = Convert.ToDateTime(txtDependencyCovertDate.Text);
                        //Convert.ToDateTime(txtDependencyCovertDate.Text); Convert.ToDateTime(hdCoverDate.Value); 
                        ObjFamilyDependencyModel.Relationship = Convert.ToInt32("1");
                        string Gender = null;
                        if (rdbtnMale.Checked) { Gender = "Male"; }
                        else if (rdbtnFemale.Checked) { Gender = "Female"; }
                        ObjFamilyDependencyModel.Gender = Gender;

                        int documentId = MembersBAL.SaveFamilyDependency(ObjFamilyDependencyModel);

                        bindDependency();
                        ClearDependencyControl();
                        bindTotalPremium();
                        ShowMessage(ref lblMessage, MessageType.Success, "Dependency saved successfully");
                    }
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab5", "goToTab(5);", true);

                }
                catch (FaultException<FuneralServiceFault> fault)
                {
                    lblMessage.Text = "<div class='ibox-content'><div class='alert alert-Danger'>" + fault.Detail.Message + "</div>";

                }
                catch (Exception ex)
                {
                    ShowMessage(ref lblMessage, MessageType.Danger, ex.Message);
                }
            }
            else
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab5", "goToTab(5);", true);
        }


        //mk
        protected void btnDependecyUpdate_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                try
                {
                    FamilyDependencyModel ObjFamilyDependencyModel = new FamilyDependencyModel();
                    ObjFamilyDependencyModel.DependencyType = ddlDependencyType.SelectedItem.Text;
                    ObjFamilyDependencyModel.Age = AgeFromDOB(Convert.ToDateTime(txtDependencyDOB.Text)); //Convert.ToInt32(txtDependencyAge.Text);
                    ObjFamilyDependencyModel.IDNumber = txtDependencyIdNumber.Text;
                    ObjFamilyDependencyModel.FullName = txtDependencyFirstName.Text;
                    ObjFamilyDependencyModel.Surname = txtDependencyLastName.Text;
                    ObjFamilyDependencyModel.parlourid = this.ParlourId;
                    ObjFamilyDependencyModel.MemberId = this.MemberId;
                    ObjFamilyDependencyModel.pkiDependentID = Convert.ToInt32(hfDependentId.Value);

                    ObjFamilyDependencyModel.DateOfBirth = Convert.ToDateTime(txtDependencyDOB.Text);
                    ObjFamilyDependencyModel.InceptionDate = Convert.ToDateTime(txtDependencyInceptionDate.Text);//System.DateTime.Now;
                    ObjFamilyDependencyModel.Premium = Convert.ToDecimal(txtDependencyPremium.Text);
                    ObjFamilyDependencyModel.CoverDate = Convert.ToDateTime(txtDependencyCovertDate.Text);//Convert.ToDateTime(hdCoverDate.Value);
                    ObjFamilyDependencyModel.StartDate = Convert.ToDateTime(txtDependencyStartDate.Text);
                    ObjFamilyDependencyModel.Relationship = Convert.ToInt32("1");
                    string Gender = null;
                    if (rdbtnMale.Checked) { Gender = "Male"; }
                    else if (rdbtnFemale.Checked) { Gender = "Female"; }
                    ObjFamilyDependencyModel.Gender = Gender;

                    int documentId = MembersBAL.UpdateFamilyDependency(ObjFamilyDependencyModel);
                    btnDependecySubmit.Visible = true;
                    btnDependecyUpdate.Visible = false;
                    bindDependency();
                    ClearDependencyControl();
                    bindTotalPremium();
                    ShowMessage(ref lblMessage, MessageType.Success, "Dependency udpated successfully");
                    // Response.Redirect("~/Admin/ManageMember.aspx?tabId=5&ID=" + ObjFamilyDependencyModel.pkiDependentID.ToString());
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab51", "goToTab(5);", true);

                }
                catch (FaultException<FuneralServiceFault> fault)
                {
                    lblMessage.Text = "<div class='ibox-content'><div class='alert alert-Danger'>" + fault.Detail.Message + "</div>";

                }
                catch (Exception ex)
                {
                    ShowMessage(ref lblMessage, MessageType.Danger, ex.Message);
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab51", "goToTab(5);", true);
            }
        }
        #endregion
        #endregion

        #region AddonProducts
        public void AddonProduct()
        {

            drpProductName.DataSource = MembersBAL.SelectProductName(ParlourId);
            drpProductName.DataTextField = "ProductName";
            drpProductName.DataValueField = "pkiProductID";
            drpProductName.DataBind();

            drpProductName.Items.Insert(0, new ListItem("Select", new Guid().ToString()));
        }
        #endregion

        #region Control Event

        protected void cvIdvalidation_ServerValidate(object source, ServerValidateEventArgs args)
        {
            if (Page.IsValid)
            {
                bool IDCheck = IdValidationClass.IdValidation(txtIdNumber.Text);
                args.IsValid = IDCheck;
            }
        }
        protected void cvIdvalidation_ServerValidate2(object source, ServerValidateEventArgs args)
        {
            if (Page.IsValid)
            {
                bool IDCheck = IdValidationClass.IdValidation(txtDependencyIdNumber.Text);
                args.IsValid = IDCheck;
            }
        }
        protected void btnTab3_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {

                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab1", "goToTab(9);", true);
            }
        }
        protected void btnTab4_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab1", "goToTab(4);", true);
            }
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                string MemberIdNumber = txtIdNumber.Text;
                if (MemberIdNumber == "" || MemberIdNumber == string.Empty)
                    MemberIdNumber = "0";
                else
                    MemberIdNumber = txtIdNumber.Text;

                MembersModel model;
                AdditionalMemberInfoModel model1 = new AdditionalMemberInfoModel();

                model = MembersBAL.GetMemberByIDNum(MemberIdNumber, ParlourId);

                if (model != null && model.pkiMemberID != MemberId)
                {
                    ShowMessage(ref lblMessage, MessageType.Danger, "Member Already Exists.");
                }
                else
                {
                    model = new MembersModel();
                    //Fields Which belongs from source page
                    model.pkiMemberID = MemberId;
                    model.FullNames = txtFirstname.Text;
                    model.Surname = txtLastName.Text;
                    model.IDNumber = txtIdNumber.Text;
                    model.MemberType = "Main";
                    model.DateOfBirth = MaxIfEmpty(txtBirthDay.Text);
                    model.Gender = rbtnlGender.SelectedValue;
                    model.Cellphone = txtCellphone.Text;
                    model.Telephone = txtTelePhone.Text;
                    model.Email = txtEmail.Text;
                    model.DebitDate = MaxIfEmpty(txtDebitdate.Text);
                    model.Address1 = txtStreetAddress.Text;
                    model.Address2 = txtTown.Text;
                    model.Address3 = txtProvince.Text;
                    model.Address4 = txtStreetPostalAddress.Text;
                    model.Code = txtCode.Text;
                    //New Data
                    //model.Address1_Post = txtStreetAddress_Post.Text;
                    //model.Address2_Post = txtTown_Post.Text;
                    //model.Address3_Post = txtProvince_Post.Text;
                    //model.Address4_Post = txtStreetPostalAddress_Post.Text;
                    //model.Code_Post = txtCode_Post.Text;
                    //end
                    model.MemberBranch = ddlBankBranch.SelectedValue;
                    if (ddlAgent.SelectedValue == "0")
                        model.Agent = string.Empty;
                    else
                        model.Agent = ddlAgent.SelectedItem.Text;
                    model.AccountHolder = txtAccountholder.Text;
                    model.Bank = ddlBank.SelectedItem.Text;
                    model.Branch = txtBranch.Text;
                    model.BranchCode = txtBranchcode.Text;
                    model.AccountNumber = txtAccountno.Text;
                    model.AccountType = ddlAccountType.SelectedItem.Text;
                    model.MemberSociety = ddlMemberSociety.SelectedValue;
                    if (string.IsNullOrEmpty(txtInception.Text))
                    { model.InceptionDate = System.DateTime.Now; }
                    else
                    { model.InceptionDate = Convert.ToDateTime(txtInception.Text); }

                    model.DebitDate = MaxIfEmpty(txtDebitdate.Text);


                    if (!string.IsNullOrEmpty(hdnParlourid.Value) && ParlourId != new Guid(hdnParlourid.Value) && IsAdministrator)
                        model.parlourid = new Guid(hdnParlourid.Value);
                    else
                        model.parlourid = ParlourId;

                    if (ddlPolicy.SelectedIndex != -1 && ddlPolicy.SelectedValue != "0")
                        model.fkiPlanID = Convert.ToInt32(ddlPolicy.SelectedValue);
                    model.MemeberNumber = txtPolicyNo.Text;
                    model.EasyPayNo = txtEasyToPay.Text;
                    model.pkiAdditionalMemberInfo = Guid.NewGuid();
                    //model.
                    model.Citizenship = ddlCitizenship.SelectedItem.Text;
                    model.Passport = txtPassport.Text;
                    model.PolicyStatus = "On Trial";

                    if (string.IsNullOrEmpty(txtPolicyStartDate.Text))
                        model.StartDate = System.DateTime.Now;
                    else
                        model.StartDate = Convert.ToDateTime(txtPolicyStartDate.Text);

                    if (string.IsNullOrEmpty(hdCoverDate.Value))
                        model.CoverDate = null;
                    else
                        model.CoverDate = Convert.ToDateTime(hdCoverDate.Value);

                    if (ddlCustom1.SelectedIndex != -1)
                        model.CustomId1 = Convert.ToInt32(ddlCustom1.SelectedValue);
                    else
                        model.CustomId1 = 0;

                    if (ddlCustom2.SelectedIndex != -1)
                    {
                        model.CustomId2 = Convert.ToInt32(ddlCustom2.SelectedValue);
                    }
                    else
                    {
                        model.CustomId2 = 0;
                    }

                    if (ddlCustom3.SelectedIndex != -1)
                    {
                        model.CustomId3 = Convert.ToInt32(ddlCustom3.SelectedValue);
                    }
                    else
                    {
                        model.CustomId3 = 0;
                    }

                    model.ModifiedUser = UserName;
                    model.Active = false;
                    //================================================================ 
                    int retID = MembersBAL.SaveMembers(model);
                    MemberId = retID;
                    if (Request.QueryString["ID"] == null)
                    { saveAddproduct(MemberId); }
                    PolicyDoc.Enabled = true;
                    if (MemberId > 0 && model.pkiMemberID == 0)
                    {
                        //Member New Registration Welcome SMS Send 
                        int SmsGrupId = Convert.ToInt32(SmsGroupType.Welcome);
                        smsSendingGroupModel modelSSG = ToolsSetingBAL.GetsmsGroupbyID(SmsGrupId, ParlourId);
                        if (modelSSG != null)
                        {
                            StringBuilder strsb = new StringBuilder();
                            smsTempletModel _EmailTemplate = ToolsSetingBAL.GetEmailTemplateByID(SmsGrupId, ParlourId);
                            if (_EmailTemplate != null)
                            {
                                strsb = new StringBuilder(_EmailTemplate.smsText);
                                strsb = strsb.Replace("@Name", "<p>" + model.FullNames + " " + model.Surname + "</p>");
                                string CellNo = (model.Cellphone == string.Empty ? "0" : model.Cellphone);
                                if (CellNo == "0")
                                    CellNo = (model.Telephone == string.Empty ? "0" : model.Telephone);

                                SendReminderModel smsModel = new SendReminderModel();
                                smsModel.MemeberID = UserID.ToString();
                                smsModel.MemberData = strsb.ToString();
                                smsModel.MemeberToNumber = Convert.ToInt64(CellNo.Replace(" ", ""));
                                smsModel.parlourid = ParlourId;

                                int SendOpration = MemberPaymentBAL.InsertSendReminder(smsModel);
                            }
                        }
                    }
                    hdnId.Value = retID.ToString();
                    bindTotalPremium();
                    bindEasyPayNumber();
                    BindAddonProducts();
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "EnableControl1", "EnableTab();", true);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab1", "goToTab(5);", true);
                    ShowMessage(ref lblMessage, MessageType.Success, "Member saved successfully");
                }
                btnAdd.Enabled = true;
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab512", "goToTab(5);", true);
            }
        }
        public void bindEasyPayNumber()
        {
            int ID = Convert.ToInt32(Request.QueryString["ID"]);
            if (Convert.ToInt32(Request.QueryString["ID"]) == 0)
                ID = Convert.ToInt32(hdnId.Value);
            MembersModel model = MembersBAL.GetMemberByID(ID, ParlourId);
            txtPolicyNo.Text = model.MemeberNumber;
            txtEasyToPay.Text = model.EasyPayNo;
        }
        protected void gvFamilyDependency_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "EditDependant")
            {
                hfDependentId.Value = e.CommandArgument.ToString();
                SelectFamilyDependency(Convert.ToInt32(e.CommandArgument));
            }
            else if (e.CommandName == "DeleteDependant")
            {
                MembersBAL.GetFamilyDependencyTypes(Convert.ToInt32(e.CommandArgument));
                bindDependency();
                bindTotalPremium();
            }
            ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab5", "goToTab(5);", true);
        }
        protected void gvNotes_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (e.Row.Cells[0].Text.Length > 200)
                {
                    var str = e.Row.Cells[0].Text.Substring(0, 200);
                    e.Row.Cells[0].Text = str.Substring(0, str.LastIndexOf(' ')) + "...";
                }
            }
        }
        protected void btnNextTb1_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab1", "goToTab(2);", true);
            }

        }

        protected void btnTab2_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {

                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab1", "goToTab(3);", true);
            }
        }
        #endregion

        protected void gvFamilyDependency_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row != null)
            {
                try
                {
                    e.Row.Cells[4].Text = (e.Row.Cells[4] != null) ? ("R " + (Math.Round(Convert.ToDecimal(e.Row.Cells[4].Text), 2)).ToString()) : (string.Empty);
                    e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Right;
                }
                catch
                {

                }
            }
        }

        public void BindMember()
        {
            List<MembersModel> model = MembersBAL.GetPolicyByMemberIDNumber(txtIdNumber.Text, this.ParlourId).ToList();
            gvMembers.DataSource = model;
            gvMembers.DataBind();
        }

        #region Super user roles.
        private void SuperUserRoles()
        {
            //SecureUserGroupsModel model;
            //model = client.GetSuperUserAccessByID(UserID, ParlourId).Where(x => x.fkiSecureGroupID == 12 || x.fkiSecureGroupID == 4).FirstOrDefault();
            if (IsAdministrator || IsSuperUser)
            {
                txtIdNumber.ReadOnly = false;
            }
        }
        #endregion

        #region Bind Custom Detailss
        private void BindCustomDetails()
        {
            var custom1 = CustomDetailsBAL.GetAllCustomDetailsByParlourId(this.ParlourId, Convert.ToInt32(CustomDetailsEnums.CustomDetailsType.EmploymentType));
            var custom2 = CustomDetailsBAL.GetAllCustomDetailsByParlourId(this.ParlourId, Convert.ToInt32(CustomDetailsEnums.CustomDetailsType.PaymentType));
            var custom3 = CustomDetailsBAL.GetAllCustomDetailsByParlourId(this.ParlourId, Convert.ToInt32(CustomDetailsEnums.CustomDetailsType.Source));
            ddlCustom1.DataSource = custom1;
            ddlCustom1.DataTextField = "Name";
            ddlCustom1.DataValueField = "Id";
            ddlCustom1.DataBind();
            ddlCustom1.Items.Insert(0, new ListItem("All", "0"));

            ddlCustom2.DataSource = custom2;
            ddlCustom2.DataTextField = "Name";
            ddlCustom2.DataValueField = "Id";
            ddlCustom2.DataBind();
            ddlCustom2.Items.Insert(0, new ListItem("All", "0"));

            ddlCustom3.DataSource = custom3;
            ddlCustom3.DataTextField = "Name";
            ddlCustom3.DataValueField = "Id";
            ddlCustom3.DataBind();
            ddlCustom3.Items.Insert(0, new ListItem("All", "0"));

            ///----------------------Agent--------------------
            DDe_cg1.DataSource = custom1;
            DDe_cg1.DataTextField = "Name";
            DDe_cg1.DataValueField = "Id";
            DDe_cg1.DataBind();
            DDe_cg1.Items.Insert(0, new ListItem("All", "0"));

            DDe_cg2.DataSource = custom2;
            DDe_cg2.DataTextField = "Name";
            DDe_cg2.DataValueField = "Id";
            DDe_cg2.DataBind();
            DDe_cg2.Items.Insert(0, new ListItem("All", "0"));

            DDe_cg3.DataSource = custom3;
            DDe_cg3.DataTextField = "Name";
            DDe_cg3.DataValueField = "Id";
            DDe_cg3.DataBind();
            DDe_cg3.Items.Insert(0, new ListItem("All", "0"));

        }
        #endregion



        protected void gvMembers_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvMembers.PageIndex = e.NewPageIndex;
            BindMember();

        }

        protected void gvMembers_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "DeletePolicy")
            {
                try
                {
                    //int retID = client.DeleteMember(Convert.ToInt32(e.CommandArgument));
                    MembersBAL.DeleteMember(Convert.ToInt32(e.CommandArgument));
                    BindMember();
                    ShowMessage(ref lblMessage, MessageType.Success, "Record deleted successfully.");
                    lblMessage.Visible = true;
                }
                catch (Exception exc)
                {
                    ShowMessage(ref lblMessage, MessageType.Danger, exc.Message);
                    lblMessage.Visible = true;
                }

            }
            else
            {
                int selectedMemberId = Convert.ToInt32(e.CommandArgument);
                BindPolicyToUpdate(selectedMemberId);
                ScriptManager.RegisterStartupScript(this, this.GetType(), "hwa1", "GetForPolicyDataPopUp(\'Report\');", true);
            }
        }
        private void BindPolicyToUpdate(int selectedMemberId)
        {
            MembersModel model = MembersBAL.GetMemberByID(selectedMemberId, ParlourId);
            if ((model == null))
            {
                Response.Write("<script>alert('No record found to update this policy.');</script>");
            }
            else
            {
                //   BindBankMemberNumber(); -- Need to written new methods which should call with new member id.
                hdnSelectedMemberId.Value = selectedMemberId.ToString();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "DisableControl", "EnableTab();", true);
                DDe_Pname.SelectedIndex = DDe_Pname.Items.IndexOf(DDe_Pname.Items.FindByValue(model.fkiPlanID.ToString()));
                txte_pnumber.Text = model.MemeberNumber;
                txte_easypay.Text = model.EasyPayNo;
                DDe_branch.SelectedValue = model.MemberBranch;
                DDe_cg1.SelectedValue = Convert.ToString(model.CustomId1);
                DDe_cg2.SelectedValue = Convert.ToString(model.CustomId2);
                DDe_cg3.SelectedValue = Convert.ToString(model.CustomId3);
                DDe_society.SelectedValue = model.MemberSociety;
                txte_sdate.Text = model.StartDate.ToString();
                txte_idate.Text = model.InceptionDate.ToString();
                txte_cdate.Text = model.CoverDate.ToString();

                if (DDe_pagent.Items.FindByValue(model.Agent) == null)
                {
                    DDe_pagent.SelectedIndex = -1;
                }
                else
                {
                    DDe_pagent.Items.FindByValue(model.Agent).Selected = true;
                }
                bindTotalPremiumForEdit(selectedMemberId);
                Response.Write("<script>window.onload=function(){FillAjaxdataForUpdatePremium();}  </script>");
            }
        }
        public void bindTotalPremiumForEdit(int selectedMember)
        {
            txte_tpremium.Text = MembersBAL.SumOfPremium(selectedMember, ParlourId).ToString(Currency.Trim() + " 0.00");
        }
        protected void btnEditPolicy_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                string MemberIdNumber = hdnSelectedMemberId.Value;
                if (MemberIdNumber == null || MemberIdNumber == string.Empty)
                    MemberIdNumber = "0";
                else
                    MemberIdNumber = hdnSelectedMemberId.Value;

                MembersModel model = MembersBAL.GetMemberByID(Convert.ToInt32(MemberIdNumber), ParlourId);
                if (model == null)
                {
                    ShowMessage(ref lblMessage, MessageType.Danger, "There have no member found for this id.");
                    return;
                }

                //Fields Which belongs from source page
                model.pkiMemberID = Convert.ToInt32(MemberIdNumber);
                // model.MemeberNumber = Convert.ToInt32(MemberIdNumber).ToString();       
                model.MemberBranch = DDe_branch.SelectedValue;


                if (DDe_pagent.SelectedValue == "0")
                    model.Agent = string.Empty;
                else
                    model.Agent = DDe_pagent.SelectedItem.Text;

                model.MemberSociety = DDe_society.SelectedValue;

                if (string.IsNullOrEmpty(txte_idate.Text))
                { model.InceptionDate = System.DateTime.Now; }
                else
                { model.InceptionDate = Convert.ToDateTime(txte_idate.Text); }


                if (DDe_Pname.SelectedIndex != -1 && DDe_Pname.SelectedValue != "0")
                    model.fkiPlanID = Convert.ToInt32(DDe_Pname.SelectedValue);


                model.MemeberNumber = txte_pnumber.Text;
                model.EasyPayNo = txte_easypay.Text;
                //model.

                if (string.IsNullOrEmpty(txte_sdate.Text))
                    model.StartDate = System.DateTime.Now;
                else
                    model.StartDate = Convert.ToDateTime(txte_sdate.Text);

                if (string.IsNullOrEmpty(hdEditCoverDate.Value))
                    model.CoverDate = null;
                else
                    model.CoverDate = Convert.ToDateTime(hdEditCoverDate.Value);

                if (DDe_cg1.SelectedIndex != -1)
                    model.CustomId1 = Convert.ToInt32(DDe_cg1.SelectedValue);
                else
                    model.CustomId1 = 0;

                if (DDe_cg2.SelectedIndex != -1)
                {
                    model.CustomId2 = Convert.ToInt32(DDe_cg2.SelectedValue);
                }
                else
                {
                    model.CustomId2 = 0;
                }

                if (DDe_cg3.SelectedIndex != -1)
                {
                    model.CustomId3 = Convert.ToInt32(DDe_cg3.SelectedValue);
                }
                else
                {
                    model.CustomId3 = 0;
                }

                //================================================================ 
                int retID = MembersBAL.SaveMembers(model);
                //bindTotalPremiumForEdit(MemberIdNumber);
                //  ScriptManager.RegisterStartupScript(this, this.GetType(), "hwa2", "getTotalPremium();", true);
                bindTotalPremiumForEdit(Convert.ToInt32(MemberIdNumber));
                hdnSelectedMemberId.Value = retID.ToString();
                BindMember();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "EnableControl1", "EnableTab();", true);
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab1", "goToTab(3);", true);
                ShowMessage(ref lblMessage, MessageType.Success, "Policy updated successfully");

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab512", "goToTab(5);", true);
            }

        }
        //protected void DDe_Pname_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    bindTotalPremiumForEdit(Convert.ToInt32(hdnSelectedMemberId.Value));
        //}

        [WebMethod]
        public static string getTotalPremiumForMember(int planId, int id, string parlorId)
        {
            using (FuneralServiceReference.FuneralServicesClient client = new FuneralServiceReference.FuneralServicesClient())
            {
                string currency = client.GetCurrencyByParlourId(new Guid(parlorId));
                return client.SumPremiumByPlanId(planId, id, new Guid(parlorId)).ToString(currency.Trim() + " 0.00");
            }
        }

        protected void btnResetTab1_Click(object sender, EventArgs e)
        {
            txtLastName.Text = string.Empty;
            txtFirstname.Text = string.Empty;
            txtIdNumber.Text = string.Empty;
            txtBirthDay.Text = string.Empty;
            txtAge.Text = "Will be Calculated From Date Of Birth";
            txtCellphone.Text = string.Empty;
            txtTelePhone.Text = string.Empty;
            txtEmail.Text = string.Empty;
            rdbtnMale.Checked = false;
            rdbtnFemale.Checked = false;
            ddlCitizenship.SelectedIndex = -1;
            chkIdORPass.Checked = false;
        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            drpProductName.SelectedIndex = -1;
            txtPremium.Text = string.Empty;
        }

        protected void btnResetTab3_Click(object sender, EventArgs e)
        {
            ddlPolicy.SelectedIndex = -1;
            txtPolicyPremium.Text = string.Empty;
            txtPolicyNo.Text = string.Empty;
            txtEasyToPay.Text = string.Empty;
            ddlBankBranch.SelectedIndex = -1;
            ddlCustom1.SelectedIndex = -1;
            ddlCustom2.SelectedIndex = -1;
            ddlCustom3.SelectedIndex = -1;
            ddlMemberSociety.SelectedIndex = -1;
            txtPolicyStartDate.Text = string.Empty;
            txtInception.Text = string.Empty;
            txtCoverDate.Text = string.Empty;
            txtUnderwriter.Text = string.Empty;
            ddlAgent.SelectedIndex = -1;
            txtTotalPremium.Text = string.Empty;
        }

        protected void btnResetTab4_Click(object sender, EventArgs e)
        {
            txtAccountholder.Text = string.Empty;
            txtAccountno.Text = string.Empty;
            ddlBank.SelectedIndex = -1;
            ddlAccountType.SelectedIndex = -1;
            txtBranch.Text = string.Empty;
            txtDebitdate.Text = string.Empty;
            txtBranchcode.Text = string.Empty;
        }

        protected void btnDependecyReset_Click(object sender, EventArgs e)
        {
            txtDependencyLastName.Text = string.Empty;
            txtDependencyFirstName.Text = string.Empty;
            txtDependencyIdNumber.Text = string.Empty;
            txtDependencyDOB.Text = string.Empty;
            txtDependencyAge.Text = "Will be Calculated From Date Of Birth";
            rdbtnMale.Checked = false;
            rdbtnFemale.Checked = false;
            txtDependencyStartDate.Text = string.Empty;
            txtDependencyInceptionDate.Text = string.Empty;
            txtDependencyCovertDate.Text = string.Empty;
            ddlDependencyType.SelectedIndex = -1;
            txtDependencyPremium.Text = string.Empty;
        }

        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "hwa2", "GetForDependencyCopiedPolicyDataPopUp(\'Report\');", true);
        }

        protected void btnDependencyCopiedPolicy_Click(object sender, EventArgs e)
        {
            int DependencyCopiedPolicyMemberIdNumber = MembersBAL.GetLastCopiedMemberForDependency();
            string DependencyCopiedPolicyIdNumber = txtDependencyCopiedPolicyIdNumber.Text;
            if (DependencyCopiedPolicyIdNumber == "" || DependencyCopiedPolicyIdNumber == string.Empty)
                DependencyCopiedPolicyIdNumber = "0";
            else
                DependencyCopiedPolicyIdNumber = txtDependencyCopiedPolicyIdNumber.Text;

            FamilyDependencyModel ObjFamilyDependencyModel;

            ObjFamilyDependencyModel = new FamilyDependencyModel();
            //hdnDepedencyCoverDate.Value = txtDependencyCovertDate.Text;
            ObjFamilyDependencyModel.DependencyType = ddlCopiedPolicyDependencyType.SelectedItem.Text;
            ObjFamilyDependencyModel.Age = AgeFromDOB(Convert.ToDateTime(txtDependencyCopiedPolicyDOB.Text));// Convert.ToInt32(txtDependencyAge.Text);
            ObjFamilyDependencyModel.IDNumber = txtDependencyCopiedPolicyIdNumber.Text;
            ObjFamilyDependencyModel.FullName = txtDependencyCopiedPolicyFirstName.Text;
            ObjFamilyDependencyModel.Surname = txtDependencyCopiedPolicyLastName.Text;
            ObjFamilyDependencyModel.parlourid = this.ParlourId;
            ObjFamilyDependencyModel.MemberId = DependencyCopiedPolicyMemberIdNumber; ;

            ObjFamilyDependencyModel.DateOfBirth = Convert.ToDateTime(txtDependencyCopiedPolicyDOB.Text);
            ObjFamilyDependencyModel.InceptionDate = Convert.ToDateTime(txtDependencyCopiedPolicyInceptionDate.Text);//System.DateTime.Now;
            ObjFamilyDependencyModel.Premium = Convert.ToDecimal(txtDependencyCopiedPolicyPremium.Text);
            if (string.IsNullOrEmpty(txtDependencyCopiedPolicyStartDate.Text))
                ObjFamilyDependencyModel.StartDate = System.DateTime.Now;
            else
                ObjFamilyDependencyModel.StartDate = Convert.ToDateTime(txtDependencyCopiedPolicyStartDate.Text);

            //ObjFamilyDependencyModel.StartDate = Convert.ToDateTime(txtDependencyStartDate.Text);
            //ObjFamilyDependencyModel.StartDate = Convert.ToDateTime(txtDependencyStartDate.Text);
            if (string.IsNullOrEmpty(txtDependencyCopiedPolicyCoverDate.Text))
                ObjFamilyDependencyModel.CoverDate = Convert.ToDateTime(hdnDepedencyCoverDate.Value);
            else
                ObjFamilyDependencyModel.CoverDate = Convert.ToDateTime(txtDependencyCopiedPolicyCoverDate.Text);
            //Convert.ToDateTime(txtDependencyCovertDate.Text); Convert.ToDateTime(hdCoverDate.Value); 
            ObjFamilyDependencyModel.Relationship = Convert.ToInt32("1");
            string Gender = null;
            if (nbtnDependencyCopiedPolicyMale.Checked) { Gender = "Male"; }
            else if (nbtnDependencyCopiedPolicyFemale.Checked) { Gender = "Female"; }
            ObjFamilyDependencyModel.Gender = Gender;

            int documentId = MembersBAL.SaveFamilyDependency(ObjFamilyDependencyModel);

            bindDependency();
            ClearDependencyCopiedPolicyControl();
            bindTotalPremium();
            ShowMessage(ref lblMessage, MessageType.Success, "Dependents For a Copiedpolicy saved successfully");
        }
        // ScriptManager.RegisterStartupScript(this, this.GetType(), "goToTab5", "goToTab(5);", true);


    }
}