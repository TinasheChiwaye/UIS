//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Funeral.Web.Admin.Reports.DataSets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsGetPlanDetailsByPlanId")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsGetPlanDetailsByPlanId : global::System.Data.DataSet {
        
        private GetPlanDetailsByPlanIdDataTable tableGetPlanDetailsByPlanId;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public dsGetPlanDetailsByPlanId() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected dsGetPlanDetailsByPlanId(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetPlanDetailsByPlanId"] != null)) {
                    base.Tables.Add(new GetPlanDetailsByPlanIdDataTable(ds.Tables["GetPlanDetailsByPlanId"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPlanDetailsByPlanIdDataTable GetPlanDetailsByPlanId {
            get {
                return this.tableGetPlanDetailsByPlanId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            dsGetPlanDetailsByPlanId cln = ((dsGetPlanDetailsByPlanId)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetPlanDetailsByPlanId"] != null)) {
                    base.Tables.Add(new GetPlanDetailsByPlanIdDataTable(ds.Tables["GetPlanDetailsByPlanId"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableGetPlanDetailsByPlanId = ((GetPlanDetailsByPlanIdDataTable)(base.Tables["GetPlanDetailsByPlanId"]));
            if ((initTable == true)) {
                if ((this.tableGetPlanDetailsByPlanId != null)) {
                    this.tableGetPlanDetailsByPlanId.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "dsGetPlanDetailsByPlanId";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsGetPlanDetailsByPlanId.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetPlanDetailsByPlanId = new GetPlanDetailsByPlanIdDataTable();
            base.Tables.Add(this.tableGetPlanDetailsByPlanId);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetPlanDetailsByPlanId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsGetPlanDetailsByPlanId ds = new dsGetPlanDetailsByPlanId();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetPlanDetailsByPlanIdRowChangeEventHandler(object sender, GetPlanDetailsByPlanIdRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPlanDetailsByPlanIdDataTable : global::System.Data.TypedTableBase<GetPlanDetailsByPlanIdRow> {
            
            private global::System.Data.DataColumn columnpkiPlanID;
            
            private global::System.Data.DataColumn columnPlanName;
            
            private global::System.Data.DataColumn columnPlanDesc;
            
            private global::System.Data.DataColumn columnPlanSubscription;
            
            private global::System.Data.DataColumn columnSpouse;
            
            private global::System.Data.DataColumn columnChildren;
            
            private global::System.Data.DataColumn columnAdults;
            
            private global::System.Data.DataColumn columnCover;
            
            private global::System.Data.DataColumn columnWaitingPeriod;
            
            private global::System.Data.DataColumn columnUnderwriterSplit;
            
            private global::System.Data.DataColumn columnManagerSplit;
            
            private global::System.Data.DataColumn columnAgentSplit;
            
            private global::System.Data.DataColumn columnPolicyLaps;
            
            private global::System.Data.DataColumn columnSpouseCover;
            
            private global::System.Data.DataColumn columnChildCover;
            
            private global::System.Data.DataColumn columnAdultCover;
            
            private global::System.Data.DataColumn columnparlourid;
            
            private global::System.Data.DataColumn columnPlanUnderwriter;
            
            private global::System.Data.DataColumn columnJoiningFee;
            
            private global::System.Data.DataColumn columnLastModified;
            
            private global::System.Data.DataColumn columnModifiedUser;
            
            private global::System.Data.DataColumn columnHeadManagerSplit;
            
            private global::System.Data.DataColumn columnManager2Split;
            
            private global::System.Data.DataColumn columnOfficeSplit;
            
            private global::System.Data.DataColumn columnAdminSplit;
            
            private global::System.Data.DataColumn columnMainMember;
            
            private global::System.Data.DataColumn columnCompanySplit;
            
            private global::System.Data.DataColumn columnCover0to5year;
            
            private global::System.Data.DataColumn columnCover6to13year;
            
            private global::System.Data.DataColumn columnCover14to21year;
            
            private global::System.Data.DataColumn columnCover22to40year;
            
            private global::System.Data.DataColumn columnCover41to59year;
            
            private global::System.Data.DataColumn columnCover60to65year;
            
            private global::System.Data.DataColumn columnCover66to75year;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetPlanDetailsByPlanIdDataTable() {
                this.TableName = "GetPlanDetailsByPlanId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetPlanDetailsByPlanIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetPlanDetailsByPlanIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn pkiPlanIDColumn {
                get {
                    return this.columnpkiPlanID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlanNameColumn {
                get {
                    return this.columnPlanName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlanDescColumn {
                get {
                    return this.columnPlanDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlanSubscriptionColumn {
                get {
                    return this.columnPlanSubscription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SpouseColumn {
                get {
                    return this.columnSpouse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ChildrenColumn {
                get {
                    return this.columnChildren;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AdultsColumn {
                get {
                    return this.columnAdults;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoverColumn {
                get {
                    return this.columnCover;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WaitingPeriodColumn {
                get {
                    return this.columnWaitingPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UnderwriterSplitColumn {
                get {
                    return this.columnUnderwriterSplit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ManagerSplitColumn {
                get {
                    return this.columnManagerSplit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AgentSplitColumn {
                get {
                    return this.columnAgentSplit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PolicyLapsColumn {
                get {
                    return this.columnPolicyLaps;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SpouseCoverColumn {
                get {
                    return this.columnSpouseCover;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ChildCoverColumn {
                get {
                    return this.columnChildCover;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AdultCoverColumn {
                get {
                    return this.columnAdultCover;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn parlouridColumn {
                get {
                    return this.columnparlourid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlanUnderwriterColumn {
                get {
                    return this.columnPlanUnderwriter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn JoiningFeeColumn {
                get {
                    return this.columnJoiningFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LastModifiedColumn {
                get {
                    return this.columnLastModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ModifiedUserColumn {
                get {
                    return this.columnModifiedUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HeadManagerSplitColumn {
                get {
                    return this.columnHeadManagerSplit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Manager2SplitColumn {
                get {
                    return this.columnManager2Split;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OfficeSplitColumn {
                get {
                    return this.columnOfficeSplit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AdminSplitColumn {
                get {
                    return this.columnAdminSplit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MainMemberColumn {
                get {
                    return this.columnMainMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompanySplitColumn {
                get {
                    return this.columnCompanySplit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cover0to5yearColumn {
                get {
                    return this.columnCover0to5year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cover6to13yearColumn {
                get {
                    return this.columnCover6to13year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cover14to21yearColumn {
                get {
                    return this.columnCover14to21year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cover22to40yearColumn {
                get {
                    return this.columnCover22to40year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cover41to59yearColumn {
                get {
                    return this.columnCover41to59year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cover60to65yearColumn {
                get {
                    return this.columnCover60to65year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cover66to75yearColumn {
                get {
                    return this.columnCover66to75year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetPlanDetailsByPlanIdRow this[int index] {
                get {
                    return ((GetPlanDetailsByPlanIdRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetPlanDetailsByPlanIdRowChangeEventHandler GetPlanDetailsByPlanIdRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetPlanDetailsByPlanIdRowChangeEventHandler GetPlanDetailsByPlanIdRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetPlanDetailsByPlanIdRowChangeEventHandler GetPlanDetailsByPlanIdRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetPlanDetailsByPlanIdRowChangeEventHandler GetPlanDetailsByPlanIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetPlanDetailsByPlanIdRow(GetPlanDetailsByPlanIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetPlanDetailsByPlanIdRow AddGetPlanDetailsByPlanIdRow(
                        string PlanName, 
                        string PlanDesc, 
                        decimal PlanSubscription, 
                        int Spouse, 
                        int Children, 
                        int Adults, 
                        decimal Cover, 
                        int WaitingPeriod, 
                        decimal UnderwriterSplit, 
                        decimal ManagerSplit, 
                        decimal AgentSplit, 
                        int PolicyLaps, 
                        decimal SpouseCover, 
                        decimal ChildCover, 
                        decimal AdultCover, 
                        System.Guid parlourid, 
                        string PlanUnderwriter, 
                        decimal JoiningFee, 
                        System.DateTime LastModified, 
                        string ModifiedUser, 
                        decimal HeadManagerSplit, 
                        decimal Manager2Split, 
                        decimal OfficeSplit, 
                        decimal AdminSplit, 
                        int MainMember, 
                        decimal CompanySplit, 
                        decimal Cover0to5year, 
                        decimal Cover6to13year, 
                        decimal Cover14to21year, 
                        decimal Cover22to40year, 
                        decimal Cover41to59year, 
                        decimal Cover60to65year, 
                        decimal Cover66to75year) {
                GetPlanDetailsByPlanIdRow rowGetPlanDetailsByPlanIdRow = ((GetPlanDetailsByPlanIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PlanName,
                        PlanDesc,
                        PlanSubscription,
                        Spouse,
                        Children,
                        Adults,
                        Cover,
                        WaitingPeriod,
                        UnderwriterSplit,
                        ManagerSplit,
                        AgentSplit,
                        PolicyLaps,
                        SpouseCover,
                        ChildCover,
                        AdultCover,
                        parlourid,
                        PlanUnderwriter,
                        JoiningFee,
                        LastModified,
                        ModifiedUser,
                        HeadManagerSplit,
                        Manager2Split,
                        OfficeSplit,
                        AdminSplit,
                        MainMember,
                        CompanySplit,
                        Cover0to5year,
                        Cover6to13year,
                        Cover14to21year,
                        Cover22to40year,
                        Cover41to59year,
                        Cover60to65year,
                        Cover66to75year};
                rowGetPlanDetailsByPlanIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetPlanDetailsByPlanIdRow);
                return rowGetPlanDetailsByPlanIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetPlanDetailsByPlanIdRow FindBypkiPlanID(int pkiPlanID) {
                return ((GetPlanDetailsByPlanIdRow)(this.Rows.Find(new object[] {
                            pkiPlanID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetPlanDetailsByPlanIdDataTable cln = ((GetPlanDetailsByPlanIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetPlanDetailsByPlanIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnpkiPlanID = base.Columns["pkiPlanID"];
                this.columnPlanName = base.Columns["PlanName"];
                this.columnPlanDesc = base.Columns["PlanDesc"];
                this.columnPlanSubscription = base.Columns["PlanSubscription"];
                this.columnSpouse = base.Columns["Spouse"];
                this.columnChildren = base.Columns["Children"];
                this.columnAdults = base.Columns["Adults"];
                this.columnCover = base.Columns["Cover"];
                this.columnWaitingPeriod = base.Columns["WaitingPeriod"];
                this.columnUnderwriterSplit = base.Columns["UnderwriterSplit"];
                this.columnManagerSplit = base.Columns["ManagerSplit"];
                this.columnAgentSplit = base.Columns["AgentSplit"];
                this.columnPolicyLaps = base.Columns["PolicyLaps"];
                this.columnSpouseCover = base.Columns["SpouseCover"];
                this.columnChildCover = base.Columns["ChildCover"];
                this.columnAdultCover = base.Columns["AdultCover"];
                this.columnparlourid = base.Columns["parlourid"];
                this.columnPlanUnderwriter = base.Columns["PlanUnderwriter"];
                this.columnJoiningFee = base.Columns["JoiningFee"];
                this.columnLastModified = base.Columns["LastModified"];
                this.columnModifiedUser = base.Columns["ModifiedUser"];
                this.columnHeadManagerSplit = base.Columns["HeadManagerSplit"];
                this.columnManager2Split = base.Columns["Manager2Split"];
                this.columnOfficeSplit = base.Columns["OfficeSplit"];
                this.columnAdminSplit = base.Columns["AdminSplit"];
                this.columnMainMember = base.Columns["MainMember"];
                this.columnCompanySplit = base.Columns["CompanySplit"];
                this.columnCover0to5year = base.Columns["Cover0to5year"];
                this.columnCover6to13year = base.Columns["Cover6to13year"];
                this.columnCover14to21year = base.Columns["Cover14to21year"];
                this.columnCover22to40year = base.Columns["Cover22to40year"];
                this.columnCover41to59year = base.Columns["Cover41to59year"];
                this.columnCover60to65year = base.Columns["Cover60to65year"];
                this.columnCover66to75year = base.Columns["Cover66to75year"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnpkiPlanID = new global::System.Data.DataColumn("pkiPlanID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpkiPlanID);
                this.columnPlanName = new global::System.Data.DataColumn("PlanName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanName);
                this.columnPlanDesc = new global::System.Data.DataColumn("PlanDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanDesc);
                this.columnPlanSubscription = new global::System.Data.DataColumn("PlanSubscription", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanSubscription);
                this.columnSpouse = new global::System.Data.DataColumn("Spouse", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpouse);
                this.columnChildren = new global::System.Data.DataColumn("Children", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildren);
                this.columnAdults = new global::System.Data.DataColumn("Adults", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdults);
                this.columnCover = new global::System.Data.DataColumn("Cover", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover);
                this.columnWaitingPeriod = new global::System.Data.DataColumn("WaitingPeriod", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaitingPeriod);
                this.columnUnderwriterSplit = new global::System.Data.DataColumn("UnderwriterSplit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnderwriterSplit);
                this.columnManagerSplit = new global::System.Data.DataColumn("ManagerSplit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagerSplit);
                this.columnAgentSplit = new global::System.Data.DataColumn("AgentSplit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentSplit);
                this.columnPolicyLaps = new global::System.Data.DataColumn("PolicyLaps", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPolicyLaps);
                this.columnSpouseCover = new global::System.Data.DataColumn("SpouseCover", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpouseCover);
                this.columnChildCover = new global::System.Data.DataColumn("ChildCover", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildCover);
                this.columnAdultCover = new global::System.Data.DataColumn("AdultCover", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdultCover);
                this.columnparlourid = new global::System.Data.DataColumn("parlourid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparlourid);
                this.columnPlanUnderwriter = new global::System.Data.DataColumn("PlanUnderwriter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanUnderwriter);
                this.columnJoiningFee = new global::System.Data.DataColumn("JoiningFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoiningFee);
                this.columnLastModified = new global::System.Data.DataColumn("LastModified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModified);
                this.columnModifiedUser = new global::System.Data.DataColumn("ModifiedUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedUser);
                this.columnHeadManagerSplit = new global::System.Data.DataColumn("HeadManagerSplit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadManagerSplit);
                this.columnManager2Split = new global::System.Data.DataColumn("Manager2Split", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManager2Split);
                this.columnOfficeSplit = new global::System.Data.DataColumn("OfficeSplit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfficeSplit);
                this.columnAdminSplit = new global::System.Data.DataColumn("AdminSplit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminSplit);
                this.columnMainMember = new global::System.Data.DataColumn("MainMember", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainMember);
                this.columnCompanySplit = new global::System.Data.DataColumn("CompanySplit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanySplit);
                this.columnCover0to5year = new global::System.Data.DataColumn("Cover0to5year", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover0to5year);
                this.columnCover6to13year = new global::System.Data.DataColumn("Cover6to13year", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover6to13year);
                this.columnCover14to21year = new global::System.Data.DataColumn("Cover14to21year", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover14to21year);
                this.columnCover22to40year = new global::System.Data.DataColumn("Cover22to40year", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover22to40year);
                this.columnCover41to59year = new global::System.Data.DataColumn("Cover41to59year", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover41to59year);
                this.columnCover60to65year = new global::System.Data.DataColumn("Cover60to65year", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover60to65year);
                this.columnCover66to75year = new global::System.Data.DataColumn("Cover66to75year", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCover66to75year);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpkiPlanID}, true));
                this.columnpkiPlanID.AutoIncrement = true;
                this.columnpkiPlanID.AllowDBNull = false;
                this.columnpkiPlanID.ReadOnly = true;
                this.columnpkiPlanID.Unique = true;
                this.columnPlanName.MaxLength = 50;
                this.columnPlanDesc.MaxLength = 50;
                this.columnPlanUnderwriter.MaxLength = 50;
                this.columnModifiedUser.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetPlanDetailsByPlanIdRow NewGetPlanDetailsByPlanIdRow() {
                return ((GetPlanDetailsByPlanIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetPlanDetailsByPlanIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetPlanDetailsByPlanIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPlanDetailsByPlanIdRowChanged != null)) {
                    this.GetPlanDetailsByPlanIdRowChanged(this, new GetPlanDetailsByPlanIdRowChangeEvent(((GetPlanDetailsByPlanIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPlanDetailsByPlanIdRowChanging != null)) {
                    this.GetPlanDetailsByPlanIdRowChanging(this, new GetPlanDetailsByPlanIdRowChangeEvent(((GetPlanDetailsByPlanIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPlanDetailsByPlanIdRowDeleted != null)) {
                    this.GetPlanDetailsByPlanIdRowDeleted(this, new GetPlanDetailsByPlanIdRowChangeEvent(((GetPlanDetailsByPlanIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPlanDetailsByPlanIdRowDeleting != null)) {
                    this.GetPlanDetailsByPlanIdRowDeleting(this, new GetPlanDetailsByPlanIdRowChangeEvent(((GetPlanDetailsByPlanIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetPlanDetailsByPlanIdRow(GetPlanDetailsByPlanIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsGetPlanDetailsByPlanId ds = new dsGetPlanDetailsByPlanId();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPlanDetailsByPlanIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetPlanDetailsByPlanIdRow : global::System.Data.DataRow {
            
            private GetPlanDetailsByPlanIdDataTable tableGetPlanDetailsByPlanId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetPlanDetailsByPlanIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPlanDetailsByPlanId = ((GetPlanDetailsByPlanIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int pkiPlanID {
                get {
                    return ((int)(this[this.tableGetPlanDetailsByPlanId.pkiPlanIDColumn]));
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.pkiPlanIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PlanName {
                get {
                    try {
                        return ((string)(this[this.tableGetPlanDetailsByPlanId.PlanNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanName\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.PlanNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PlanDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetPlanDetailsByPlanId.PlanDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanDesc\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.PlanDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PlanSubscription {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.PlanSubscriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanSubscription\' in table \'GetPlanDetailsByPlanId\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.PlanSubscriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Spouse {
                get {
                    try {
                        return ((int)(this[this.tableGetPlanDetailsByPlanId.SpouseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Spouse\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.SpouseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Children {
                get {
                    try {
                        return ((int)(this[this.tableGetPlanDetailsByPlanId.ChildrenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Children\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.ChildrenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Adults {
                get {
                    try {
                        return ((int)(this[this.tableGetPlanDetailsByPlanId.AdultsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adults\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.AdultsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.CoverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.CoverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WaitingPeriod {
                get {
                    try {
                        return ((int)(this[this.tableGetPlanDetailsByPlanId.WaitingPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaitingPeriod\' in table \'GetPlanDetailsByPlanId\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.WaitingPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal UnderwriterSplit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.UnderwriterSplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnderwriterSplit\' in table \'GetPlanDetailsByPlanId\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.UnderwriterSplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ManagerSplit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.ManagerSplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManagerSplit\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.ManagerSplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AgentSplit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.AgentSplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentSplit\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.AgentSplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PolicyLaps {
                get {
                    try {
                        return ((int)(this[this.tableGetPlanDetailsByPlanId.PolicyLapsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PolicyLaps\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.PolicyLapsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SpouseCover {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.SpouseCoverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpouseCover\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.SpouseCoverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ChildCover {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.ChildCoverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildCover\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.ChildCoverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AdultCover {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.AdultCoverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdultCover\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.AdultCoverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid parlourid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetPlanDetailsByPlanId.parlouridColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parlourid\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.parlouridColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PlanUnderwriter {
                get {
                    try {
                        return ((string)(this[this.tableGetPlanDetailsByPlanId.PlanUnderwriterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanUnderwriter\' in table \'GetPlanDetailsByPlanId\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.PlanUnderwriterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal JoiningFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.JoiningFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoiningFee\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.JoiningFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LastModified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetPlanDetailsByPlanId.LastModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastModified\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.LastModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ModifiedUser {
                get {
                    try {
                        return ((string)(this[this.tableGetPlanDetailsByPlanId.ModifiedUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedUser\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.ModifiedUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal HeadManagerSplit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.HeadManagerSplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeadManagerSplit\' in table \'GetPlanDetailsByPlanId\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.HeadManagerSplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Manager2Split {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Manager2SplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manager2Split\' in table \'GetPlanDetailsByPlanId\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Manager2SplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal OfficeSplit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.OfficeSplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OfficeSplit\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.OfficeSplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AdminSplit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.AdminSplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminSplit\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.AdminSplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MainMember {
                get {
                    try {
                        return ((int)(this[this.tableGetPlanDetailsByPlanId.MainMemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainMember\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.MainMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CompanySplit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.CompanySplitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanySplit\' in table \'GetPlanDetailsByPlanId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.CompanySplitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover0to5year {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Cover0to5yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover0to5year\' in table \'GetPlanDetailsByPlanId\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Cover0to5yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover6to13year {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Cover6to13yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover6to13year\' in table \'GetPlanDetailsByPlanId\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Cover6to13yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover14to21year {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Cover14to21yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover14to21year\' in table \'GetPlanDetailsByPlanId\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Cover14to21yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover22to40year {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Cover22to40yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover22to40year\' in table \'GetPlanDetailsByPlanId\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Cover22to40yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover41to59year {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Cover41to59yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover41to59year\' in table \'GetPlanDetailsByPlanId\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Cover41to59yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover60to65year {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Cover60to65yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover60to65year\' in table \'GetPlanDetailsByPlanId\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Cover60to65yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Cover66to75year {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPlanDetailsByPlanId.Cover66to75yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cover66to75year\' in table \'GetPlanDetailsByPlanId\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPlanDetailsByPlanId.Cover66to75yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlanNameNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.PlanNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlanNameNull() {
                this[this.tableGetPlanDetailsByPlanId.PlanNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlanDescNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.PlanDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlanDescNull() {
                this[this.tableGetPlanDetailsByPlanId.PlanDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlanSubscriptionNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.PlanSubscriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlanSubscriptionNull() {
                this[this.tableGetPlanDetailsByPlanId.PlanSubscriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSpouseNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.SpouseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSpouseNull() {
                this[this.tableGetPlanDetailsByPlanId.SpouseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsChildrenNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.ChildrenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetChildrenNull() {
                this[this.tableGetPlanDetailsByPlanId.ChildrenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAdultsNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.AdultsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAdultsNull() {
                this[this.tableGetPlanDetailsByPlanId.AdultsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCoverNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.CoverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCoverNull() {
                this[this.tableGetPlanDetailsByPlanId.CoverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWaitingPeriodNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.WaitingPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWaitingPeriodNull() {
                this[this.tableGetPlanDetailsByPlanId.WaitingPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnderwriterSplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.UnderwriterSplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUnderwriterSplitNull() {
                this[this.tableGetPlanDetailsByPlanId.UnderwriterSplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsManagerSplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.ManagerSplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetManagerSplitNull() {
                this[this.tableGetPlanDetailsByPlanId.ManagerSplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAgentSplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.AgentSplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAgentSplitNull() {
                this[this.tableGetPlanDetailsByPlanId.AgentSplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPolicyLapsNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.PolicyLapsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPolicyLapsNull() {
                this[this.tableGetPlanDetailsByPlanId.PolicyLapsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSpouseCoverNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.SpouseCoverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSpouseCoverNull() {
                this[this.tableGetPlanDetailsByPlanId.SpouseCoverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsChildCoverNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.ChildCoverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetChildCoverNull() {
                this[this.tableGetPlanDetailsByPlanId.ChildCoverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAdultCoverNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.AdultCoverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAdultCoverNull() {
                this[this.tableGetPlanDetailsByPlanId.AdultCoverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsparlouridNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.parlouridColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetparlouridNull() {
                this[this.tableGetPlanDetailsByPlanId.parlouridColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlanUnderwriterNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.PlanUnderwriterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlanUnderwriterNull() {
                this[this.tableGetPlanDetailsByPlanId.PlanUnderwriterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsJoiningFeeNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.JoiningFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetJoiningFeeNull() {
                this[this.tableGetPlanDetailsByPlanId.JoiningFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastModifiedNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.LastModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastModifiedNull() {
                this[this.tableGetPlanDetailsByPlanId.LastModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModifiedUserNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.ModifiedUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModifiedUserNull() {
                this[this.tableGetPlanDetailsByPlanId.ModifiedUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHeadManagerSplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.HeadManagerSplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHeadManagerSplitNull() {
                this[this.tableGetPlanDetailsByPlanId.HeadManagerSplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsManager2SplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Manager2SplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetManager2SplitNull() {
                this[this.tableGetPlanDetailsByPlanId.Manager2SplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOfficeSplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.OfficeSplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOfficeSplitNull() {
                this[this.tableGetPlanDetailsByPlanId.OfficeSplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAdminSplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.AdminSplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAdminSplitNull() {
                this[this.tableGetPlanDetailsByPlanId.AdminSplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMainMemberNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.MainMemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMainMemberNull() {
                this[this.tableGetPlanDetailsByPlanId.MainMemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanySplitNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.CompanySplitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanySplitNull() {
                this[this.tableGetPlanDetailsByPlanId.CompanySplitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCover0to5yearNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Cover0to5yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCover0to5yearNull() {
                this[this.tableGetPlanDetailsByPlanId.Cover0to5yearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCover6to13yearNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Cover6to13yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCover6to13yearNull() {
                this[this.tableGetPlanDetailsByPlanId.Cover6to13yearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCover14to21yearNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Cover14to21yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCover14to21yearNull() {
                this[this.tableGetPlanDetailsByPlanId.Cover14to21yearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCover22to40yearNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Cover22to40yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCover22to40yearNull() {
                this[this.tableGetPlanDetailsByPlanId.Cover22to40yearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCover41to59yearNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Cover41to59yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCover41to59yearNull() {
                this[this.tableGetPlanDetailsByPlanId.Cover41to59yearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCover60to65yearNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Cover60to65yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCover60to65yearNull() {
                this[this.tableGetPlanDetailsByPlanId.Cover60to65yearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCover66to75yearNull() {
                return this.IsNull(this.tableGetPlanDetailsByPlanId.Cover66to75yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCover66to75yearNull() {
                this[this.tableGetPlanDetailsByPlanId.Cover66to75yearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetPlanDetailsByPlanIdRowChangeEvent : global::System.EventArgs {
            
            private GetPlanDetailsByPlanIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetPlanDetailsByPlanIdRowChangeEvent(GetPlanDetailsByPlanIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetPlanDetailsByPlanIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Funeral.Web.Admin.Reports.DataSets.dsGetPlanDetailsByPlanIdTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetPlanDetailsByPlanIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetPlanDetailsByPlanIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetPlanDetailsByPlanId";
            tableMapping.ColumnMappings.Add("pkiPlanID", "pkiPlanID");
            tableMapping.ColumnMappings.Add("PlanName", "PlanName");
            tableMapping.ColumnMappings.Add("PlanDesc", "PlanDesc");
            tableMapping.ColumnMappings.Add("PlanSubscription", "PlanSubscription");
            tableMapping.ColumnMappings.Add("Spouse", "Spouse");
            tableMapping.ColumnMappings.Add("Children", "Children");
            tableMapping.ColumnMappings.Add("Adults", "Adults");
            tableMapping.ColumnMappings.Add("Cover", "Cover");
            tableMapping.ColumnMappings.Add("WaitingPeriod", "WaitingPeriod");
            tableMapping.ColumnMappings.Add("UnderwriterSplit", "UnderwriterSplit");
            tableMapping.ColumnMappings.Add("ManagerSplit", "ManagerSplit");
            tableMapping.ColumnMappings.Add("AgentSplit", "AgentSplit");
            tableMapping.ColumnMappings.Add("PolicyLaps", "PolicyLaps");
            tableMapping.ColumnMappings.Add("SpouseCover", "SpouseCover");
            tableMapping.ColumnMappings.Add("ChildCover", "ChildCover");
            tableMapping.ColumnMappings.Add("AdultCover", "AdultCover");
            tableMapping.ColumnMappings.Add("parlourid", "parlourid");
            tableMapping.ColumnMappings.Add("PlanUnderwriter", "PlanUnderwriter");
            tableMapping.ColumnMappings.Add("JoiningFee", "JoiningFee");
            tableMapping.ColumnMappings.Add("LastModified", "LastModified");
            tableMapping.ColumnMappings.Add("ModifiedUser", "ModifiedUser");
            tableMapping.ColumnMappings.Add("HeadManagerSplit", "HeadManagerSplit");
            tableMapping.ColumnMappings.Add("Manager2Split", "Manager2Split");
            tableMapping.ColumnMappings.Add("OfficeSplit", "OfficeSplit");
            tableMapping.ColumnMappings.Add("AdminSplit", "AdminSplit");
            tableMapping.ColumnMappings.Add("MainMember", "MainMember");
            tableMapping.ColumnMappings.Add("CompanySplit", "CompanySplit");
            tableMapping.ColumnMappings.Add("Cover0to5year", "Cover0to5year");
            tableMapping.ColumnMappings.Add("Cover6to13year", "Cover6to13year");
            tableMapping.ColumnMappings.Add("Cover14to21year", "Cover14to21year");
            tableMapping.ColumnMappings.Add("Cover22to40year", "Cover22to40year");
            tableMapping.ColumnMappings.Add("Cover41to59year", "Cover41to59year");
            tableMapping.ColumnMappings.Add("Cover60to65year", "Cover60to65year");
            tableMapping.ColumnMappings.Add("Cover66to75year", "Cover66to75year");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["FuneralConnection"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetPlanDetailsByPlanId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsGetPlanDetailsByPlanId.GetPlanDetailsByPlanIdDataTable dataTable, global::System.Nullable<int> ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsGetPlanDetailsByPlanId.GetPlanDetailsByPlanIdDataTable GetData(global::System.Nullable<int> ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsGetPlanDetailsByPlanId.GetPlanDetailsByPlanIdDataTable dataTable = new dsGetPlanDetailsByPlanId.GetPlanDetailsByPlanIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(dsGetPlanDetailsByPlanId dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(dsGetPlanDetailsByPlanId dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(dsGetPlanDetailsByPlanId dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(dsGetPlanDetailsByPlanId dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591